{"version":3,"file":"3779.7d3c20f361f74c598ab8.js","mappings":"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","sources":["webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/SlideTransition.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/BotAttachModal.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../global/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  canReport?: boolean;\n  onReport: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  canReport,\n  onReport,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n          {canReport && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={onReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nconst formatFileSize = (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n\nexport default formatFileSize;\n","import React, {\n  FC, useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 1500;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    let timeout: number | undefined;\n    if (!isVisible || !isPlayed || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlayed, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && renderFileSize(bufferedProgress, fileSize)}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className=\"playback-rate-menu\"\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\n\nimport VideoPlayerControls from './VideoPlayerControls';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  areControlsVisible: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleMouseOut = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (e.target === videoRef.current) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!isGif && !IS_TOUCH_ENV ? handleMouseMove : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration || 0 : 0}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport {\n  getChatAvatarHash,\n  getMessageDocument,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { AVATAR_FULL_DIMENSIONS, calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setIsFooterHidden?: (isHidden: boolean) => void;\n  isFooterHidden?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    messageId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    profilePhotoIndex,\n    origin,\n    animationLevel,\n    isFooterHidden,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    onClose,\n    onFooterClick,\n    setIsFooterHidden,\n  } = props;\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n\n  const isOpen = Boolean(avatarOwner || messageId);\n  const isAvatar = Boolean(avatarOwner);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const toggleControls = useCallback((isVisible) => {\n    setIsFooterHidden?.(!isVisible);\n  }, [setIsFooterHidden]);\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  if (isAvatar) {\n    return (\n      <div key={chatId} className=\"MediaViewerContent\">\n        {renderPhoto(\n          fullMediaBlobUrl || previewBlobUrl,\n          calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n          !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        )}\n      </div>\n    );\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={`MediaViewerContent ${hasFooter ? 'has-footer' : ''}`}\n    >\n      {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      )}\n      {isVideo && ((!isActive && IS_TOUCH_ENV) ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      ) : (\n        <VideoPlayer\n          key={messageId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          areControlsVisible={!isFooterHidden}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          volume={volume}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isHidden={isFooterHidden && IS_TOUCH_ENV}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        origin,\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MediaViewerOrigin } from '../../types';\n\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport arePropsShallowEqual from '../../util/arePropsShallowEqual';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD, RealTouchEvent } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport useTimeout from '../../hooks/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  getMessageId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMessage: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  isActive?: boolean;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isZoomed?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = 40;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 0.6;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_X_THRESHOLD = 40;\nconst CLICK_Y_THRESHOLD = 80;\nlet cancelAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  messageId,\n  getMessageId,\n  selectMessage,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  isActive,\n  hasFooter,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const [activeMessageId, setActiveMessageId] = useState<number | undefined>(messageId);\n  const forceUpdate = useForceUpdate();\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(true);\n\n  const {\n    isZoomed,\n    onClose,\n  } = rest;\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMessageDebounced = useDebouncedCallback(selectMessage, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const handleToggleFooterVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = window.innerHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < CLICK_X_THRESHOLD) return;\n    if (!isFooter && e.pageX > window.innerWidth - CLICK_X_THRESHOLD) return;\n    setIsFooterHidden(!isFooterHidden);\n  }, [isFooterHidden]);\n\n  useTimeout(() => setIsFooterHidden(false), ANIMATION_DURATION - 150);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !containerRef.current || isZoomed || !activeMessageId) {\n      return undefined;\n    }\n    let lastTransform = { x: 0, y: 0, scale: 1 };\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (e: MouseEvent) => {\n      if (transformRef.current.scale !== 1) return false;\n      let direction = 0;\n      if (window.innerHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return false;\n      }\n      if (e.pageX < CLICK_X_THRESHOLD) {\n        direction = -1;\n      } else if (e.pageX > window.innerWidth - CLICK_X_THRESHOLD) {\n        direction = 1;\n      }\n      const mId = getMessageId(activeMessageId, direction);\n      if (mId) {\n        const offset = (window.innerWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMessageId(mId);\n        selectMessageDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n      }\n      return direction !== 0;\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      excludedClosestSelector: '.MediaViewerFooter',\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        lastGestureTime = Date.now();\n        if (arePropsShallowEqual(transformRef.current, { x: 0, y: 0, scale: 1 })) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }) => {\n        if (checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS) {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= window.innerWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const h = 10;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: lastTransform.x + dragOffsetX,\n              y: lastTransform.y + dragOffsetY,\n              scale,\n            });\n          }\n          return;\n        }\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > h || (absOffsetX > h && absOffsetY < h)) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            setTransform({\n              x: dragOffsetX,\n              y: 0,\n              scale,\n            });\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > h || (absOffsetY > h && absOffsetX < h)) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          setTransform({\n            x: 0,\n            y: dragOffsetY,\n            scale,\n          });\n        }\n      },\n      onZoom: (e, {\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        // Calculate current scale based on zoom factor and limits, add max zoom margin for bounce back effect\n        const scale = Math.min(MAX_ZOOM * 3, Math.max(lastTransform.scale * zoomFactor, MIN_ZOOM));\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        setTransform({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n      },\n      onClick(e) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n          return undefined;\n        }\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return undefined;\n          lastTransform = {\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          };\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        return animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n      },\n      onRelease: () => {\n        const absX = Math.abs(transformRef.current.x);\n        const absY = Math.abs(transformRef.current.y);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n\n        clearSwipeDirectionDebounced();\n        setIsActiveDebounced(true);\n\n        // If scale is less than 1 we need to bounce back\n        if (scale < 1) {\n          lastTransform = { x: 0, y: 0, scale: 1 };\n          return animateNumber({\n            from: [x, y, scale],\n            to: [0, 0, 1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n        }\n        if (scale > 1) {\n          if (!content || !initialContentRect) {\n            lastTransform = {\n              x,\n              y,\n              scale,\n            };\n            return undefined;\n          }\n          // Get current content boundaries\n          const boundaries = content.getBoundingClientRect();\n          const s1 = Math.min(scale, MAX_ZOOM);\n          const scaleFactor = s1 / scale;\n\n          // Calculate new position based on the last zoom center to keep the zoom center\n          // at the same position when bouncing back from max zoom\n          let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n          let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n          // Arbitrary pan velocity coefficient\n          const k = 0.15;\n\n          // If scale didn't change, we need to add inertia to pan gesture\n          if (lastTransform.scale === scale) {\n            // Calculate user gesture velocity\n            const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n            const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n            // Add extra distance based on gesture velocity and last pan delta\n            x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n            y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n          }\n\n          // If content is outside window we calculate offset boundaries\n          // based on initial content rect and current scale\n          if (boundaries.width > window.innerWidth) {\n            const minOffsetX = -initialContentRect.left * s1;\n            const maxOffsetX = window.innerWidth - initialContentRect.right * s1;\n            x1 = Math.min(minOffsetX, Math.max(maxOffsetX, x1));\n          } else {\n            // Else we center the content on the screen\n            x1 = (window.innerWidth - window.innerWidth * s1) / 2;\n          }\n\n          if (boundaries.height > window.innerHeight) {\n            const minOffsetY = -initialContentRect.top * s1;\n            const maxOffsetY = window.innerHeight - initialContentRect.bottom * s1;\n            y1 = Math.min(minOffsetY, Math.max(maxOffsetY, y1));\n          } else {\n            y1 = (window.innerHeight - window.innerHeight * s1) / 2;\n          }\n          lastTransform = {\n            x: x1,\n            y: y1,\n            scale: s1,\n          };\n          cancelAnimation = animateNumber({\n            from: [x, y, scale],\n            to: [x1, y1, s1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n          return undefined;\n        }\n        lastTransform = {\n          x,\n          y,\n          scale,\n        };\n        if (absY >= SWIPE_Y_THRESHOLD) return onClose();\n        // Bounce back if vertical swipe is below threshold\n        if (absY > 0) {\n          return animateNumber({\n            from: y,\n            to: 0,\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: 0,\n              y: value,\n              scale,\n            }),\n          });\n        }\n        // Get horizontal swipe direction\n        const direction = x < 0 ? 1 : -1;\n        const mId = getMessageId(activeMessageId, x < 0 ? 1 : -1);\n        // Get the direction of the last pan gesture.\n        // Could be different from the total horizontal swipe direction\n        // if user starts a swipe in one direction and then changes the direction\n        // we need to cancel slide transition\n        const dirX = panDelta.x < 0 ? -1 : 1;\n        if (mId && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n          const offset = (window.innerWidth + SLIDES_GAP) * direction;\n          // If image is shifted by more than SWIPE_X_THRESHOLD,\n          // We shift everything by one screen width and then set new active message id\n          transformRef.current.x += offset;\n          setActiveMessageId(mId);\n          selectMessageDebounced(mId);\n        }\n        // Then we always return to the original position\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: transformRef.current.scale,\n          }),\n        });\n        return undefined;\n      },\n    });\n  }, [\n    isZoomed,\n    onClose,\n    setTransform,\n    getMessageId,\n    activeMessageId,\n    selectMessageDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n  ]);\n\n  if (!activeMessageId) return undefined;\n\n  const nextMessageId = getMessageId(activeMessageId, 1);\n  const previousMessageId = getMessageId(activeMessageId, -1);\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {previousMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-window.innerWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={previousMessageId}\n          />\n        </div>\n      )}\n      {activeMessageId && (\n        <div\n          className={`MediaViewerSlide ${isActive ? 'MediaViewerSlide--active' : ''}`}\n          onClick={handleToggleFooterVisibility}\n          ref={activeSlideRef}\n          style={getAnimationStyle(offsetX, offsetY, scale)}\n        >\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={activeMessageId}\n            isActive={isActive && isActiveRef.current}\n            setIsFooterHidden={setIsFooterHidden}\n            isFooterHidden={isFooterHidden || isZoomed || scale !== 1}\n          />\n        </div>\n      )}\n      {nextMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(window.innerWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={nextMessageId}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: React.ReactNode;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.Transition__slide--active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import React, { FC } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Transition, { ChildrenFn, TransitionProps } from '../ui/Transition';\n\nconst SlideTransition: FC<TransitionProps & { children: ChildrenFn }> = ({ children, ...props }) => {\n  if (IS_TOUCH_ENV) return children(true, true, 1);\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Transition {...props}>{children}</Transition>;\n};\n\nexport default SlideTransition;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = useCallback(() => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  }, [zoomLevel]);\n\n  const handleZoomIn = useCallback(() => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  }, [zoomLevel]);\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../hooks/usePrevious';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureEvents } from '../../util/captureEvents';\nimport windowSize from '../../util/windowSize';\nimport { AVATAR_FULL_DIMENSIONS, MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport PanZoom from './PanZoom';\nimport SenderInfo from './SenderInfo';\nimport SlideTransition from './SlideTransition';\nimport ZoomControls from './ZoomControls';\nimport ReportModal from '../common/ReportModal';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  isChatWithSelf,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const { isGif } = video || webPageVideo || {};\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const singleMessageId = webPagePhoto || webPageVideo ? messageId : undefined;\n\n  const messageIds = useMemo(() => {\n    return singleMessageId\n      ? [singleMessageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [singleMessageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 && !IS_TOUCH_ENV ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const avatarPhoto = avatarOwner?.photos?.[profilePhotoIndex!];\n  const canReport = !!avatarPhoto && profilePhotoIndex! > 0 && !isChatWithSelf;\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({\n      x: 0,\n      y: 0,\n    });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({\n        x: 0,\n        y: 0,\n      });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  }, [close, chatId, threadId, focusMessage, toggleChatInfo, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId,\n      messageIds: [messageId],\n    });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  const selectMessage = useCallback((id?: number) => openMediaViewer({\n    chatId,\n    threadId,\n    messageId: id,\n    origin,\n  }, {\n    forceOnHeavyAnimation: true,\n  }), [chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (!fromId) return undefined;\n    const index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      return messageIds[index + direction];\n    }\n    return undefined;\n  }, [messageIds]);\n\n  const nextMessageId = getMessageId(messageId, 1);\n  const previousMessageId = getMessageId(messageId, -1);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({\n      x,\n      y,\n    });\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: closeMediaViewer,\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectMessage(previousMessageId);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectMessage(nextMessageId);\n          break;\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [isOpen, nextMessageId, previousMessageId, selectMessage]);\n\n  useEffect(() => {\n    if (isZoomed || IS_TOUCH_ENV) return undefined;\n    const element = document.querySelector<HTMLDivElement>('.MediaViewerSlide--active');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .Spoiler, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: close,\n    });\n  }, [close, isGif, isZoomed, messageId]);\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={close}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          isZoomed={isZoomed}\n          message={message}\n          fileName={fileName}\n          canReport={canReport}\n          onReport={openReportModal}\n          onCloseMediaViewer={close}\n          onForward={handleForward}\n          onZoomToggle={handleZoomToggle}\n          isAvatar={isAvatar}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <PanZoom\n        noWrap={!canPanZoomWrap}\n        canPan={isZoomed}\n        panDeltaX={panDelta.x}\n        panDeltaY={panDelta.y}\n        zoomLevel={zoomLevel}\n        onPan={handlePan}\n      >\n        <SlideTransition\n          activeKey={selectedMediaMessageIndex}\n          name={slideAnimation}\n        >\n          {(isActive: boolean) => (\n            <MediaViewerSlides\n              messageId={messageId}\n              getMessageId={getMessageId}\n              chatId={chatId}\n              isPhoto={isPhoto}\n              isGif={isGif}\n              threadId={threadId}\n              avatarOwnerId={avatarOwner && avatarOwner.id}\n              profilePhotoIndex={profilePhotoIndex}\n              origin={origin}\n              isOpen={isOpen}\n              hasFooter={hasFooter}\n              isZoomed={isZoomed}\n              isActive={isActive}\n              isVideo={isVideo}\n              animationLevel={animationLevel}\n              onClose={close}\n              selectMessage={selectMessage}\n              onFooterClick={handleFooterClick}\n            />\n          )}\n        </SlideTransition>\n      </PanZoom>\n      {!isFirst && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n          onClick={() => selectMessage(previousMessageId)}\n        />\n      )}\n      {!isLast && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n          onClick={() => selectMessage(nextMessageId)}\n        />\n      )}\n      <ZoomControls\n        isShown={isZoomed}\n        onChangeZoom={handleZoomValue}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        isChatWithSelf,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n)(MediaViewer));\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  loadMore?: NoneToVoidFunction;\n  onFilterChange: (filter: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  loadMore,\n  onFilterChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  const resetFilter = useCallback(() => {\n    onFilterChange('');\n  }, [onFilterChange]);\n  useInputFocusOnOpen(filterRef, isOpen, resetFilter);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalState } from '../../global/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  sortChatIds,\n} from '../../global/helpers';\nimport { unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n  currentUserId?: string;\n  switchBotInline?: GlobalState['switchBotInline'];\n};\n\nconst ForwardPicker: FC<OwnProps & StateProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  currentUserId,\n  isOpen,\n  switchBotInline,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n    openChatWithText,\n    resetSwitchBotInline,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const chatAndContactIds = useMemo(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, filter, currentUserId),\n      ...(contactIds ? filterUsersByName(contactIds, usersById, filter) : []),\n    ]), chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, contactIds, currentUserId, filter, isOpen, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    if (switchBotInline) {\n      const text = `@${switchBotInline.botUsername} ${switchBotInline.query}`;\n      openChatWithText({ chatId: userId, text });\n      resetSwitchBotInline();\n    } else {\n      setForwardChatId({ id: userId });\n    }\n  }, [openChatWithText, resetSwitchBotInline, setForwardChatId, switchBotInline]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n    resetSwitchBotInline();\n  }, [exitForwardMode, resetSwitchBotInline]);\n\n  const renderingChatAndContactIds = useCurrentOrPrev(chatAndContactIds, true)!;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={renderingChatAndContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n      switchBotInline,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n      switchBotInline,\n    };\n  },\n)(ForwardPicker));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url));\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import useWindowSize from '../../../hooks/useWindowSize';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_close' | 'iframe_ready';\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'main_button_pressed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (isOpen: boolean, isSimpleView: boolean, onEvent: (event: WebAppInboundEvent) => void) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLIFrameElement>(null);\n  const ignoreEventsRef = useRef<boolean>(false);\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, []);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, []);\n\n  const sendViewport = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n      },\n    });\n  }, [sendEvent]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport();\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendTheme, sendViewport]);\n\n  useEffect(() => {\n    if (windowSize) {\n      sendViewport();\n    }\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    }\n  }, [isOpen, sendViewport]);\n\n  return {\n    ref, sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalState } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { selectCurrentChat, selectTheme } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport useWebAppFrame, { WebAppInboundEvent } from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  isInstalled?: boolean;\n  chat?: ApiChat;\n  theme?: ThemeKey;\n};\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst LINK_PREFIX = 'https://t.me/';\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  isInstalled,\n  theme,\n}) => {\n  const {\n    closeWebApp, sendWebViewData, prolongWebView, toggleBotInAttachMenu, openTelegramLink, openChat,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const lang = useLang();\n  const {\n    url, bot, buttonText, queryId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = LINK_PREFIX + event.eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_data_send') {\n      const { eventData } = event;\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const { eventData } = event;\n      const themeParams = extractCurrentThemeParams();\n      // Validate colors if they are present\n      const color = !eventData.color || validateHexColor(eventData.color) ? eventData.color\n        : themeParams.button_color;\n      const textColor = !eventData.text_color || validateHexColor(eventData.text_color) ? eventData.text_color\n        : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n  }, [bot, buttonText, closeWebApp, openTelegramLink, sendWebViewData]);\n\n  const {\n    ref, reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      bot: bot!,\n      queryId: queryId!,\n      peer: chat!,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleBotInAttachMenu({\n      botId: bot!.id,\n      isEnabled: !isInstalled,\n    });\n  }, [bot, isInstalled, toggleBotInAttachMenu]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={closeWebApp}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachMenuBot && (\n            <MenuItem icon={isInstalled ? 'stop' : 'install'} onClick={handleToggleClick} destructive={isInstalled}>\n              {lang(isInstalled ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [lang, closeWebApp, bot, MoreMenuButton, handleRefreshClick, isInstalled, handleToggleClick, chat, openBotChat]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) setMainButton(undefined);\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={closeWebApp}\n      header={header}\n      hasCloseButton\n    >\n      {isOpen && (\n        <>\n          <iframe\n            ref={ref}\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox=\"allow-scripts allow-same-origin allow-popups allow-forms\"\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { bot } = webApp || {};\n    const isInstalled = Boolean(bot && global.attachMenu.bots[bot.id]);\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n\n    return {\n      isInstalled,\n      chat,\n      theme,\n    };\n  },\n)(WebAppModal));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, { FC } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiUser } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n};\n\nconst BotAttachModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { closeBotAttachRequestModal, confirmBotAttachRequest } = getActions();\n\n  const lang = useLang();\n\n  const name = bot?.firstName;\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={closeBotAttachRequestModal}\n      confirmHandler={confirmBotAttachRequest}\n      title={name}\n      textParts={lang('WebApp.AddToAttachmentText', name)}\n    />\n  );\n};\n\nexport default BotAttachModal;\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'meta+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const fullName = getUserFullName(user);\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"medium\" />\n                    <div className=\"title\">\n                      <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n                    </div>\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n    };\n  },\n)(ReactorListModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 240;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectAnimationData = useMedia(`sticker${effectAnimationId}`, !effectAnimationId, ApiMediaFormat.Lottie);\n\n  const [localEffectAnimationData, setLocalEffectAnimationData] = useState<string | undefined>();\n  useEffect(() => {\n    if (localEffectAnimation) {\n      getAnimationData(localEffectAnimation as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalEffectAnimationData(data);\n      });\n    }\n  }, [localEffectAnimation]);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        id={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        animationData={localEffectAnimationData || effectAnimationData}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(ANIMATED_STICKERS_PATHS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FakeIcon from '../../common/FakeIcon';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n            {chat.fakeType && <FakeIcon fakeType={chat.fakeType} />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    deleteChatFolder,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n}) => {\n  const { loadProfilePhotos, loadAuthorizations } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n)(SettingsEditProfile));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n};\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    showDialog,\n  } = getActions();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [orderedFolderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n    };\n  },\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isUserId } from '../../../../global/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isVideo = stickerSet.isVideos;\n\n  const firstLetters = useMemo(() => {\n    if ((isVideo && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n    return undefined;\n  }, [isVideo, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isVideo ? (\n        <video src={mediaData} className={transitionClassNames} loop autoPlay />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n          clickArg={undefined}\n          noContextMenu\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ISettings, TimeFormat } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup, { IRadioOption } from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'shouldSuggestStickers' |\n    'shouldLoopStickers' |\n    'timeFormat'\n  )> & {\n    stickerSetIds?: string[];\n    stickerSetsById?: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  defaultReaction,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ISettings, LangCode } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"src-components-left-settings-SettingsActiveSession-module__SettingsActiveSession\",\"settingsActiveSession\":\"src-components-left-settings-SettingsActiveSession-module__SettingsActiveSession\",\"iconDevice\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice\",\"iconDevice__android\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__android\",\"iconDeviceAndroid\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__android\",\"iconDevice__apple\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__apple\",\"iconDeviceApple\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__apple\",\"iconDevice__brave\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__brave\",\"iconDeviceBrave\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__brave\",\"iconDevice__chrome\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__chrome\",\"iconDeviceChrome\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__chrome\",\"iconDevice__edge\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__edge\",\"iconDeviceEdge\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__edge\",\"iconDevice__firefox\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__firefox\",\"iconDeviceFirefox\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__firefox\",\"iconDevice__linux\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__linux\",\"iconDeviceLinux\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__linux\",\"iconDevice__opera\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__opera\",\"iconDeviceOpera\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__opera\",\"iconDevice__safari\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__safari\",\"iconDeviceSafari\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__safari\",\"iconDevice__samsung\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__samsung\",\"iconDeviceSamsung\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__samsung\",\"iconDevice__ubuntu\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__ubuntu\",\"iconDeviceUbuntu\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__ubuntu\",\"iconDevice__unknown\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__unknown\",\"iconDeviceUnknown\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__unknown\",\"iconDevice__vivaldi\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__vivaldi\",\"iconDeviceVivaldi\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__vivaldi\",\"iconDevice__windows\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__windows\",\"iconDeviceWindows\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__windows\",\"iconDevice__xbox\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__xbox\",\"iconDeviceXbox\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__xbox\",\"title\":\"src-components-left-settings-SettingsActiveSession-module__title\",\"note\":\"src-components-left-settings-SettingsActiveSession-module__note\",\"date\":\"src-components-left-settings-SettingsActiveSession-module__date\",\"box\":\"src-components-left-settings-SettingsActiveSession-module__box\",\"actionHeader\":\"src-components-left-settings-SettingsActiveSession-module__actionHeader\",\"actionName\":\"src-components-left-settings-SettingsActiveSession-module__actionName\",\"headerButton\":\"src-components-left-settings-SettingsActiveSession-module__headerButton\"};","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n    if (ttlDays <= 7) {\n      return '7';\n    }\n    if (ttlDays <= 30) {\n      return '30';\n    }\n    if (ttlDays <= 90) {\n      return '90';\n    }\n    if (ttlDays <= 180) {\n      return '180';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => [{\n    label: lang('Weeks', 1, 'i'),\n    value: '7',\n  }, {\n    label: lang('Months', 1, 'i'),\n    value: '30',\n  }, {\n    label: lang('Months', 3, 'i'),\n    value: '90',\n  }, {\n    label: lang('Months', 6, 'i'),\n    value: '180',\n  }], [lang]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, filter)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  availableReactions,\n  selectedReaction,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = availableReactions?.filter((l) => !l.isInactive).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || screen === SettingsScreens.QuickReaction\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, memo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady, ApiMediaFormat.Lottie);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n  const { transitionClassNames: animatedClassNames } = useShowTransition(shouldRenderAnimated);\n  const { shouldRender: shouldRenderStatic, transitionClassNames: staticClassNames } = useShowTransition(\n    !isReady || !isAnimationLoaded, undefined, true,\n  );\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isReady ? [staticClassNames] : undefined,\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          id={`select_${reaction.reaction}`}\n          className={cn('animated', [animatedClassNames])}\n          animationData={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  FC, memo, useLayoutEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiAvailableReaction, ApiMessage, ApiUser } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onSendReaction: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n}) => {\n  const { showNotification } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const copyOptions = getMessageCopyOptions(\n    message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n  );\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"heart-outline\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? getUserFullName(seenByRecentUsers[0])\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { MessageListType } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsMessageProtected,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n  } = getActions();\n\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canShowSeenBy={canShowSeenBy}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n    };\n  },\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectStickerSetByShortName,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiBotCommand, ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser, selectChatBot,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact, isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n  } = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const canReportChat = isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf);\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n    };\n  },\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonimous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonimous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonimous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n  onStickerFave: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n}) => {\n  const { clearRecentStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const lang = useLang();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const handleClearRecent = useCallback(() => {\n    clearRecentStickers();\n    closeConfirmModal();\n  }, [clearRecentStickers, closeConfirmModal]);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\">{stickerSet.title}</p>\n        {isRecent && (\n          <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n        )}\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === FAVORITE_SYMBOL_SET_ID && favoriteStickerIdsSet?.has(sticker.id)\n              ? onStickerUnfave : undefined}\n            onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n            onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n          />\n        ))}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentEmoji')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  isSavedMessages,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...Object.values(pickTruthy(stickerSetsById, addedSetIds)),\n    ];\n  }, [addedSetIds, favoriteStickers, recentStickers, chat, lang, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadRecentStickers();\n      sendMessageAction({ type: 'chooseSticker' });\n    }\n  }, [loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n          noContextMenu\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n    };\n  },\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    return { stickers, isSavedMessages };\n  },\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo, TeactNode } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsIds?: string[];\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  chatId,\n  selectedSendAsId,\n  sendAsIds,\n}) => {\n  const { saveDefaultSendAs } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsIds && !sendAsIds.length) {\n      onClose();\n    }\n  }, [sendAsIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsIds?.map((id, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const fullName = user ? getUserFullName(user) : chat?.title;\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleUserSelect(id)}\n            focus={selectedSendAsIndex === index}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              <div className=\"title\">\n                <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n              </div>\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport renderText from '../common/helpers/renderText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isSomeModalOpen, onModalToggle,\n}) => {\n  const { loadStickers, toggleStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            clickArg={undefined}\n            onClick={openModal}\n            noContextMenu\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'StatisticViews', isPlain: true },\n    {\n      name: 'forwards', title: 'PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{cell.isApproximate ? `≈${field}` : field}</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views)}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import React, {\n  FC, memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messageId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  isGroup,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  useEffect(() => {\n    if (!isActive) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    // Show Loading component if message was already selected for improving transition animation\n    const messageId = global.statistics.currentMessageId;\n\n    return {\n      statistics, dcId, isGroup, messageId,\n    };\n  },\n)(Statistics));\n","import React, {\n  FC, memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiMessageStatistics, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport {\n  ApiChat, ApiChatBannedRights, ApiExportedInvite, ApiMediaFormat,\n} from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, filter);\n  }, [chat.fullInfo?.members, currentUserId, filter]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiExportedInvite, ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n    };\n  },\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../global/selectors';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, closeManagement } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES } from '../../../config';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('Invite').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `t.me/${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"inviteDuck\"\n                size={STICKER_SIZE_INVITES}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              icon=\"link\"\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                icon=\"link\"\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    if (enabledReactions) {\n      setIsLoading(false);\n      setIsTouched(false);\n      setLocalEnabledReactions(enabledReactions);\n    }\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableReactions?.filter((l) => !l.isInactive).map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  about,\n  date,\n  isChannel,\n  user,\n  serverTimeOffset,\n  chatId,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport getAnimationData from '../../common/helpers/animatedAssets';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('JoinRequest').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"joinRequestDucks\"\n                size={STICKER_SIZE_JOIN_REQUESTS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { ApiCountry } from '../../api/types';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, lang('PaymentCheckoutMethod'))}\n        {paymentProvider && renderCheckoutItem(\n          buildClassName('provider', paymentProvider.toLowerCase()),\n          paymentProvider,\n          lang('PaymentCheckoutProvider'),\n        )}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, lang('PaymentShippingAddress'))}\n        {name && renderCheckoutItem('icon-user', name, lang('PaymentCheckoutName'))}\n        {phone && renderCheckoutItem('icon-phone', phone, lang('PaymentCheckoutPhoneNumber'))}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, lang('PaymentCheckoutShippingMethod'))}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ApiCountry } from '../../api/types';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('PaymentCardName')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { GlobalState } from '../../global/types';\nimport { ApiCountry } from '../../api/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getActions();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {\n        };\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isLoading}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n    };\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useTimeout(() => {\n    if (!IS_TOUCH_ENV) {\n      inputRef.current!.focus();\n    }\n  }, FOCUS_DELAY_TIMEOUT_MS);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<string>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<string>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import React, {\n  FC, useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["cache","Map","useBlurSync","dataUri","blurredRef","useRef","isChanged","useOnChange","current","undefined","img","Image","src","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","delay","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","Boolean","createGhost","source","origin","ghost","document","createElement","classList","add","draggable","oncontextmenu","stopEvent","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","mediaData","isVideo","isZoomed","fileName","isAvatar","canReport","onReport","onCloseMediaViewer","onForward","onZoomToggle","downloadMessageMedia","cancelMessageMediaDownload","getActions","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","useCallback","lang","useLang","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","className","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","useFlag","seekerRef","isSeekingRef","isSeeking","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","map","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","loadedPercent","totalSize","formatFileSize","Menu","positionY","autoClose","onClose","rate","disabled","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","videoRef","setIsPlayed","IS_TOUCH_ENV","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseMove","handleMouseOut","target","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","ownProps","chatId","threadId","messageId","avatarOwnerId","profilePhotoIndex","mediaViewer","selectChatMessage","senderId","avatarOwner","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","isFooterHidden","onFooterClick","setIsFooterHidden","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isFromSharedMedia","isFromSearch","isGhostAnimation","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","renderPhoto","calculateMediaViewerDimensions","textParts","renderMessageText","hasFooter","onContextMenu","imageSize","canDrag","Spinner","renderVideoPreview","alt","ANIMATION_DURATION","cancelAnimation","SwipeDirection","getMessageId","selectMessage","rest","containerRef","activeSlideRef","transformRef","x","y","scale","swipeDirectionRef","isActiveRef","activeMessageId","setActiveMessageId","setTransform","selectMessageDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","handleToggleFooterVisibility","isFooter","innerHeight","pageY","pageX","innerWidth","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","timingFunctions","onUpdate","isNotPassive","excludedClosestSelector","checkIfControlTarget","arePropsShallowEqual","event","captureEvent","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","abs","absOffsetY","h","Vertical","Horizontal","onZoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MAX_ZOOM","scaleFactor","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","centerX","centerY","absX","absY","boundaries","s1","x1","y1","k","Vx","Vy","minOffsetX","maxOffsetX","right","minOffsetY","top","maxOffsetY","bottom","dirX","nextMessageId","previousMessageId","offsetX","offsetY","getAnimationStyle","checkIfInsideSelector","selector","matches","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","zoomLevel","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","onMouseDown","newDragData","onMouseUp","deltaX","deltaY","getNewMatrixData","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","chat","renderText","formatMediaDateTime","date","Transition","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","setZoomLevel","handleZoomOut","handleZoomIn","step","type","Number","settings","byKey","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","singleMessageId","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","setPanDelta","avatarPhoto","getMessageFileName","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","windowHeight","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handlePan","useHistoryBack","onBack","handleKeyDown","shouldCloseOnVideo","ShowTransition","isRtl","activeKey","name","ReportModal","subject","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","loadMore","onFilterChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","resetFilter","useInputFocusOnOpen","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","i","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","switchBotInline","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","setForwardChatId","exitForwardMode","openChatWithText","resetSwitchBotInline","setFilter","markIsShown","unmarkIsShown","chatAndContactIds","priorityIds","unique","chatIds","getCanPostInChat","MAIN_THREAD_ID","usersById","getGlobal","users","sortChatIds","filterChatsByName","filterUsersByName","handleSelectUser","botUsername","query","handleClose","renderingChatAndContactIds","useCurrentOrPrev","getErrorHeader","error","isSlowMode","hasErrorKey","pick","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","showNotification","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","label","Checkbox","checked","onCheck","webApp","bot","isInstalled","attachMenu","bots","selectCurrentChat","theme","selectTheme","closeWebApp","sendWebViewData","prolongWebView","toggleBotInAttachMenu","openTelegramLink","openChat","mainButton","setMainButton","buttonText","queryId","isSimple","handleEvent","eventType","linkUrl","eventData","path_full","data","themeParams","extractCurrentThemeParams","validateHexColor","button_color","textColor","text_color","is_visible","trim","is_active","isProgressVisible","is_progress_visible","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","useWindowSize","frame","once","contentWindow","postMessage","JSON","stringify","is_expanded","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","err","useWebAppFrame","shouldShowMainButton","useInterval","peer","handleMainButtonClick","handleRefreshClick","handleToggleClick","botId","isEnabled","openBotChat","MoreMenuButton","isMenuOpen","isAttachMenuBot","destructive","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","getUserFullName","closeBotAttachRequestModal","confirmBotAttachRequest","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","messageListType","canDelete","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","handleClick","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","isClosing","startClosing","stopClosing","chosenTab","setChosenTab","canShowFilters","count","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","l","reaction","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","find","ReactionStaticEmoji","fullName","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","ANIMATED_STICKERS_PATHS","stopActiveEmojiInteraction","isHiding","startHiding","isPlaying","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectAnimationData","localEffectAnimationData","setLocalEffectAnimationData","getAnimationData","then","startSize","isReversed","AnimatedSticker","animationData","play","quality","IS_ANDROID","noLoop","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","getChatTitle","isVerified","VerifiedIcon","fakeType","FakeIcon","Link","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","description","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","isVoice","activeDownloads","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","sessionCount","activeSessions","orderedHashes","currentUser","loadProfilePhotos","loadAuthorizations","profileId","ProfileInfo","forceShowSelf","ChatExtra","langName","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","currentFirstName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","orderedFolderIds","foldersById","recommended","recommendedChatFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","STICKER_SIZE_FOLDER_SETTINGS","pill","fluid","narrow","multiline","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleChange","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","isTouched","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","useMediaTransition","firstLetters","getFirstLetters","hasThumbnail","isVideos","IS_WEBM_SUPPORTED","stickers","firstSticker","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","noContextMenu","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","stickerSetIds","added","setIds","stickerSetsById","setsById","defaultReaction","appConfig","messageTextSize","messageSendKeyCombo","shouldSuggestStickers","shouldLoopStickers","timeFormat","stickerSettingsRef","observeIntersectionForCovers","setSticker","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","handleMessageSendComboChange","newCombo","handleSuggestStickersChange","newValue","handleShouldLoopStickersChange","stickerSets","installedDate","RadioGroup","options","selected","fromSticker","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","context","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","blockedCount","totalCount","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","handler","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","availableReactions","selectedReaction","setDefaultReaction","isInactive","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","clientY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","isActivated","activate","deactivate","markAnimationLoaded","shouldRenderAnimated","animatedClassNames","shouldRenderStatic","staticClassNames","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onShowSeenBy","onShowReactors","onCopyMessages","menuRef","scrollableRef","noReactions","withReactions","markIsReady","unmarkIsReady","handleAfterCopy","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","option","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","canCopyNumber","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","recentReactions","msg","handleReport","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleCopyNumber","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","requestCalendar","calendar","useSchedule","stickerSetAccessHash","isScheduleRequested","isPreloadedGlobally","handleButtonClick","STICKER_SIZE_MODAL","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","canReportChat","chatBot","REPLIES_USER_ID","selectChatBot","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","isQuiz","shouldBeAnonimous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","ceil","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","favoriteStickers","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","handleClearRecent","stickersPerRow","STICKER_SIZE_PICKER","favoriteStickerIdsSet","isRecent","noAnimate","onUnfaveClick","FAVORITE_SYMBOL_SET_ID","has","onFaveClick","onRemoveRecentClick","canViewSet","stickerSetIntersections","favorite","recentStickers","addedSetIds","shouldPlay","loadRecentStickers","addRecentSticker","removeRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","defaultSets","fullSet","CHAT_STICKER_SET_ID","pickTruthy","noPopulatedSets","stickerSetEl","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","fullClassName","buttonClassName","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","handleMouseDown","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","currentMessageId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","loadMessageStatistics","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","acc","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","maxLength","noAdmins","adminIds","shouldUseSearchResults","listedIds","noScrollRestore","memberId","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","secondaryIcon","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","SUPPORTED_PROVIDERS","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","general","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","canRenderFooter","PaymentStep","shippingAddressRest","shippingCountry","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","DEBUG","console","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","handleModalClose","labelClassName","accept"],"sourceRoot":""}