{"version":3,"file":"302.50d4310230e3a2e5c85c.js","mappings":"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","sources":["webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/modules/actions/api/chats.ts","webpack://telegram-t/./src/modules/actions/ui/calls.ts","webpack://telegram-t/./src/modules/reducers/calls.ts","webpack://telegram-t/./src/modules/selectors/calls.ts","webpack://telegram-t/./src/util/deeplink.ts"],"sourcesContent":["import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\n\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\nconst DeleteMemberModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n}) => {\n  const { deleteChatMember } = getDispatch();\n\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n)(DeleteMemberModal));\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  TIPS_USERNAME,\n  LOCALIZED_TIPS,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID, ALL_FOLDER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n  selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, isChatBasicGroup,\n} from '../../helpers';\nimport { processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst CHATS_PRELOAD_INTERVAL = 300;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), CHATS_PRELOAD_INTERVAL, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds = new Set<string>();\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n      const nextChatId = folderAllOrderedIds?.find((id) => id !== currentChatId && !preloadedChatIds.has(id));\n      if (!nextChatId) {\n        return;\n      }\n\n      preloadedChatIds.add(nextChatId);\n\n      actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat && chat.lastMessage && chat.lastMessage.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openLinkedChat', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const chatFullInfo = await callApi('fetchFullChat', chat);\n\n    if (chatFullInfo?.fullInfo?.linkedChatId) {\n      actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n    }\n  })();\n});\n\naddReducer('focusMessageInComments', (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n    if (!result) {\n      return;\n    }\n\n    actions.focusMessage({ chatId, threadId, messageId });\n  })();\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions, payload) => {\n  const { langCode } = payload;\n\n  const usernamePostfix = langCode === 'pt-br'\n    ? 'BR'\n    : LOCALIZED_TIPS.includes(langCode) ? (langCode as string).toUpperCase() : '';\n\n  actions.openChatByUsername({ username: `${TIPS_USERNAME}${usernamePostfix}` });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('preloadArchivedChats', () => {\n  (async () => {\n    while (!getGlobal().chats.isFullyLoaded.archived) {\n      const currentGlobal = getGlobal();\n      const listIds = currentGlobal.chats.listIds.archived;\n      const oldestChat = listIds\n        ? listIds\n          .map((id) => currentGlobal.chats.byId[id])\n          .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(currentGlobal, chat.id))\n          .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n        : undefined;\n\n      await loadChats('archived', oldestChat?.id, oldestChat?.lastMessage!.date);\n      await pause(CHATS_PRELOAD_INTERVAL);\n    }\n  })();\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds?.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openChatByInvite', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('openChatByInvite', hash);\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.chatId });\n  })();\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url.match(RE_TG_LINK)[0]);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  const [part1, part2, part3] = uri.pathname.split('/').filter(Boolean).map((l) => decodeURI(l));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    actions.openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers') {\n    actions.openStickerSetShortName({\n      stickerSetShortName: part2,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    actions.joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist' });\n      return;\n    }\n\n    actions.focusMessage({\n      chatId,\n      messageId,\n    });\n  } else {\n    actions.openChatByUsername({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      commentId,\n      startParam: params.start,\n    });\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const {\n    username, messageId, commentId, startParam,\n  } = payload!;\n\n  (async () => {\n    const chat = selectCurrentChat(global);\n\n    if (!commentId) {\n      if (chat && chat.username === username) {\n        actions.focusMessage({ chatId: chat.id, messageId });\n        return;\n      }\n      await openChatByUsername(actions, username, messageId, startParam);\n      return;\n    }\n\n    const { chatId, type } = selectCurrentMessageList(global) || {};\n    const usernameChat = selectChatByUsername(global, username);\n    if (chatId && usernameChat && type === 'thread') {\n      const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n      if (threadInfo && threadInfo.chatId === chatId) {\n        actions.focusMessage({\n          chatId: threadInfo.chatId,\n          threadId: threadInfo.threadId,\n          messageId: commentId,\n        });\n        return;\n      }\n    }\n\n    if (!messageId) return;\n\n    await openCommentsByUsername(actions, username, messageId, commentId);\n  })();\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = Boolean(bannedRights.viewMessages);\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const chatAfterUpdate = await callApi('fetchFullChat', chat);\n    const newGlobal = getGlobal();\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<string, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo!.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo?.members?.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('toggleIsProtected', (global, actions, payload) => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddReducer('setChatEnabledReactions', (global, actions, payload) => {\n  const { chatId, enabledReactions } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  (async () => {\n    await callApi('setChatEnabledReactions', {\n      chat,\n      enabledReactions,\n    });\n\n    await loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: string, offsetDate?: number) {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: global.chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const { users, fullInfo, groupCall } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId, shouldReplaceHistory: true });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getDispatch()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n  startParam?: string,\n) {\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({ message: 'User does not exist' });\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat } from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { ApiGroupCall } from '../../../api/types';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { addChats, addUsers } from '../../reducers';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nconst joinAudio = new Audio('./voicechat_join.mp3');\nconst connectingAudio = new Audio('./voicechat_connecting.mp3');\nconnectingAudio.loop = true;\nconst leaveAudio = new Audio('./voicechat_leave.mp3');\nconst allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n\nconst sounds: Record<string, HTMLAudioElement> = {\n  join: joinAudio,\n  allowTalk: allowTalkAudio,\n  leave: leaveAudio,\n  connecting: connectingAudio,\n};\n\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nconst initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  initializationPromise = Promise.all(Object.values(sounds).map((l) => {\n    l.muted = true;\n    l.volume = 0.0001;\n    return l.play().then(() => {\n      l.pause();\n      l.volume = 1;\n      l.currentTime = 0;\n      l.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddReducer('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      isGroupCallPanelHidden: !global.groupCalls.isGroupCallPanelHidden,\n    },\n  };\n});\n\naddReducer('subscribeToGroupCallUpdates', (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  (async () => {\n    if (subscribed) {\n      await fetchGroupCall(groupCall);\n      await fetchGroupCallParticipants(groupCall);\n    }\n\n    await callApi('toggleGroupCallStartSubscription', {\n      subscribed,\n      call: groupCall,\n    });\n  })();\n});\n\naddReducer('createGroupCall', (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('createGroupCall', {\n      peer: chat,\n    });\n\n    if (!result) return;\n\n    global = getGlobal();\n    setGlobal(updateGroupCall(global, result.id, {\n      ...result,\n      chatId,\n    }));\n\n    actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n  })();\n});\n\naddReducer('createGroupCallInviteLink', (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const canInvite = Boolean(chat.username);\n\n  (async () => {\n    let { inviteLink } = chat.fullInfo!;\n    if (canInvite) {\n      inviteLink = await callApi('exportGroupCallInvite', {\n        call: groupCall,\n        canSelfUnmute: false,\n      });\n    }\n\n    if (!inviteLink) {\n      return;\n    }\n\n    copyTextToClipboard(inviteLink);\n    actions.showNotification({\n      message: 'Link copied to clipboard',\n    });\n  })();\n});\n\naddReducer('joinVoiceChatByLink', (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  (async () => {\n    const chat = await fetchChatByUsername(username);\n\n    if (!chat) {\n      actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n      return;\n    }\n\n    const full = await loadFullChat(chat);\n\n    if (full?.groupCall) {\n      actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n    }\n  })();\n});\n\naddReducer('joinGroupCall', (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  (async () => {\n    await initializeSoundsForSafari();\n    const { groupCalls: { activeGroupCallId } } = global;\n    let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n    if (groupCall?.id === activeGroupCallId) {\n      actions.toggleGroupCallPanel();\n      return;\n    }\n\n    if (activeGroupCallId) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n      });\n      return;\n    }\n\n    if (groupCall && activeGroupCallId === groupCall.id) {\n      actions.toggleGroupCallPanel();\n      return;\n    }\n\n    if (!groupCall && (!id || !accessHash)) {\n      groupCall = await fetchGroupCall({\n        id,\n        accessHash,\n      });\n    }\n\n    if (!groupCall) return;\n\n    global = getGlobal();\n\n    global = updateGroupCall(\n      global,\n      groupCall.id,\n      {\n        ...groupCall,\n        inviteHash,\n      },\n      undefined,\n      groupCall.participantsCount + 1,\n    );\n\n    setGlobal({\n      ...global,\n      groupCalls: {\n        ...global.groupCalls,\n        activeGroupCallId: groupCall.id,\n        isGroupCallPanelHidden: false,\n      },\n    });\n  })();\n});\n\naddReducer('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  if (initializationPromise) {\n    initializationPromise.then(() => {\n      safePlay(sounds[sound]);\n    });\n  } else {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    safePlay(sounds[sound]);\n  }\n});\n\naddReducer('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\naddReducer('openCallFallbackConfirm', (global) => {\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      isFallbackConfirmOpen: true,\n    },\n  };\n});\n\naddReducer('closeCallFallbackConfirm', (global) => {\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      isFallbackConfirmOpen: false,\n    },\n  };\n});\n","import { GroupCallParticipant } from '../../lib/secret-sauce';\nimport { GlobalState } from '../../global/types';\nimport { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter((l) => !l.isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","import { GlobalState } from '../../global/types';\nimport { selectChat } from './chats';\nimport { getUserFullName, isChatBasicGroup } from '../helpers';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall(global: GlobalState, chatId: string) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.fullInfo || !chat.fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, chat.fullInfo.groupCallId);\n}\n\nexport function selectGroupCall(global: GlobalState, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant(global: GlobalState, groupCallId: string, participantId: string) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall(global: GlobalState): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || Boolean(chat.adminRights?.manageCall);\n}\n\nexport function selectActiveGroupCall(global: GlobalState) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectCallFallbackChannelTitle(global: GlobalState) {\n  const currentUser = selectUser(global, global.currentUserId!);\n\n  return `Calls: ${getUserFullName(currentUser!)}`;\n}\n","import { getDispatch } from '../lib/teact/teactn';\nimport { IS_SAFARI } from './environment';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url';\n\nexport const processDeepLink = (url: string) => {\n  const {\n    protocol, searchParams, pathname, hostname,\n  } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openStickerSetShortName,\n    focusMessage,\n    joinVoiceChatByLink,\n  } = getDispatch();\n\n  // Safari thinks the path in tg://path links is hostname for some reason\n  const method = (IS_SAFARI ? hostname : pathname).replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const {\n        domain, post, comment, voicechat, livestream, start,\n      } = params;\n\n      if (domain !== 'telegrampassport') {\n        if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n          joinVoiceChatByLink({\n            username: domain,\n            inviteHash: voicechat || livestream,\n          });\n        } else {\n          openChatByUsername({\n            username: domain,\n            messageId: Number(post),\n            commentId: Number(comment),\n            startParam: start,\n          });\n        }\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: `-${channel}`,\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n"],"names":["memo","withGlobal","global","userId","chat","selectCurrentChat","user","selectUser","contactName","getUserFirstOrLastName","undefined","isOpen","onClose","deleteChatMember","getDispatch","lang","useLang","handleDeleteChatMember","useCallback","chatId","id","onEnter","className","title","renderText","color","isText","onClick","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","getGlobal","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chats","orderedPinnedIds","serverTimeOffset","lastLocalServiceMessage","selectLastServiceNotification","message","chatIds","length","shift","addUsers","buildCollectionByKey","users","addUserStatuses","userStatusesById","updateChats","updateChatListIds","updateChatListSecondaryInfo","Object","keys","draftsById","forEach","replaceThreadParam","MAIN_THREAD_ID","replyingToById","isFullyLoaded","setGlobal","loadFullChat","fullInfo","groupCall","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","addReducer","actions","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatId","selectCurrentMessageList","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","payload","currentUserId","selectChat","hasUnreadMark","toggleChatUnread","lastMessage","threadInfo","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","type","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","langCode","usernamePostfix","LOCALIZED_TIPS","toUpperCase","openChatByUsername","TIPS_USERNAME","listIds","oldestChat","map","byId","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","date","currentGlobal","force","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isMuted","about","photo","memberIds","chatCreation","progress","ChatCreationProgress","createdChannel","channelId","accessHash","createChannel","leaveChat","createdChat","e","error","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","includedId","concat","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","hash","url","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","part1","part2","part3","pathname","split","l","decodeURI","params","fromEntries","searchParams","substr","openChatByInvite","openStickerSetShortName","stickerSetShortName","chatOrChannelPostId","Number","commentId","comment","hasOwnProperty","joinVoiceChatByLink","inviteHash","voicechat","livestream","showNotification","startParam","start","channelPostId","openPreviousChat","startBot","botId","param","usernameChat","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","bannedRights","newGlobal","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","isProtected","enabledReactions","audioElement","audioContext","joinAudio","Audio","connectingAudio","loop","leaveAudio","sounds","join","allowTalk","leave","connecting","initializationPromise","resolve","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","groupCalls","isGroupCallPanelHidden","subscribed","peer","joinGroupCall","selectActiveGroupCall","canInvite","inviteLink","canSelfUnmute","copyTextToClipboard","langProvider","full","ARE_CALLS_SUPPORTED","ctx","window","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","connect","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","silence","safePlay","createAudioElement","values","muted","volume","play","then","currentTime","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","toggleGroupCallPanel","sound","isFallbackConfirmOpen","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","acc","el","removeGroupCall","toString","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","selectGroupCallParticipant","participantId","selectIsAdminInActiveGroupCall","isCreator","manageCall","selectCallFallbackChannelTitle","currentUser","getUserFullName","protocol","hostname","method","IS_SAFARI","replace","value","key","domain","post","invite","set"],"sourceRoot":""}