{"version":3,"file":"9970.3bee91fb23bf1762eee4.js","mappings":"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","sources":["webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts","webpack://telegram-t/./src/global/selectors/calls.ts","webpack://telegram-t/./src/util/deeplink.ts"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { selectCurrentChat, selectUser } from '../../global/selectors';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\nconst DeleteMemberModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n}) => {\n  const { deleteChatMember } = getActions();\n\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n)(DeleteMemberModal));\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiChatFolder, ApiError,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport type { GlobalActions } from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  ALL_FOLDER_ID,\n  DEBUG,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats, addUsers, addUserStatuses, replaceThreadParam,\n  updateChatListIds, updateChats, updateChat, updateChatListSecondaryInfo,\n  updateManagementProgress, leaveChat, replaceUsers, replaceUserStatuses,\n  replaceChats, replaceChatListIds, addChatMembers,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername, selectThreadTopMessageId,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, isChatBasicGroup, isUserBot, isChatChannel, isChatSuperGroup,\n} from '../../helpers';\nimport { processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  username: '',\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions) => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => id !== currentChatId && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const { id, threadId = MAIN_THREAD_ID } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat?.lastMessage?.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  actions.focusMessage({ chatId, threadId, messageId });\n});\n\naddActionHandler('openSupportChat', async (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload) => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  while (shouldReplace || !getGlobal().chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n      : undefined;\n\n    await loadChats(listType, oldestChat?.id, oldestChat?.lastMessage!.date, shouldReplace);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddActionHandler('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddActionHandler('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddActionHandler('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  void joinChannel(channelId, accessHash);\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddActionHandler('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddActionHandler('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = (idsToAdd as number[])\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats' });\n    return;\n  }\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  void createChatFolder(folder, maxId);\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload) => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    });\n  }\n});\n\naddActionHandler('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload) => {\n  const { phoneNumber, startAttach, attach } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByPhoneNumber(phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({\n      message: langProvider.getTranslation('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id });\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n\n  const tgLinkMatch = url.match(RE_TG_LINK);\n  if (tgLinkMatch) {\n    processDeepLink(tgLinkMatch[0]);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  const [part1, part2, part3] = uri.pathname.split('/').filter(Boolean).map((l) => decodeURI(l));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    actions.openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    actions.openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers') {\n    actions.openStickerSetShortName({\n      stickerSetShortName: part2,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    actions.joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist' });\n      return;\n    }\n\n    actions.focusMessage({\n      chatId,\n      messageId,\n    });\n  } else if (part1 === 'invoice') {\n    actions.openInvoice({\n      slug: part2,\n    });\n  } else {\n    actions.openChatByUsername({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload) => {\n  const { hash } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload) => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach,\n  } = payload!;\n\n  const chat = selectCurrentChat(global);\n\n  if (!commentId) {\n    if (chat && chat.username === username && !startAttach && !startParam) {\n      actions.focusMessage({ chatId: chat.id, messageId });\n      return;\n    }\n    await openChatByUsername(actions, username, messageId, startParam, startAttach, attach);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  void openCommentsByUsername(actions, username, messageId, commentId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n\n  let chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembers } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n\n  global = getGlobal();\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(adminMembers && isDismissed && {\n        adminMembers: adminMembers.filter((m) => m.userId !== userId),\n      }),\n      ...(adminMembers && !isDismissed && {\n        adminMembers: adminMembers.map((m) => (\n          m.userId === userId\n            ? { ...m, adminRights, customTitle }\n            : m\n        )),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChat', async (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global) => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  setGlobal({\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  });\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    loadFullChat(chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload) => {\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = payload + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddActionHandler('resetOpenChatWithText', (global) => {\n  return {\n    ...global,\n    openChatWithText: undefined,\n  };\n});\n\naddActionHandler('loadMoreMembers', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n  loadFullChat(chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  loadFullChat(chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload) => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload) => {\n  const { chatId, enabledReactions } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  void loadFullChat(chat);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const settings = await callApi('fetchChatSettings', chat);\n  if (!settings) return;\n\n  setGlobal(updateChat(getGlobal(), chat.id, { settings }));\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived', offsetId?: string, offsetDate?: number, shouldReplace = false,\n) {\n  let global = getGlobal();\n  const lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const currentChat = selectCurrentChat(global);\n    const visibleChats = currentChat ? [currentChat] : [];\n\n    const visibleUsers = selectVisibleUsers(global) || [];\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    getActions().loadStickers({\n      stickerSetId: stickerSet.id,\n      stickerSetAccessHash: stickerSet.accessHash,\n      stickerSetShortName: stickerSet.shortName,\n    });\n  }\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    });\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getActions().openChat({ id: channelId, shouldReplaceHistory: true });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function joinChannel(channelId: string, accessHash: string) {\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getActions()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nexport async function migrateChat(chat: ApiChat): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n\n    return undefined;\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber(phoneNumber: string) {\n  const global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const chat = await callApi('getChatByPhoneNumber', phoneNumber);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n) {\n  let global = getGlobal();\n  const currentChat = selectCurrentChat(global);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const chat = await fetchChatByUsername(username);\n    if (!chat) return;\n\n    global = getGlobal();\n\n    const user = selectUser(global, chat.id);\n    if (!user) return;\n\n    const isBot = isUserBot(user);\n    if (!isBot || !user.isAttachMenuBot) {\n      actions.showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n\n      return;\n    }\n\n    if (!currentChat) return;\n\n    actions.callAttachMenuBot({\n      botId: user.id,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.username === username;\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID });\n  }\n\n  const chat = await fetchChatByUsername(username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat();\n      actions.showNotification({ message: 'User does not exist' });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n}\n\nasync function openAttachMenuFromLink(\n  actions: GlobalActions,\n  chatId: string, attach: string, startAttach?: string | boolean,\n) {\n  const botChat = await fetchChatByUsername(attach);\n  if (!botChat) return;\n  const botUser = selectUser(getGlobal(), botChat.id);\n  if (!botUser || !botUser.isAttachMenuBot) {\n    actions.showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n    return;\n  }\n\n  actions.callAttachMenuBot({\n    botId: botUser.id,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n  });\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport type { ApiGroupCall } from '../../../api/types';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { addChats, addUsers } from '../../reducers';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport type { CallSound } from '../../types';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nlet sounds: Record<CallSound, HTMLAudioElement>;\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nexport const initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n\n  initializationPromise = Promise.all(Object.values(sounds).map((l) => {\n    l.muted = true;\n    l.volume = 0.0001;\n    return l.play().then(() => {\n      l.pause();\n      l.volume = 1;\n      l.currentTime = 0;\n      l.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    isCallPanelVisible: !global.isCallPanelVisible,\n  };\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(groupCall);\n    await fetchGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal(updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  }));\n\n  actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const canInvite = Boolean(chat.username);\n\n  let { inviteLink } = chat.fullInfo!;\n  if (canInvite) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n    return;\n  }\n\n  const full = await loadFullChat(chat);\n\n  if (full?.groupCall) {\n    actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n  }\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  await initializeSoundsForSafari();\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (activeGroupCallId) {\n    actions.leaveGroupCall({\n      rejoin: payload,\n    });\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall({\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n    isCallPanelVisible: false,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  if (initializationPromise) {\n    initializationPromise.then(doPlay);\n  } else {\n    doPlay();\n  }\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestCall', async (global, actions, payload) => {\n  const { userId, isVideo } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  await initializeSoundsForSafari();\n\n  setGlobal({\n    ...getGlobal(),\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n    isCallPanelVisible: false,\n  });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter((l) => !l.isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","import type { GlobalState } from '../types';\nimport { selectChat } from './chats';\nimport { isChatBasicGroup } from '../helpers';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall(global: GlobalState, chatId: string) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.fullInfo || !chat.fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, chat.fullInfo.groupCallId);\n}\n\nexport function selectGroupCall(global: GlobalState, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant(global: GlobalState, groupCallId: string, participantId: string) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall(global: GlobalState): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || Boolean(chat.adminRights?.manageCall);\n}\n\nexport function selectActiveGroupCall(global: GlobalState) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectPhoneCallUser(global: GlobalState) {\n  const { phoneCall, currentUserId } = global;\n  if (!phoneCall || !phoneCall.participantId || !phoneCall.adminId) {\n    return undefined;\n  }\n\n  const id = phoneCall.adminId === currentUserId ? phoneCall.participantId : phoneCall.adminId;\n  return selectUser(global, id);\n}\n","import { getActions } from '../global';\nimport { IS_SAFARI } from './environment';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url' | 'invoice';\n\nexport const processDeepLink = (url: string) => {\n  const {\n    protocol, searchParams, pathname, hostname,\n  } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openChatByPhoneNumber,\n    openStickerSetShortName,\n    focusMessage,\n    joinVoiceChatByLink,\n    openInvoice,\n  } = getActions();\n\n  // Safari thinks the path in tg://path links is hostname for some reason\n  const method = (IS_SAFARI ? hostname : pathname).replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const {\n        domain, phone, post, comment, voicechat, livestream, start, startattach, attach,\n      } = params;\n\n      const startAttach = params.hasOwnProperty('startattach') && !startattach ? true : startattach;\n\n      if (domain !== 'telegrampassport') {\n        if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n          joinVoiceChatByLink({\n            username: domain,\n            inviteHash: voicechat || livestream,\n          });\n        } else if (phone) {\n          openChatByPhoneNumber({ phone, startAttach, attach });\n        } else {\n          openChatByUsername({\n            username: domain,\n            messageId: Number(post),\n            commentId: Number(comment),\n            startParam: start,\n            startAttach,\n            attach,\n          });\n        }\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: `-${channel}`,\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n\n    case 'invoice': {\n      const { slug } = params;\n      openInvoice({ slug });\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n"],"names":["memo","withGlobal","global","userId","chat","selectCurrentChat","user","selectUser","contactName","getUserFirstOrLastName","undefined","isOpen","onClose","deleteChatMember","getActions","lang","useLang","handleDeleteChatMember","useCallback","chatId","id","onEnter","className","title","renderText","color","isText","onClick","SERVICE_NOTIFICATIONS_USER_MOCK","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","username","phoneNumber","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","serverTimeOffset","chatIds","length","shift","includes","result2","notificationsChat","selectChat","unshift","chats","lastMessage","currentChat","visibleChats","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","updateChatListIds","updateChatListSecondaryInfo","Object","keys","draftsById","forEach","replaceThreadParam","MAIN_THREAD_ID","replyingToById","isFullyLoaded","setGlobal","loadFullChat","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","stickerSet","loadStickers","stickerSetId","stickerSetAccessHash","stickerSetShortName","shortName","migrateChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","localChat","selectChatByUsername","openAttachMenuFromLink","actions","attach","startAttach","botChat","botUser","isAttachMenuBot","callAttachMenuBot","botId","startParam","showNotification","langProvider","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatId","selectCurrentMessageList","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","payload","hasUnreadMark","toggleChatUnread","threadInfo","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","DEBUG","console","connectionState","authState","listIds","oldestChat","map","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","date","force","lastLocalMessage","isMuted","about","photo","memberIds","createdChannel","chatCreation","progress","ChatCreationProgress","channelId","createChannel","joinChannel","leaveChat","createdChat","e","createGroupChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","folderIds","deleteChatFolder","unreadCount","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","openPreviousChat","replace","url","tgLinkMatch","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","part1","part2","part3","pathname","split","l","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","openChatByPhoneNumber","substr","openChatByInvite","openStickerSetShortName","chatOrChannelPostId","Number","commentId","comment","joinVoiceChatByLink","inviteHash","voicechat","livestream","openInvoice","slug","openChatByUsername","start","channelPostId","isUserBot","isCurrentChat","startBot","param","usernameChat","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","activeChatFolder","openChatWithText","offset","addChatMembers","setNewChatMembersDialogState","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","audioElement","audioContext","sounds","initializationPromise","resolve","initializeSoundsForSafari","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","values","muted","volume","play","then","currentTime","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","isCallPanelVisible","subscribed","peer","joinGroupCall","selectActiveGroupCall","canInvite","inviteLink","canSelfUnmute","copyTextToClipboard","full","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","window","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","sound","doPlay","isVideo","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","acc","el","removeGroupCall","toString","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","selectGroupCallParticipant","selectIsAdminInActiveGroupCall","isCreator","manageCall","selectPhoneCallUser","protocol","hostname","method","IS_SAFARI","value","key","domain","phone","post","invite","set"],"sourceRoot":""}