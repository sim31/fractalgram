{"version":3,"file":"299.353b87924063d394a2a2.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/util/deeplink.ts","webpack://telegram-t/./src/modules/actions/api/chats.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/hooks/useThrottle.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack://telegram-t/./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/ui/CheckboxGroup.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/hooks/useDebounce.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport { ANIMATION_END_DELAY, FAST_SMOOTH_MAX_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { getDispatch } from '../lib/teact/teactn';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url';\n\nexport const processDeepLink = (url: string) => {\n  const { protocol, searchParams, pathname } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openStickerSetShortName,\n    focusMessage,\n  } = getDispatch();\n\n  const method = pathname.replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const { domain, post, comment } = params;\n\n      if (domain !== 'telegrampassport') {\n        openChatByUsername({\n          username: domain,\n          messageId: Number(post),\n          commentId: Number(comment),\n        });\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: -Number(channel),\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n  LOCALIZED_TIPS, RE_TG_LINK, RE_TME_ADDSTICKERS_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\nimport { processDeepLink } from '../../../util/deeplink';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst CHATS_PRELOAD_INTERVAL = 300;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), CHATS_PRELOAD_INTERVAL, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat && chat.lastMessage && chat.lastMessage.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openLinkedChat', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const chatFullInfo = await callApi('fetchFullChat', chat);\n\n    if (chatFullInfo?.fullInfo?.linkedChatId) {\n      actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n    }\n  })();\n});\n\naddReducer('focusMessageInComments', (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n    if (!result) {\n      return;\n    }\n\n    actions.focusMessage({ chatId, threadId, messageId });\n  })();\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions, payload) => {\n  const { langCode } = payload;\n\n  const usernamePostfix = langCode === 'pt-br'\n    ? 'BR'\n    : LOCALIZED_TIPS.includes(langCode) ? (langCode as string).toUpperCase() : '';\n\n  actions.openChatByUsername({ username: `${TIPS_USERNAME}${usernamePostfix}` });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('preloadArchivedChats', () => {\n  (async () => {\n    while (!getGlobal().chats.isFullyLoaded.archived) {\n      const currentGlobal = getGlobal();\n      const listIds = currentGlobal.chats.listIds.archived;\n      const oldestChat = listIds\n        ? listIds\n          .map((id) => currentGlobal.chats.byId[id])\n          .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(currentGlobal, chat.id))\n          .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n        : undefined;\n\n      await loadChats('archived', oldestChat?.id, oldestChat?.lastMessage!.date);\n      await pause(CHATS_PRELOAD_INTERVAL);\n    }\n  })();\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  (async () => {\n    const { chatId, userId }: { chatId: number; userId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, userId);\n    if (!chat || !user) {\n      return;\n    }\n    await callApi('deleteChatUser', { chat, user });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId && global.currentUserId === userId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  (async () => {\n    const { chatId }: { chatId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n    await callApi('deleteChat', { chatId: chat.id });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds?.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openChatByInvite', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('openChatByInvite', hash);\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.chatId });\n  })();\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  const stickersMatch = RE_TME_ADDSTICKERS_LINK.exec(url);\n  if (stickersMatch) {\n    actions.openStickerSetShortName({\n      stickerSetShortName: stickersMatch[1],\n    });\n  } else if (url.match(RE_TG_LINK)) {\n    processDeepLink(url.match(RE_TG_LINK)[0]);\n  } else {\n    let match = RE_TME_INVITE_LINK.exec(url);\n\n    if (match) {\n      const hash = match[1];\n\n      actions.openChatByInvite({ hash });\n    } else {\n      match = RE_TME_LINK.exec(url)!;\n\n      const username = match[1];\n      const chatOrChannelPostId = match[2] ? Number(match[2]) : undefined;\n      const messageId = match[3] ? Number(match[3]) : undefined;\n      const commentId = match[4] === 'comment' && match[5] ? Number(match[5]) : undefined;\n\n      // Open message in private group\n      if (username === 'c' && chatOrChannelPostId && messageId) {\n        actions.focusMessage({\n          chatId: -chatOrChannelPostId,\n          messageId,\n        });\n      } else {\n        actions.openChatByUsername({\n          username,\n          messageId,\n          commentId,\n        });\n      }\n    }\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username, messageId, commentId } = payload!;\n\n  (async () => {\n    if (!commentId) {\n      await openChatByUsername(actions, username, messageId);\n      return;\n    }\n\n    if (!messageId) return;\n\n    await openCommentsByUsername(actions, username, messageId, commentId);\n  })();\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo?.members?.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as number[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({ message: 'User does not exist' });\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: number | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/environment';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return undefined;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi('fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage, selectThreadInfo,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo?.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_ADDSTICKERS_LINK, RE_TME_INVITE_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)\n        || button.value.match(RE_TME_ADDSTICKERS_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId));\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start');\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { hash, lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots', { hash });\n    if (!result) {\n      return;\n    }\n\n    const { hash: newHash, ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        hash: newHash,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: number;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string, replyingTo?: number) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n  selectNotifySettings,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n      const { hasWebNotifications } = selectNotifySettings(global);\n      if (hasWebNotifications) {\n        showNewMessageNotification({\n          chat,\n          message,\n          isActiveChat,\n        });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, dependencies.concat([isFrozen]));\n\n  return value;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number, noFirst = false) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms, !noFirst);\n  }, [ms, noFirst]);\n};\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n                onContentChange={setContent}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                isActive={isActive}\n                currentScreen={settingsScreen}\n                foldersState={foldersState}\n                foldersDispatch={foldersDispatch}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                foldersDispatch={foldersDispatch}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch' | 'restartBot'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n  restartBot,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleRestartBot}\n        >\n          {lang('BotRestart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat?.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch', 'restartBot',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n) {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, 0.5, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, 0.5, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nexport default (message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = getCoverSize(audio, voice, media);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, origin = AudioOrigin.Inline, className, noUi, sender, focusMessage, closeAudioPlayer, chat,\n}) => {\n  const lang = useLang();\n  const { audio, voice } = getMessageContent(message);\n  const isVoice = Boolean(voice);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n  const { playPause, stop, isPlaying } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    origin,\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n\n    return {\n      sender,\n      chat,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiUser,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUpdateConnectionStateType,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectCountNotMutedUnread,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useBrowserOnline from '../../hooks/useBrowserOnline';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'openPreviousChat' | 'loadPinnedMessages' |\n  'toggleLeftColumn' | 'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  openPreviousChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = (!isBrowserOnline || connectionState === 'connectionStateConnecting')\n    && (IS_SINGLE_COLUMN_LAYOUT || (IS_TABLET_COLUMN_LAYOUT && !shouldShowCloseButton));\n\n  function renderInfo() {\n    if (isConnecting) {\n      return (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('WaitingForNetwork')}\n          </h3>\n        </>\n      );\n    }\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={isConnecting ? Infinity : currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={renderingPinnedMessagesCount || 0}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'openPreviousChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: number[];\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = Promise.resolve('rgba(255,255,255,1)');\n\nexport default function getCustomAppendixBg(src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && !isBuffered,\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n  usePauseOnInactive(videoRef, isPlayAllowed);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {!previewBlobUrl && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n        />\n      )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n      {isInline && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {(isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner) && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-upload-progress\">\n          {isUploading ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo, phoneCodeList,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  inPreview,\n  lastSyncTime,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {(shouldRenderThumb || mediaData) && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled,\n  threadInfo,\n  usersById,\n  chatsById,\n  openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleMessageSelection' | 'clickInlineButton' | 'disableContextMenuHint'>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  toggleMessageSelection,\n  clickInlineButton,\n  disableContextMenuHint,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { id: messageId, chatId, threadInfo } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !isRepliesChat && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    if (isLocal) {\n      return;\n    }\n\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [isLocal, toggleMessageSelection, messageId, isAlbum, album]);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    isSwiped,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isLocal,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    onContextMenu,\n    handleBeforeContextMenu,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    Boolean(isScheduled),\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n    const textContentClass = buildClassName(\n      'text-content',\n      shouldInlineMeta && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMetaClick}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isLocal && !isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {!isLocal && isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMetaClick}\n            />\n          )}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isFocused,\n      isForwarding,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleMessageSelection',\n    'clickInlineButton',\n    'disableContextMenuHint',\n  ]),\n)(Message));\n","import { RefObject } from 'react';\nimport React, { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isLocal: boolean,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n) {\n  const { setReplyingToId } = getDispatch();\n\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n\n    if (!isLocal) {\n      handleBeforeContextMenu(e);\n    }\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode && !isLocal) {\n      selectMessage(e);\n    } else if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply]);\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode && !isLocal ? handleContextMenu : undefined,\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    isSwiped,\n  };\n}\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport { AudioOrigin, IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: number,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, showNotification, lang, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId, origin: AudioOrigin.Inline });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isActive: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  openHistoryCalendar: Function;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isActive,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  openHistoryCalendar,\n}) => {\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isActive,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SENSITIVE_AREA } from '../../../config';\nimport resetScroll from '../../../util/resetScroll';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isActive: boolean,\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isActive) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGreetingStickers' | 'sendMessage' | 'markMessageListRead'>;\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps & DispatchProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  loadGreetingStickers,\n  sendMessage,\n  markMessageListRead,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const sticker = stickers?.length ? stickers[userId % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGreetingStickers', 'sendMessage', 'markMessageListRead',\n  ]),\n\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: number;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isChatPrivate,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  isActive: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadViewportMessages' | 'setScrollOffset' | 'openHistoryCalendar'>;\n\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isActive,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  loadViewportMessages,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds && messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isChatPrivate(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isActive={isActive}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          openHistoryCalendar={openHistoryCalendar}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items)\n        .find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type) && item.kind === 'file');\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: number,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots?.[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  isPollModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  botKeyboardPlaceholder?: string;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n  topInlineBotIds?: number[];\n  isInlineBotLoading: boolean;\n  inlineBots?: Record<string, false | InlineBotSettings>;\n  botCommands?: ApiBotCommand[] | false;\n  chatBotCommands?: ApiBotCommand[];\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' |\n  'addRecentEmoji' | 'sendInlineBotResult'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  openChat,\n  addRecentEmoji,\n  sendInlineBotResult,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          void handleSend();\n        }\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            shouldSetFocus={!attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'sendInlineBotResult',\n  ]),\n)(Composer));\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: cleanHtml });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType, MessageList as GlobalMessageList } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { createMessageHash } from '../../util/routing';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode' |\n  'closePaymentModal' | 'clearReceipt'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n  closePaymentModal,\n  clearReceipt,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, true);\n  };\n\n  useHistoryBack(renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists ? messageLists.map(createMessageHash) : []);\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n            >\n              {(isActive) => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    isActive={isActive}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={isMessagingDisabled || isSelectModeActive || isPinnedMessageList}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n    'closePaymentModal', 'clearReceipt',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteChatMember'>;\n\nconst DeleteMemberModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['deleteChatMember']),\n)(DeleteMemberModal));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID, ApiChat,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: number;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos' | 'setNewChatMembersDialogState'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  members,\n  usersById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  setNewChatMembersDialogState,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<number | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId, origin: AudioOrigin.SharedMedia });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(id: number) {\n    return id === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(id);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      usersById,\n      chatsById,\n      ...(hasMembersTab && members && { members }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n    'setNewChatMembersDialogState',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { pick, unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport searchWords from '../../util/searchWords';\nimport {\n  getUserFullName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  isActive: boolean;\n  onNextStep: (memberIds: number[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery'>;\n\nconst AddChatMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  setUserSearchQuery,\n  onClose,\n  isActive,\n  loadContactList,\n}) => {\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<number[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds.filter((id) => !memberIds.includes(id));\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return !memberIds.includes(contactId)\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup));\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds,\n    currentUserId, usersById, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setUserSearchQuery']),\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' | 'setNewChatMembersDialogState' |\n  'closeLocalTextSearch' | 'closePollResults' | 'addChatMembers' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  addChatMembers,\n  setNewChatMembersDialogState,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, true);\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: number[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n    'addChatMembers',\n    'setNewChatMembersDialogState',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin, LangCode } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { processDeepLink } from '../../util/deeplink';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  audioOrigin?: AudioOrigin;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  language?: LangCode;\n  openedStickerSetShortName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline' |\n  'loadTopInlineBots' | 'loadEmojiKeywords' | 'openStickerSetShortName' | 'loadCountryList'\n)>;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  audioOrigin,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  language,\n  openedStickerSetShortName,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n  loadTopInlineBots,\n  loadEmojiKeywords,\n  loadCountryList,\n  openStickerSetShortName,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline,\n    loadTopInlineBots, loadEmojiKeywords, loadCountryList, language,\n  ]);\n\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} origin={audioOrigin} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId, origin } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      audioOrigin: origin,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      language: global.settings.byKey.language,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n    'loadTopInlineBots', 'loadEmojiKeywords', 'openStickerSetShortName', 'loadCountryList',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","content","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","management","byChatId","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","processDeepLink","protocol","searchParams","pathname","URL","openChatByInvite","openChatByUsername","openStickerSetShortName","getDispatch","method","replace","params","forEach","value","key","domain","post","comment","username","commentId","channel","invite","set","stickerSetShortName","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","serverTimeOffset","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","fetchChatByUsername","localChat","selectChatByUsername","isMin","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","chatFullInfo","linkedChatId","selectSupportChat","langCode","usernamePostfix","LOCALIZED_TIPS","toUpperCase","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","currentGlobal","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","createdChannel","channelId","accessHash","createChannel","userId","activeChat","activeChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","stickersMatch","RE_TME_ADDSTICKERS_LINK","match","RE_TG_LINK","RE_TME_INVITE_LINK","RE_TME_LINK","chatOrChannelPostId","discussionChatId","openCommentsByUsername","channelPostId","openPreviousChat","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","fullChat","isPreHistoryHidden","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","uploadProgressCallbacks","Map","runDebouncedForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","progressCallback","attachment","messageLocalId","has","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","clearWebPagePreview","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","reason","peer","minId","selectFirstUnreadId","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","threadsById","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","topPeers","lastRequestedAt","getServerTime","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","runDebouncedForSearch","sendBotCommand","command","button","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","newHash","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","updateAppBadge","selectCountNotMutedUnread","closeMessageNotifications","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","hasWebNotifications","selectNotifySettings","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","unique","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","settings","privacy","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","useBrowserOnline","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","ANIMATION_LEVEL_OPTIONS","memo","withGlobal","searchQuery","chatsById","animationLevel","byKey","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","className","onClick","ariaLabel","buildClassName","handleSearchFocus","useCallback","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","Switcher","label","checked","noAnimation","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onChange","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","usersById","orderedFolderIds","shouldSkipHistoryAnimations","notifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","noFirst","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","current","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","min","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","name","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","setSize","windowSize","handleResize","MAX_MESSAGES_LIST_WIDTH","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canLeave","joinChannel","openLocalTextSearch","restartBot","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","focus","searchInput","disabled","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","onload","scale","blob","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","floor","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","AudioOrigin","noUi","isVoice","senderName","mediaData","mediaLoader","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","useAudioPlayer","makeTrackId","getMediaDuration","handleClick","handleClose","clearMediaSession","renderAudio","subtitle","renderVoice","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","windowWidth","useWindowSize","isLeftColumnHideable","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","add","remove","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","Infinity","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","onMouseDown","preventMessageInputBlur","onContextMenu","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_BACKGROUND","shouldAutoLoad","isInSelectMode","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","isPlayAllowed","wasPlaying","freezePlaying","paused","unfreezePlaying","contains","unfreezePlayingOnRaf","fastRaf","hasFocus","useBackgroundMode","shouldAutoPlay","videoRef","getMessageWebPageVideo","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTarget","currentTime","duration","usePauseOnInactive","useVideoCleanup","videoClassName","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","stopCurrentAudio","ROUND_VIDEO_DIMENSIONS","onEnded","recentReplierIds","recentRepliers","hasUnread","GROUP_MESSAGE_HOVER_ATTRIBUTE","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","canReply","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","clickInlineButton","bottomMarkerRef","appendixRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","selectMessage","handleMouseDown","handleDoubleClick","handleContentDoubleClick","isSwiped","markSwiped","unmarkSwiped","startedAt","target","matches","useOuterHandlers","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","calculatedWidth","noMediaCorners","extraPadding","onDoubleClick","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","messageGroups","isViewportNewest","isUnread","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","observe","useIntersectionObserver","rootRef","throttleMs","margin","freezeForReading","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","resetScroll","observeIntersectionForFab","freezeForFab","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","lastUnreadMessageId","loadGreetingStickers","debounceMs","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","isCreator","isBot","threadFirstMessageId","selectFirstMessageId","hasTools","canPost","setScrollOffset","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","shouldRunLast","container","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","parseMessageInput","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","shouldSuggestStickers","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevChatId","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","kind","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredUsers","onSelectResult","withUsername","canAttachEmbedLinks","MessageInput","forcedPlaceholder","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","CLOSE_ANIMATION_DURATION","isImage","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioMessage","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","leftColumnWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","createMessageHash","isMessagingDisabled","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","handleLoadMore","messageIdsRef","getMessageContentIds","reverse","getMore","useInfiniteScroll","runThrottledForScroll","isScrollingProgrammatically","contactName","getUserFirstOrLastName","deleteChatMember","handleDeleteChatMember","Modal","onEnter","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","MEMBERS_SLICE","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","determineProfileState","tabListEl","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","getMemberContextAction","handler","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","FloatingActionButton","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","sortChatIds","foundContactIds","fullName","getUserFullName","contactId","isUserBot","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","memberId","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","audioOrigin","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","LOCATION_HASH","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","stopEvent","IS_PWA","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}