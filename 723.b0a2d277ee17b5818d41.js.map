{"version":3,"file":"723.b0a2d277ee17b5818d41.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/util/deeplink.ts","webpack://telegram-t/./src/modules/actions/api/chats.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventIosPinchZoom.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/hooks/useThrottle.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack://telegram-t/./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/ui/CheckboxGroup.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/hooks/useDebounce.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport { ANIMATION_END_DELAY, FAST_SMOOTH_MAX_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { getDispatch } from '../lib/teact/teactn';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url';\n\nexport const processDeepLink = (url: string) => {\n  const { protocol, searchParams, pathname } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openStickerSetShortName,\n    focusMessage,\n  } = getDispatch();\n\n  const method = pathname.replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const { domain, post, comment } = params;\n\n      if (domain !== 'telegrampassport') {\n        openChatByUsername({\n          username: domain,\n          messageId: Number(post),\n          commentId: Number(comment),\n        });\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: -Number(channel),\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n  LOCALIZED_TIPS, RE_TG_LINK, RE_TME_ADDSTICKERS_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\nimport { processDeepLink } from '../../../util/deeplink';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 100;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat && chat.lastMessage && chat.lastMessage.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions, payload) => {\n  const { langCode } = payload;\n\n  const usernamePostfix = langCode === 'pt-br'\n    ? 'BR'\n    : LOCALIZED_TIPS.includes(langCode) ? (langCode as string).toUpperCase() : '';\n\n  actions.openChatByUsername({ username: `${TIPS_USERNAME}${usernamePostfix}` });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  (async () => {\n    const { chatId, userId } : { chatId: number; userId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, userId);\n    if (!chat || !user) {\n      return;\n    }\n    await callApi('deleteChatUser', { chat, user });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId && global.currentUserId === userId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  (async () => {\n    const { chatId } : { chatId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n    await callApi('deleteChat', { chatId: chat.id });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds?.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openChatByInvite', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('openChatByInvite', hash);\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.chatId });\n  })();\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  const stickersMatch = RE_TME_ADDSTICKERS_LINK.exec(url);\n  if (stickersMatch) {\n    actions.openStickerSetShortName({\n      stickerSetShortName: stickersMatch[1],\n    });\n  } else if (url.match(RE_TG_LINK)) {\n    processDeepLink(url.match(RE_TG_LINK)[0]);\n  } else {\n    let match = RE_TME_INVITE_LINK.exec(url);\n\n    if (match) {\n      const hash = match[1];\n\n      actions.openChatByInvite({ hash });\n    } else {\n      match = RE_TME_LINK.exec(url)!;\n\n      const username = match[1];\n      const chatOrChannelPostId = match[2] ? Number(match[2]) : undefined;\n      const messageId = match[3] ? Number(match[3]) : undefined;\n      const commentId = match[4] === 'comment' && match[5] ? Number(match[5]) : undefined;\n\n      // Open message in private group\n      if (username === 'c' && chatOrChannelPostId && messageId) {\n        actions.focusMessage({\n          chatId: -chatOrChannelPostId,\n          messageId,\n        });\n      } else {\n        actions.openChatByUsername({\n          username,\n          messageId,\n          commentId,\n        });\n      }\n    }\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username, messageId, commentId } = payload!;\n\n  (async () => {\n    if (!commentId) {\n      await openChatByUsername(actions, username, messageId);\n      return;\n    }\n\n    if (!messageId) return;\n\n    await openCommentsByUsername(actions, username, messageId, commentId);\n  })();\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo?.members?.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as number[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({ message: 'User does not exist' });\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: number | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/environment';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return undefined;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi('fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage, selectThreadInfo,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo?.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_ADDSTICKERS_LINK, RE_TME_INVITE_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)\n        || button.value.match(RE_TME_ADDSTICKERS_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId));\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start');\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { hash, lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots', { hash });\n    if (!result) {\n      return;\n    }\n\n    const { hash: newHash, ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        hash: newHash,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: number;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string, replyingTo?: number) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n  selectNotifySettings,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n      const { hasWebNotifications } = selectNotifySettings(global);\n      if (hasWebNotifications) {\n        showNewMessageNotification({\n          chat,\n          message,\n          isActiveChat,\n        });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\nexport default function usePreventIosPinchZoom(isDisabled = false) {\n  // Disable viewport zooming on iOS Safari\n  useEffect(() => {\n    if (!IS_IOS || isDisabled) {\n      return undefined;\n    }\n\n    document.addEventListener('gesturestart', preventEvent);\n\n    return () => {\n      document.removeEventListener('gesturestart', preventEvent);\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, dependencies.concat([isFrozen]));\n\n  return value;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number, noFirst = false) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms, !noFirst);\n  }, [ms, noFirst]);\n};\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n                onContentChange={setContent}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                isActive={isActive}\n                currentScreen={settingsScreen}\n                foldersState={foldersState}\n                foldersDispatch={foldersDispatch}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                foldersDispatch={foldersDispatch}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch' | 'restartBot'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n  restartBot,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleRestartBot}\n        >\n          {lang('BotRestart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_SINGLE_COLUMN_LAYOUT || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat?.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_SINGLE_COLUMN_LAYOUT && canSubscribe)\n      || (IS_SINGLE_COLUMN_LAYOUT && canSearch)\n      || canMute\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch', 'restartBot',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n) {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    const bitmap = await window.createImageBitmap(img,\n      { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n    return new Promise((res) => {\n      const canvas = document.createElement('canvas');\n      canvas.width = bitmap.width;\n      canvas.height = bitmap.height;\n      const ctx = canvas.getContext('bitmaprenderer');\n      if (ctx) {\n        ctx.transferFromImageBitmap(bitmap);\n      } else {\n        canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n      }\n      canvas.toBlob(res, outputType);\n    });\n  } else {\n    return steppedScale(img, width, height, 0.5, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nexport default (message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = getCoverSize(audio, voice, media);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, origin = AudioOrigin.Inline, className, noUi, sender, focusMessage, closeAudioPlayer, chat,\n}) => {\n  const lang = useLang();\n  const { audio, voice } = getMessageContent(message);\n  const isVoice = Boolean(voice);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n  const { playPause, stop, isPlaying } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    origin,\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n\n    return {\n      sender,\n      chat,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiUser,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUpdateConnectionStateType,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectCountNotMutedUnread,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useBrowserOnline from '../../hooks/useBrowserOnline';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'openPreviousChat' | 'loadPinnedMessages' |\n  'toggleLeftColumn' | 'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  openPreviousChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    openPreviousChat();\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = (!isBrowserOnline || connectionState === 'connectionStateConnecting')\n    && (IS_SINGLE_COLUMN_LAYOUT || (IS_TABLET_COLUMN_LAYOUT && !shouldShowCloseButton));\n\n  function renderInfo() {\n    if (isConnecting) {\n      return (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('WaitingForNetwork')}\n          </h3>\n        </>\n      );\n    }\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={isConnecting ? Infinity : currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'openPreviousChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: number[];\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = Promise.resolve('rgba(255,255,255,1)');\n\nexport default function getCustomAppendixBg(src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && !isBuffered,\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n  usePauseOnInactive(videoRef, isPlayAllowed);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {!previewBlobUrl && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n        />\n      )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n      {isInline && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {(isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner) && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo, phoneCodeList,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  inPreview,\n  lastSyncTime,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {(shouldRenderThumb || mediaData) && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled,\n  threadInfo,\n  usersById,\n  chatsById,\n  openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleMessageSelection' | 'clickInlineButton' | 'disableContextMenuHint'>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  toggleMessageSelection,\n  clickInlineButton,\n  disableContextMenuHint,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { id: messageId, chatId, threadInfo } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId));\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    if (isLocal) {\n      return;\n    }\n\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [isLocal, toggleMessageSelection, messageId, isAlbum, album]);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    isSwiped,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isLocal,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    onContextMenu,\n    handleBeforeContextMenu,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    Boolean(isScheduled),\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n    const textContentClass = buildClassName(\n      'text-content',\n      shouldInlineMeta && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMetaClick}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isLocal && !isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {!isLocal && isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMetaClick}\n            />\n          )}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isFocused,\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleMessageSelection',\n    'clickInlineButton',\n    'disableContextMenuHint',\n  ]),\n)(Message));\n","import { RefObject } from 'react';\nimport React, { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isLocal: boolean,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n) {\n  const { setReplyingToId } = getDispatch();\n\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n\n    if (!isLocal) {\n      handleBeforeContextMenu(e);\n    }\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode && !isLocal) {\n      selectMessage(e);\n    } else if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply]);\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode && !isLocal ? handleContextMenu : undefined,\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    isSwiped,\n  };\n}\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport { AudioOrigin, IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: number,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, showNotification, lang, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId, threadId, messageId: replyToMessageId, replyMessageId: messageId,\n    });\n  }, [focusMessage, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId, origin: AudioOrigin.Inline });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [isInDocumentGroup, focusMessage, forwardInfo, groupedId, chatId]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isActive: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  openHistoryCalendar: Function;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isActive,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  openHistoryCalendar,\n}) => {\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isActive,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SENSITIVE_AREA } from '../../../config';\nimport resetScroll from '../../../util/resetScroll';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isActive: boolean,\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isActive) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGreetingStickers' | 'sendMessage' | 'markMessageListRead'>;\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps & DispatchProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  loadGreetingStickers,\n  sendMessage,\n  markMessageListRead,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const sticker = stickers?.length ? stickers[userId % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGreetingStickers', 'sendMessage', 'markMessageListRead',\n  ]),\n\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: number;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport { isChatChannel, isChatGroup, isChatPrivate } from '../../modules/helpers';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  isActive: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadViewportMessages' | 'setScrollOffset' | 'openHistoryCalendar'>;\n\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isActive,\n  isChatWithSelf,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  loadViewportMessages,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds && messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isChatPrivate(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isActive={isActive}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          openHistoryCalendar={openHistoryCalendar}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: number,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots?.[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  botKeyboardPlaceholder?: string;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n  topInlineBotIds?: number[];\n  isInlineBotLoading: boolean;\n  inlineBots?: Record<string, false | InlineBotSettings>;\n  botCommands?: ApiBotCommand[] | false;\n  chatBotCommands?: ApiBotCommand[];\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji' | 'sendInlineBotResult'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n  sendInlineBotResult,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          void handleSend();\n        }\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              faded\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              faded\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            shouldSetFocus={!attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'sendInlineBotResult',\n  ]),\n)(Composer));\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType, MessageList as GlobalMessageList } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { createMessageHash } from '../../util/routing';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, true);\n  };\n\n  useHistoryBack(renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists ? messageLists.map(createMessageHash) : []);\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n            >\n              {(isActive) => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    isActive={isActive}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={isMessagingDisabled || isSelectModeActive || isPinnedMessageList}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteChatMember'>;\n\nconst DeleteMemberModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['deleteChatMember']),\n)(DeleteMemberModal));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: number;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos' | 'setNewChatMembersDialogState'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  setNewChatMembersDialogState,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<number | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId, origin: AudioOrigin.SharedMedia });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(id: number) {\n    return id === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(id);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty_search');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty_search');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty_search');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n    'setNewChatMembersDialogState',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { pick, unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport searchWords from '../../util/searchWords';\nimport {\n  getUserFullName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  isActive: boolean;\n  onNextStep: (memberIds: number[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery'>;\n\nconst AddChatMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  setUserSearchQuery,\n  onClose,\n  isActive,\n  loadContactList,\n}) => {\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<number[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds.filter((id) => !memberIds.includes(id));\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return !memberIds.includes(contactId)\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup));\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds,\n    currentUserId, usersById, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setUserSearchQuery']),\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' | 'setNewChatMembersDialogState' |\n  'closeLocalTextSearch' | 'closePollResults' | 'addChatMembers' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  addChatMembers,\n  setNewChatMembersDialogState,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, true);\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: number[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n    'addChatMembers',\n    'setNewChatMembersDialogState',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\nimport { LangCode } from '../../types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventIosPinchZoom from '../../hooks/usePreventIosPinchZoom';\nimport { processDeepLink } from '../../util/deeplink';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  audioOrigin?: AudioOrigin;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  language?: LangCode;\n  openedStickerSetShortName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline' |\n  'loadTopInlineBots' | 'loadEmojiKeywords' | 'openStickerSetShortName' | 'loadCountryList'\n)>;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  audioOrigin,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  language,\n  openedStickerSetShortName,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n  loadTopInlineBots,\n  loadEmojiKeywords,\n  loadCountryList,\n  openStickerSetShortName,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline,\n    loadTopInlineBots, loadEmojiKeywords, loadCountryList, language,\n  ]);\n\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventIosPinchZoom(isMediaViewerOpen);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} origin={audioOrigin} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId, origin } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      audioOrigin: origin,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      language: global.settings.byKey.language,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n    'loadTopInlineBots', 'loadEmojiKeywords', 'openStickerSetShortName', 'loadCountryList',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","content","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","management","byChatId","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","processDeepLink","protocol","searchParams","pathname","URL","openChatByInvite","openChatByUsername","openStickerSetShortName","getDispatch","method","replace","params","forEach","value","key","domain","post","comment","username","commentId","channel","invite","set","stickerSetShortName","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","serverTimeOffset","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","fetchChatByUsername","localChat","selectChatByUsername","isMin","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","selectSupportChat","langCode","usernamePostfix","LOCALIZED_TIPS","toUpperCase","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","createdChannel","channelId","accessHash","createChannel","userId","activeChat","activeChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","stickersMatch","RE_TME_ADDSTICKERS_LINK","match","RE_TG_LINK","RE_TME_INVITE_LINK","RE_TME_LINK","chatOrChannelPostId","discussionChatId","openCommentsByUsername","channelPostId","openPreviousChat","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","fullChat","isPreHistoryHidden","linkedChatId","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","uploadProgressCallbacks","Map","runDebouncedForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","progressCallback","attachment","messageLocalId","has","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","clearWebPagePreview","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","reason","peer","minId","selectFirstUnreadId","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","threadsById","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","topPeers","lastRequestedAt","getServerTime","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","runDebouncedForSearch","sendBotCommand","command","button","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","newHash","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","updateAppBadge","selectCountNotMutedUnread","closeMessageNotifications","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","hasWebNotifications","selectNotifySettings","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","unique","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","settings","privacy","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","useBeforeUnload","callback","useEffect","onBeforeUnload","preventEvent","preventDefault","useBrowserOnline","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","ANIMATION_LEVEL_OPTIONS","memo","withGlobal","searchQuery","chatsById","animationLevel","byKey","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","className","onClick","ariaLabel","buildClassName","handleSearchFocus","useCallback","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","Switcher","label","checked","noAnimation","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onChange","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","usersById","orderedFolderIds","shouldSkipHistoryAnimations","notifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","noFirst","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","current","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","min","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","name","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","setSize","windowSize","handleResize","MAX_MESSAGES_LIST_WIDTH","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canLeave","joinChannel","openLocalTextSearch","restartBot","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","querySelector","focus","searchInput","disabled","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","scale","img","outputType","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","floor","steppedScale","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","image","Blob","createObjectURL","Image","onload","blob","finally","revokeObjectURL","resizeImage","ratio","scaleImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","AudioOrigin","noUi","isVoice","senderName","mediaData","mediaLoader","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","useAudioPlayer","makeTrackId","getMediaDuration","handleClick","handleClose","clearMediaSession","renderAudio","subtitle","renderVoice","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","windowWidth","useWindowSize","isLeftColumnHideable","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","componentEl","add","remove","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","Infinity","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","onMouseDown","preventMessageInputBlur","onContextMenu","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_BACKGROUND","shouldAutoLoad","isInSelectMode","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","isPlayAllowed","wasPlaying","freezePlaying","paused","unfreezePlaying","contains","unfreezePlayingOnRaf","fastRaf","hasFocus","useBackgroundMode","shouldAutoPlay","videoRef","getMessageWebPageVideo","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTarget","currentTime","duration","usePauseOnInactive","useVideoCleanup","videoClassName","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","onEnded","recentReplierIds","recentRepliers","hasUnread","GROUP_MESSAGE_HOVER_ATTRIBUTE","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","chatUsername","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","canReply","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","clickInlineButton","bottomMarkerRef","appendixRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","selectMessage","handleMouseDown","handleDoubleClick","handleContentDoubleClick","isSwiped","markSwiped","unmarkSwiped","startedAt","target","matches","useOuterHandlers","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","calculatedWidth","noMediaCorners","extraPadding","onDoubleClick","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","messageGroups","isViewportNewest","isUnread","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","observe","useIntersectionObserver","rootRef","throttleMs","margin","freezeForReading","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","resetScroll","observeIntersectionForFab","freezeForFab","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","lastUnreadMessageId","loadGreetingStickers","debounceMs","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","isCreator","isBot","threadFirstMessageId","selectFirstMessageId","hasTools","canPost","setScrollOffset","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","shouldRunLast","container","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","buildAttachment","filename","isQuick","mimeType","quick","preloadImage","newBlob","squeezeImage","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","parseMessageInput","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","ReceiptModal","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isReceiptModalOpen","shouldSuggestStickers","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","sendInlineBotResult","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevChatId","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredUsers","onSelectResult","withUsername","canAttachEmbedLinks","MessageInput","forcedPlaceholder","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioMessage","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","leftColumnWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","createMessageHash","isMessagingDisabled","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","handleLoadMore","messageIdsRef","getMessageContentIds","reverse","getMore","useInfiniteScroll","runThrottledForScroll","isScrollingProgrammatically","contactName","getUserFirstOrLastName","deleteChatMember","handleDeleteChatMember","Modal","onEnter","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","MEMBERS_SLICE","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","determineProfileState","tabListEl","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","getMemberContextAction","handler","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","ListItem","teactOrderKey","contextActions","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","FloatingActionButton","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","sortChatIds","foundContactIds","fullName","getUserFullName","contactId","isUserBot","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","memberId","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","audioOrigin","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","LOCATION_HASH","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","stopEvent","usePreventIosPinchZoom","onDrop","onDragOver","initApi"],"sourceRoot":""}