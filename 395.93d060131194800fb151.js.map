{"version":3,"file":"395.93d060131194800fb151.js","mappings":"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","sources":["webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/SlideTransition.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../global/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message });\n    } else {\n      downloadMessageMedia({ message });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nconst formatFileSize = (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n\nexport default formatFileSize;\n","import React, {\n  FC, useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 1500;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    let timeout: number | undefined;\n    if (!isVisible || !isPlayed || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlayed, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && renderFileSize(bufferedProgress, fileSize)}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className=\"playback-rate-menu\"\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\n\nimport VideoPlayerControls from './VideoPlayerControls';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  areControlsVisible: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleMouseOut = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (e.target === videoRef.current) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!isGif && !IS_TOUCH_ENV ? handleMouseMove : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration || 0 : 0}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport {\n  getChatAvatarHash,\n  getMessageDocument,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { AVATAR_FULL_DIMENSIONS, calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setIsFooterHidden?: (isHidden: boolean) => void;\n  isFooterHidden?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    messageId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    profilePhotoIndex,\n    origin,\n    animationLevel,\n    isFooterHidden,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    onClose,\n    onFooterClick,\n    setIsFooterHidden,\n  } = props;\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n\n  const isOpen = Boolean(avatarOwner || messageId);\n  const isAvatar = Boolean(avatarOwner);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const toggleControls = useCallback((isVisible) => {\n    setIsFooterHidden?.(!isVisible);\n  }, [setIsFooterHidden]);\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  if (isAvatar) {\n    return (\n      <div key={chatId} className=\"MediaViewerContent\">\n        {renderPhoto(\n          fullMediaBlobUrl || previewBlobUrl,\n          calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n          !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        )}\n      </div>\n    );\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={`MediaViewerContent ${hasFooter ? 'has-footer' : ''}`}\n    >\n      {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      )}\n      {isVideo && ((!isActive && IS_TOUCH_ENV) ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      ) : (\n        <VideoPlayer\n          key={messageId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          areControlsVisible={!isFooterHidden}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          volume={volume}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isHidden={isFooterHidden && IS_TOUCH_ENV}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        origin,\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MediaViewerOrigin } from '../../types';\n\nimport useDebounce from '../../hooks/useDebounce';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport arePropsShallowEqual from '../../util/arePropsShallowEqual';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD, RealTouchEvent } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\nimport useTimeout from '../../hooks/useTimeout';\n\ntype OwnProps = {\n  messageId?: number;\n  getMessageId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMessage: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  isActive?: boolean;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isZoomed?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = 40;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 0.6;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_X_THRESHOLD = 40;\nconst CLICK_Y_THRESHOLD = 80;\nlet cancelAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  messageId,\n  getMessageId,\n  selectMessage,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  isActive,\n  hasFooter,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const [activeMessageId, setActiveMessageId] = useState<number | undefined>(messageId);\n  const forceUpdate = useForceUpdate();\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(true);\n\n  const {\n    isZoomed,\n    onClose,\n  } = rest;\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const setIsActive = useCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const debounceSetMessage = useDebounce(DEBOUNCE_MESSAGE, true);\n  const debounceSwipeDirection = useDebounce(DEBOUNCE_SWIPE, true);\n  const debounceActive = useDebounce(DEBOUNCE_ACTIVE, true);\n\n  const handleToggleFooterVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = window.innerHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < CLICK_X_THRESHOLD) return;\n    if (!isFooter && e.pageX > window.innerWidth - CLICK_X_THRESHOLD) return;\n    setIsFooterHidden(!isFooterHidden);\n  }, [isFooterHidden]);\n\n  useTimeout(() => setIsFooterHidden(false), ANIMATION_DURATION - 150);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !containerRef.current || isZoomed || !activeMessageId) {\n      return undefined;\n    }\n    let lastTransform = { x: 0, y: 0, scale: 1 };\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (e: MouseEvent) => {\n      if (transformRef.current.scale !== 1) return false;\n      let direction = 0;\n      if (window.innerHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return false;\n      }\n      if (e.pageX < CLICK_X_THRESHOLD) {\n        direction = -1;\n      } else if (e.pageX > window.innerWidth - CLICK_X_THRESHOLD) {\n        direction = 1;\n      }\n      const mId = getMessageId(activeMessageId, direction);\n      if (mId) {\n        const offset = (window.innerWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMessageId(mId);\n        debounceSetMessage(() => selectMessage(mId));\n        debounceActive(() => {\n          setIsActive(true);\n        });\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n      }\n      return direction !== 0;\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      excludedClosestSelector: '.MediaViewerFooter',\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        lastGestureTime = Date.now();\n        if (arePropsShallowEqual(transformRef.current, { x: 0, y: 0, scale: 1 })) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }) => {\n        if (checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS) {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= window.innerWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const h = 10;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: lastTransform.x + dragOffsetX,\n              y: lastTransform.y + dragOffsetY,\n              scale,\n            });\n          }\n          return;\n        }\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > h || (absOffsetX > h && absOffsetY < h)) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            setTransform({\n              x: dragOffsetX,\n              y: 0,\n              scale,\n            });\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > h || (absOffsetY > h && absOffsetX < h)) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          setTransform({\n            x: 0,\n            y: dragOffsetY,\n            scale,\n          });\n        }\n      },\n      onZoom: (e, {\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        // Calculate current scale based on zoom factor and limits, add max zoom margin for bounce back effect\n        const scale = Math.min(MAX_ZOOM * 3, Math.max(lastTransform.scale * zoomFactor, MIN_ZOOM));\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        setTransform({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n      },\n      onClick(e) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n          return undefined;\n        }\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return undefined;\n          lastTransform = {\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          };\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        return animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n      },\n      onRelease: () => {\n        const absX = Math.abs(transformRef.current.x);\n        const absY = Math.abs(transformRef.current.y);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n\n        debounceSwipeDirection(() => {\n          swipeDirectionRef.current = undefined;\n        });\n        debounceActive(() => {\n          setIsActive(true);\n        });\n\n        // If scale is less than 1 we need to bounce back\n        if (scale < 1) {\n          lastTransform = { x: 0, y: 0, scale: 1 };\n          return animateNumber({\n            from: [x, y, scale],\n            to: [0, 0, 1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n        }\n        if (scale > 1) {\n          if (!content || !initialContentRect) {\n            lastTransform = {\n              x,\n              y,\n              scale,\n            };\n            return undefined;\n          }\n          // Get current content boundaries\n          const boundaries = content.getBoundingClientRect();\n          const s1 = Math.min(scale, MAX_ZOOM);\n          const scaleFactor = s1 / scale;\n\n          // Calculate new position based on the last zoom center to keep the zoom center\n          // at the same position when bouncing back from max zoom\n          let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n          let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n          // Arbitrary pan velocity coefficient\n          const k = 0.15;\n\n          // If scale didn't change, we need to add inertia to pan gesture\n          if (lastTransform.scale === scale) {\n            // Calculate user gesture velocity\n            const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n            const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n            // Add extra distance based on gesture velocity and last pan delta\n            x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n            y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n          }\n\n          // If content is outside window we calculate offset boundaries\n          // based on initial content rect and current scale\n          if (boundaries.width > window.innerWidth) {\n            const minOffsetX = -initialContentRect.left * s1;\n            const maxOffsetX = window.innerWidth - initialContentRect.right * s1;\n            x1 = Math.min(minOffsetX, Math.max(maxOffsetX, x1));\n          } else {\n            // Else we center the content on the screen\n            x1 = (window.innerWidth - window.innerWidth * s1) / 2;\n          }\n\n          if (boundaries.height > window.innerHeight) {\n            const minOffsetY = -initialContentRect.top * s1;\n            const maxOffsetY = window.innerHeight - initialContentRect.bottom * s1;\n            y1 = Math.min(minOffsetY, Math.max(maxOffsetY, y1));\n          } else {\n            y1 = (window.innerHeight - window.innerHeight * s1) / 2;\n          }\n          lastTransform = {\n            x: x1,\n            y: y1,\n            scale: s1,\n          };\n          cancelAnimation = animateNumber({\n            from: [x, y, scale],\n            to: [x1, y1, s1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n          return undefined;\n        }\n        lastTransform = {\n          x,\n          y,\n          scale,\n        };\n        if (absY >= SWIPE_Y_THRESHOLD) return onClose();\n        // Bounce back if vertical swipe is below threshold\n        if (absY > 0) {\n          return animateNumber({\n            from: y,\n            to: 0,\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: 0,\n              y: value,\n              scale,\n            }),\n          });\n        }\n        // Get horizontal swipe direction\n        const direction = x < 0 ? 1 : -1;\n        const mId = getMessageId(activeMessageId, x < 0 ? 1 : -1);\n        // Get the direction of the last pan gesture.\n        // Could be different from the total horizontal swipe direction\n        // if user starts a swipe in one direction and then changes the direction\n        // we need to cancel slide transition\n        const dirX = panDelta.x < 0 ? -1 : 1;\n        if (mId && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n          const offset = (window.innerWidth + SLIDES_GAP) * direction;\n          // If image is shifted by more than SWIPE_X_THRESHOLD,\n          // We shift everything by one screen width and then set new active message id\n          transformRef.current.x += offset;\n          setActiveMessageId(mId);\n          debounceSetMessage(() => selectMessage(mId));\n        }\n        // Then we always return to the original position\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: transformRef.current.scale,\n          }),\n        });\n        return undefined;\n      },\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    isZoomed,\n    onClose,\n    setTransform,\n    getMessageId,\n    activeMessageId,\n    setIsActive,\n  ]);\n\n  if (!activeMessageId) return undefined;\n\n  const nextMessageId = getMessageId(activeMessageId, 1);\n  const previousMessageId = getMessageId(activeMessageId, -1);\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {previousMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-window.innerWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={previousMessageId}\n          />\n        </div>\n      )}\n      {activeMessageId && (\n        <div\n          className={`MediaViewerSlide ${isActive ? 'MediaViewerSlide--active' : ''}`}\n          onClick={handleToggleFooterVisibility}\n          ref={activeSlideRef}\n          style={getAnimationStyle(offsetX, offsetY, scale)}\n        >\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={activeMessageId}\n            isActive={isActive && isActiveRef.current}\n            setIsFooterHidden={setIsFooterHidden}\n            isFooterHidden={isFooterHidden || isZoomed || scale !== 1}\n          />\n        </div>\n      )}\n      {nextMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(window.innerWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={nextMessageId}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: React.ReactNode;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.Transition__slide--active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import React, { FC } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Transition, { ChildrenFn, TransitionProps } from '../ui/Transition';\n\nconst SlideTransition: FC<TransitionProps & { children: ChildrenFn }> = ({ children, ...props }) => {\n  if (IS_TOUCH_ENV) return children(true, true, 1);\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Transition {...props}>{children}</Transition>;\n};\n\nexport default SlideTransition;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = useCallback(() => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  }, [zoomLevel]);\n\n  const handleZoomIn = useCallback(() => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  }, [zoomLevel]);\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../hooks/usePrevious';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureEvents } from '../../util/captureEvents';\nimport windowSize from '../../util/windowSize';\nimport { AVATAR_FULL_DIMENSIONS, MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport PanZoom from './PanZoom';\nimport SenderInfo from './SenderInfo';\nimport SlideTransition from './SlideTransition';\nimport ZoomControls from './ZoomControls';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageId?: number;\n  senderId?: string;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const { isGif } = video || webPageVideo || {};\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const singleMessageId = webPagePhoto || webPageVideo ? messageId : undefined;\n\n  const messageIds = useMemo(() => {\n    return singleMessageId\n      ? [singleMessageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [singleMessageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 && !IS_TOUCH_ENV ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({\n      x: 0,\n      y: 0,\n    });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({\n        x: 0,\n        y: 0,\n      });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  }, [close, chatId, threadId, focusMessage, toggleChatInfo, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId,\n      messageIds: [messageId],\n    });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  const selectMessage = useCallback((id?: number) => openMediaViewer({\n    chatId,\n    threadId,\n    messageId: id,\n    origin,\n  }, {\n    forceOnHeavyAnimation: true,\n  }), [chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (!fromId) return undefined;\n    const index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      return messageIds[index + direction];\n    }\n    return undefined;\n  }, [messageIds]);\n\n  const nextMessageId = getMessageId(messageId, 1);\n  const previousMessageId = getMessageId(messageId, -1);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({\n      x,\n      y,\n    });\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectMessage(previousMessageId);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectMessage(nextMessageId);\n          break;\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [isOpen, nextMessageId, previousMessageId, selectMessage]);\n\n  useEffect(() => {\n    if (isZoomed || IS_TOUCH_ENV) return undefined;\n    const element = document.querySelector<HTMLDivElement>('.MediaViewerSlide--active');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .Spoiler, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: close,\n    });\n  }, [close, isGif, isZoomed, messageId]);\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={close}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          isZoomed={isZoomed}\n          message={message}\n          fileName={fileName}\n          onCloseMediaViewer={close}\n          onForward={handleForward}\n          onZoomToggle={handleZoomToggle}\n          isAvatar={isAvatar}\n        />\n      </div>\n      <PanZoom\n        noWrap={!canPanZoomWrap}\n        canPan={isZoomed}\n        panDeltaX={panDelta.x}\n        panDeltaY={panDelta.y}\n        zoomLevel={zoomLevel}\n        onPan={handlePan}\n      >\n        <SlideTransition\n          activeKey={selectedMediaMessageIndex}\n          name={slideAnimation}\n        >\n          {(isActive: boolean) => (\n            <MediaViewerSlides\n              messageId={messageId}\n              getMessageId={getMessageId}\n              chatId={chatId}\n              isPhoto={isPhoto}\n              isGif={isGif}\n              threadId={threadId}\n              avatarOwnerId={avatarOwner && avatarOwner.id}\n              profilePhotoIndex={profilePhotoIndex}\n              origin={origin}\n              isOpen={isOpen}\n              hasFooter={hasFooter}\n              isZoomed={isZoomed}\n              isActive={isActive}\n              isVideo={isVideo}\n              animationLevel={animationLevel}\n              onClose={close}\n              selectMessage={selectMessage}\n              onFooterClick={handleFooterClick}\n            />\n          )}\n        </SlideTransition>\n      </PanZoom>\n      {!isFirst && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n          onClick={() => selectMessage(previousMessageId)}\n        />\n      )}\n      {!isLast && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n          onClick={() => selectMessage(nextMessageId)}\n        />\n      )}\n      <ZoomControls\n        isShown={isZoomed}\n        onChangeZoom={handleZoomValue}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n)(MediaViewer));\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  loadMore?: NoneToVoidFunction;\n  onFilterChange: (filter: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  loadMore,\n  onFilterChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  const resetFilter = useCallback(() => {\n    onFilterChange('');\n  }, [onFilterChange]);\n  useInputFocusOnOpen(filterRef, isOpen, resetFilter);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  sortChatIds,\n} from '../../global/helpers';\nimport { unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\nconst ForwardPicker: FC<OwnProps & StateProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  currentUserId,\n  isOpen,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const chatAndContactIds = useMemo(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, filter, currentUserId),\n      ...(contactIds ? filterUsersByName(contactIds, usersById, filter) : []),\n    ]), chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, contactIds, currentUserId, filter, isOpen, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    setForwardChatId({ id: userId });\n  }, [setForwardChatId]);\n\n  const renderingChatAndContactIds = useCurrentOrPrev(chatAndContactIds, true)!;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={renderingChatAndContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={exitForwardMode}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(ForwardPicker));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url));\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay();\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName), ['emoji', 'simple_markdown'])}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useEffect } from '../../../lib/teact/teact';\nimport { IS_MAC_OS } from '../../../util/environment';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  useEffect(() => {\n    function handleCopy(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && getKeyFromEvent(e) === 'c') {\n        e.preventDefault();\n        copySelectedMessages();\n      }\n    }\n\n    if (isActive) {\n      document.addEventListener('keydown', handleCopy, false);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleCopy, false);\n    };\n  }, [copySelectedMessages, isActive]);\n};\n\nexport default useCopySelectedMessages;\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\nconst ReportMessageModal: FC<OwnProps> = ({\n  isOpen,\n  messageIds,\n  onClose,\n}) => {\n  const {\n    reportMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useCallback(() => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  }, [description, exitMessageSelectMode, messageIds, onClose, reportMessages, selectedReason]);\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(ReportMessageModal);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n  } = getActions();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-reaction-filled\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const fullName = getUserFullName(user);\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"medium\" />\n                    <div className=\"title\">\n                      <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n                    </div>\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n    };\n  },\n)(ReactorListModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 240;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectAnimationData = useMedia(`sticker${effectAnimationId}`, !effectAnimationId, ApiMediaFormat.Lottie);\n\n  const [localEffectAnimationData, setLocalEffectAnimationData] = useState<string | undefined>();\n  useEffect(() => {\n    if (localEffectAnimation) {\n      getAnimationData(localEffectAnimation as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalEffectAnimationData(data);\n      });\n    }\n  }, [localEffectAnimation]);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        id={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        animationData={localEffectAnimationData || effectAnimationData}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(ANIMATED_STICKERS_PATHS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, loadContactList, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    deleteChatFolder,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const { loadProfilePhotos } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n)(SettingsEditProfile));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n};\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onScreenSelect,\n  onReset,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    showDialog,\n  } = getActions();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [orderedFolderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n    };\n  },\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isUserId } from '../../../../global/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(\n    isActive,\n    onReset,\n    onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats,\n  );\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isVideo = stickerSet.isVideos;\n\n  const firstLetters = useMemo(() => {\n    if ((isVideo && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n    return undefined;\n  }, [isVideo, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isVideo ? (\n        <video src={mediaData} className={transitionClassNames} loop autoPlay />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n          clickArg={undefined}\n          noContextMenu\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ISettings, TimeFormat } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup, { IRadioOption } from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'shouldSuggestStickers' |\n    'shouldLoopStickers' |\n    'timeFormat'\n  )> & {\n    stickerSetIds?: string[];\n    stickerSetsById?: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  defaultReaction,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n    };\n  },\n)(SettingsGeneral));\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport useDebounce from '../../../hooks/useDebounce';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useDebounce(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n}) => {\n  const {\n    loadAuthorizations,\n    terminateAuthorization,\n    terminateAllAuthorizations,\n  } = getActions();\n\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadContactList,\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, filter)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadContactList}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isChatGroup, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helper/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        return chat && ((isUserId(chat.id) && chat.id !== currentUserId) || isChatGroup(chat));\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  onScreenSelect,\n  availableReactions,\n  selectedReaction,\n}) => {\n  const { setDefaultReaction } = getActions();\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const options = availableReactions?.filter((l) => !l.isInactive).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || screen === SettingsScreens.QuickReaction\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    loadContactList,\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    loadContactList,\n    setGlobalSearchQuery,\n  } = getActions();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, memo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady, ApiMediaFormat.Lottie);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n  const { transitionClassNames: animatedClassNames } = useShowTransition(shouldRenderAnimated);\n  const { shouldRender: shouldRenderStatic, transitionClassNames: staticClassNames } = useShowTransition(\n    !isReady || !isAnimationLoaded, undefined, true,\n  );\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isReady ? [staticClassNames] : undefined,\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          id={`select_${reaction.reaction}`}\n          className={cn('animated', [animatedClassNames])}\n          animationData={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  FC, memo, useLayoutEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiUser } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onSendReaction: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onDownload,\n  onSaveGif,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined, onCopyMessages);\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"reactions\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'reactions' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? getUserFullName(seenByRecentUsers[0])\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { MessageListType } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsMessageProtected,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport buildClassName from '../../../util/buildClassName';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n  } = getActions();\n\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canShowSeenBy={canShowSeenBy}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount < seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: !isProtected && canCopy,\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n    };\n  },\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectStickerSetByShortName,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openCallFallbackConfirm,\n    toggleStatistics,\n  } = getActions();\n\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleCall = useCallback(() => {\n    openCallFallbackConfirm();\n    closeMenu();\n  }, [closeMenu, openCallFallbackConfirm]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n    };\n  },\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => a.mimeType.startsWith('audio/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonimous?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, shouldBeAnonimous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonimous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n  onStickerFave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n            onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n            isSavedMessages={isSavedMessages}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { selectIsChatWithSelf } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  isSavedMessages,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadRecentStickers();\n      sendMessageAction({ type: 'chooseSticker' });\n    }\n  }, [loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n          noContextMenu\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n    };\n  },\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    return { stickers, isSavedMessages };\n  },\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsIds?: string[];\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  chatId,\n  selectedSendAsId,\n  sendAsIds,\n}) => {\n  const { saveDefaultSendAs } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsIds && !sendAsIds.length) {\n      onClose();\n    }\n  }, [sendAsIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsIds?.map((id, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const fullName = user ? getUserFullName(user) : chat?.title;\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleUserSelect(id)}\n            focus={selectedSendAsIndex === index}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              <div className=\"title\">\n                <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n              </div>\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport renderText from '../common/helpers/renderText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isSomeModalOpen, onModalToggle,\n}) => {\n  const { loadStickers, toggleStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            clickArg={undefined}\n            onClick={openModal}\n            noContextMenu\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiChannelStatistics, ApiGroupStatistics, StatisticsOverviewItem } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('ChannelStats.Overview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPercentage) {\n                return (\n                  <td>\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td>\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  return (\n    <p className=\"StatisticsRecentMessage\">\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views)}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </p>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import React, {\n  FC, memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  useEffect(() => {\n    if (!isActive) {\n      loadedCharts.current = [];\n    }\n  }, [isActive]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken && {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            },\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n    })();\n  }, [graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return { statistics, dcId, isGroup };\n  },\n)(Statistics));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport {\n  ApiChat, ApiChatBannedRights, ApiExportedInvite, ApiMediaFormat,\n} from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"reactions\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, filter);\n  }, [chat.fullInfo?.members, currentUserId, filter]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiExportedInvite, ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"reactions\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n    };\n  },\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../global/selectors';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, loadContactList } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadContactList, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      openChat({ id });\n    }\n  }, [noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  useHistoryBack(isActive, onClose);\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES } from '../../../config';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('Invite').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack(isActive, onClose);\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `t.me/${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"inviteDuck\"\n                size={STICKER_SIZE_INVITES}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              icon=\"link\"\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                icon=\"link\"\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack(isActive, onClose);\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack(isActive, onClose);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    if (enabledReactions) {\n      setIsLoading(false);\n      setIsTouched(false);\n      setLocalEnabledReactions(enabledReactions);\n    }\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableReactions?.filter((l) => !l.isInactive).map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack(isActive, onClose);\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  about,\n  date,\n  isChannel,\n  user,\n  serverTimeOffset,\n  chatId,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport getAnimationData from '../../common/helpers/animatedAssets';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('JoinRequest').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"section\">\n        <div className=\"section-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"joinRequestDucks\"\n              size={STICKER_SIZE_JOIN_REQUESTS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n        {Boolean(chat?.joinRequests?.length) && (\n          <div className=\"bulk-actions\">\n            <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n            <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n          </div>\n        )}\n      </div>\n      <div className=\"section\">\n        <div className=\"custom-scroll\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, lang('PaymentCheckoutMethod'))}\n        {paymentProvider && renderCheckoutItem(\n          buildClassName('provider', paymentProvider.toLowerCase()),\n          paymentProvider,\n          lang('PaymentCheckoutProvider'),\n        )}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, lang('PaymentShippingAddress'))}\n        {name && renderCheckoutItem('icon-user', name, lang('PaymentCheckoutName'))}\n        {phone && renderCheckoutItem('icon-phone', phone, lang('PaymentCheckoutPhoneNumber'))}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, lang('PaymentCheckoutShippingMethod'))}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('PaymentCardName')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getActions();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {\n        };\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isLoading}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n    };\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<string>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<string>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import React, {\n  FC, useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["cache","Map","useBlurSync","dataUri","blurredRef","useRef","isChanged","useOnChange","current","undefined","img","Image","src","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","delay","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","Boolean","createGhost","source","origin","ghost","document","createElement","classList","add","draggable","oncontextmenu","stopEvent","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","mediaData","isVideo","isZoomed","fileName","isAvatar","onCloseMediaViewer","onForward","onZoomToggle","downloadMessageMedia","cancelMessageMediaDownload","getActions","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","useCallback","lang","useLang","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","className","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","useFlag","seekerRef","isSeekingRef","isSeeking","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","map","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","loadedPercent","totalSize","formatFileSize","Menu","positionY","autoClose","onClose","rate","disabled","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","videoRef","setIsPlayed","IS_TOUCH_ENV","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseMove","handleMouseOut","target","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","ownProps","chatId","threadId","messageId","avatarOwnerId","profilePhotoIndex","mediaViewer","selectChatMessage","senderId","avatarOwner","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","isFooterHidden","onFooterClick","setIsFooterHidden","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isFromSharedMedia","isFromSearch","isGhostAnimation","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","renderPhoto","calculateMediaViewerDimensions","textParts","renderMessageText","hasFooter","onContextMenu","imageSize","canDrag","Spinner","renderVideoPreview","alt","ANIMATION_DURATION","cancelAnimation","SwipeDirection","getMessageId","selectMessage","rest","containerRef","activeSlideRef","transformRef","x","y","scale","swipeDirectionRef","isActiveRef","activeMessageId","setActiveMessageId","setTransform","setIsActive","debounceSetMessage","useDebounce","debounceSwipeDirection","debounceActive","handleToggleFooterVisibility","isFooter","innerHeight","pageY","pageX","innerWidth","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","timingFunctions","onUpdate","isNotPassive","excludedClosestSelector","checkIfControlTarget","arePropsShallowEqual","event","captureEvent","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","abs","absOffsetY","h","Vertical","Horizontal","onZoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MAX_ZOOM","scaleFactor","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","centerX","centerY","absX","absY","boundaries","s1","x1","y1","k","Vx","Vy","minOffsetX","maxOffsetX","right","minOffsetY","top","maxOffsetY","bottom","dirX","nextMessageId","previousMessageId","offsetX","offsetY","getAnimationStyle","checkIfInsideSelector","selector","matches","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","zoomLevel","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","onMouseDown","newDragData","onMouseUp","deltaX","deltaY","getNewMatrixData","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","chat","renderText","formatMediaDateTime","date","Transition","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","setZoomLevel","handleZoomOut","handleZoomIn","step","type","Number","settings","byKey","chatMessages","collectionIds","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","singleMessageId","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","setPanDelta","getMessageFileName","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handlePan","useHistoryBack","handleKeyDown","shouldCloseOnVideo","ShowTransition","isRtl","activeKey","name","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","loadMore","onFilterChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","resetFilter","useInputFocusOnOpen","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","i","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","setForwardChatId","exitForwardMode","setFilter","markIsShown","unmarkIsShown","chatAndContactIds","priorityIds","unique","chatIds","getCanPostInChat","MAIN_THREAD_ID","usersById","getGlobal","users","sortChatIds","filterChatsByName","filterUsersByName","handleSelectUser","renderingChatAndContactIds","useCurrentOrPrev","getErrorHeader","error","isSlowMode","hasErrorKey","pick","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","showNotification","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","handleClose","getUserStatus","label","Checkbox","checked","onCheck","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","handleCopy","IS_MAC_OS","metaKey","ctrlKey","getKeyFromEvent","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleDownload","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","renderButton","destructive","seenByModal","memberIds","seenByUserIds","openChat","closeSeenByModal","handleClick","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","isClosing","startClosing","stopClosing","chosenTab","setChosenTab","canShowFilters","count","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","l","reaction","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","find","ReactionStaticEmoji","fullName","getUserFullName","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","ANIMATED_STICKERS_PATHS","stopActiveEmojiInteraction","isHiding","startHiding","isPlaying","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectAnimationData","localEffectAnimationData","setLocalEffectAnimationData","getAnimationData","then","data","startSize","isReversed","AnimatedSticker","animationData","play","quality","IS_ANDROID","noLoop","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","getChatTitle","isVerified","VerifiedIcon","Link","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","currentType","isVoice","activeDownloads","theme","selectTheme","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","currentFirstName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","orderedFolderIds","foldersById","recommended","recommendedChatFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","STICKER_SIZE_FOLDER_SETTINGS","pill","fluid","narrow","multiline","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","handleChange","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","isTouched","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","useMediaTransition","firstLetters","getFirstLetters","hasThumbnail","isVideos","IS_WEBM_SUPPORTED","stickers","firstSticker","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","noContextMenu","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","defaultReaction","appConfig","messageTextSize","messageSendKeyCombo","shouldSuggestStickers","shouldLoopStickers","timeFormat","stickerSettingsRef","observeIntersectionForCovers","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","handleMessageSendComboChange","newCombo","handleSuggestStickersChange","newValue","handleShouldLoopStickersChange","stickerSets","installedDate","fromSticker","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","context","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","isChatGroup","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","availableReactions","selectedReaction","setDefaultReaction","isInactive","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","clientY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","isActivated","activate","deactivate","markAnimationLoaded","shouldRenderAnimated","animatedClassNames","shouldRenderStatic","staticClassNames","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onDownload","onSaveGif","onShowSeenBy","onShowReactors","onCopyMessages","menuRef","scrollableRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","noReactions","withReactions","markIsReady","unmarkIsReady","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","option","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","recentReactions","msg","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","requestCalendar","calendar","useSchedule","stickerSetAccessHash","isScheduleRequested","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canAddContact","getCanAddContact","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openCallFallbackConfirm","toggleStatistics","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","shouldBeAnonimous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","favoriteStickers","onStickerSelect","onStickerUnfave","onStickerFave","stickersPerRow","STICKER_SIZE_PICKER","favoriteStickerIdsSet","noAnimate","onUnfaveClick","has","onFaveClick","stickerSetIntersections","favorite","recentStickers","addedSetIds","shouldPlay","loadRecentStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","noPopulatedSets","stickerSetEl","handleStickerSelect","handleStickerUnfave","handleStickerFave","fullClassName","buttonClassName","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","handleMouseDown","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","statistics","period","formatFullDate","row","cell","field","percentage","change","isChangeNegative","renderOverviewItemValue","views","formatDateTimeToString","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","acc","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","maxLength","noAdmins","adminIds","shouldUseSearchResults","listedIds","noScrollRestore","memberId","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","useInterval","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","secondaryIcon","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","allow","sandbox","SUPPORTED_PROVIDERS","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","canRenderFooter","PaymentStep","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","cropperResultOptions","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","handleModalClose","labelClassName","accept"],"sourceRoot":""}