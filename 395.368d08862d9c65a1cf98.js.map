{"version":3,"file":"395.368d08862d9c65a1cf98.js","mappings":"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","sources":["webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/SlideTransition.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../global/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message });\n    } else {\n      downloadMessageMedia({ message });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nconst formatFileSize = (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n\nexport default formatFileSize;\n","import React, {\n  FC, useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 1500;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    let timeout: number | undefined;\n    if (!isVisible || !isPlayed || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlayed, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && renderFileSize(bufferedProgress, fileSize)}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className=\"playback-rate-menu\"\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\n\nimport VideoPlayerControls from './VideoPlayerControls';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  areControlsVisible: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleMouseOut = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (e.target === videoRef.current) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!isGif && !IS_TOUCH_ENV ? handleMouseMove : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration || 0 : 0}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport {\n  getChatAvatarHash,\n  getMessageDocument,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { AVATAR_FULL_DIMENSIONS, calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setIsFooterHidden?: (isHidden: boolean) => void;\n  isFooterHidden?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    messageId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    profilePhotoIndex,\n    origin,\n    animationLevel,\n    isFooterHidden,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    onClose,\n    onFooterClick,\n    setIsFooterHidden,\n  } = props;\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n\n  const isOpen = Boolean(avatarOwner || messageId);\n  const isAvatar = Boolean(avatarOwner);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const toggleControls = useCallback((isVisible) => {\n    setIsFooterHidden?.(!isVisible);\n  }, [setIsFooterHidden]);\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  if (isAvatar) {\n    return (\n      <div key={chatId} className=\"MediaViewerContent\">\n        {renderPhoto(\n          fullMediaBlobUrl || previewBlobUrl,\n          calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n          !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        )}\n      </div>\n    );\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={`MediaViewerContent ${hasFooter ? 'has-footer' : ''}`}\n    >\n      {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      )}\n      {isVideo && ((!isActive && IS_TOUCH_ENV) ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      ) : (\n        <VideoPlayer\n          key={messageId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          areControlsVisible={!isFooterHidden}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          volume={volume}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isHidden={isFooterHidden && IS_TOUCH_ENV}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        origin,\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MediaViewerOrigin } from '../../types';\n\nimport useDebounce from '../../hooks/useDebounce';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport arePropsShallowEqual from '../../util/arePropsShallowEqual';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD, RealTouchEvent } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\nimport useTimeout from '../../hooks/useTimeout';\n\ntype OwnProps = {\n  messageId?: number;\n  getMessageId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMessage: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  isActive?: boolean;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isZoomed?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = 40;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 0.6;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_X_THRESHOLD = 40;\nconst CLICK_Y_THRESHOLD = 80;\nlet cancelAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  messageId,\n  getMessageId,\n  selectMessage,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  isActive,\n  hasFooter,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const [activeMessageId, setActiveMessageId] = useState<number | undefined>(messageId);\n  const forceUpdate = useForceUpdate();\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(true);\n\n  const {\n    isZoomed,\n    onClose,\n  } = rest;\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const setIsActive = useCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const debounceSetMessage = useDebounce(DEBOUNCE_MESSAGE, true);\n  const debounceSwipeDirection = useDebounce(DEBOUNCE_SWIPE, true);\n  const debounceActive = useDebounce(DEBOUNCE_ACTIVE, true);\n\n  const handleToggleFooterVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = window.innerHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < CLICK_X_THRESHOLD) return;\n    if (!isFooter && e.pageX > window.innerWidth - CLICK_X_THRESHOLD) return;\n    setIsFooterHidden(!isFooterHidden);\n  }, [isFooterHidden]);\n\n  useTimeout(() => setIsFooterHidden(false), ANIMATION_DURATION - 150);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !containerRef.current || isZoomed || !activeMessageId) {\n      return undefined;\n    }\n    let lastTransform = { x: 0, y: 0, scale: 1 };\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (e: MouseEvent) => {\n      if (transformRef.current.scale !== 1) return false;\n      let direction = 0;\n      if (window.innerHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return false;\n      }\n      if (e.pageX < CLICK_X_THRESHOLD) {\n        direction = -1;\n      } else if (e.pageX > window.innerWidth - CLICK_X_THRESHOLD) {\n        direction = 1;\n      }\n      const mId = getMessageId(activeMessageId, direction);\n      if (mId) {\n        const offset = (window.innerWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMessageId(mId);\n        debounceSetMessage(() => selectMessage(mId));\n        debounceActive(() => {\n          setIsActive(true);\n        });\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n      }\n      return direction !== 0;\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      excludedClosestSelector: '.MediaViewerFooter',\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        lastGestureTime = Date.now();\n        if (arePropsShallowEqual(transformRef.current, { x: 0, y: 0, scale: 1 })) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }) => {\n        if (checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS) {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= window.innerWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const h = 10;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: lastTransform.x + dragOffsetX,\n              y: lastTransform.y + dragOffsetY,\n              scale,\n            });\n          }\n          return;\n        }\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > h || (absOffsetX > h && absOffsetY < h)) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            setTransform({\n              x: dragOffsetX,\n              y: 0,\n              scale,\n            });\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > h || (absOffsetY > h && absOffsetX < h)) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          setTransform({\n            x: 0,\n            y: dragOffsetY,\n            scale,\n          });\n        }\n      },\n      onZoom: (e, {\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        // Calculate current scale based on zoom factor and limits, add max zoom margin for bounce back effect\n        const scale = Math.min(MAX_ZOOM * 3, Math.max(lastTransform.scale * zoomFactor, MIN_ZOOM));\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        setTransform({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n      },\n      onClick(e) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        if (changeSlide(e as MouseEvent)) {\n          e.preventDefault();\n          e.stopPropagation();\n          return undefined;\n        }\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return undefined;\n          lastTransform = {\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          };\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        return animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n      },\n      onRelease: () => {\n        const absX = Math.abs(transformRef.current.x);\n        const absY = Math.abs(transformRef.current.y);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n\n        debounceSwipeDirection(() => {\n          swipeDirectionRef.current = undefined;\n        });\n        debounceActive(() => {\n          setIsActive(true);\n        });\n\n        // If scale is less than 1 we need to bounce back\n        if (scale < 1) {\n          lastTransform = { x: 0, y: 0, scale: 1 };\n          return animateNumber({\n            from: [x, y, scale],\n            to: [0, 0, 1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n        }\n        if (scale > 1) {\n          if (!content || !initialContentRect) {\n            lastTransform = {\n              x,\n              y,\n              scale,\n            };\n            return undefined;\n          }\n          // Get current content boundaries\n          const boundaries = content.getBoundingClientRect();\n          const s1 = Math.min(scale, MAX_ZOOM);\n          const scaleFactor = s1 / scale;\n\n          // Calculate new position based on the last zoom center to keep the zoom center\n          // at the same position when bouncing back from max zoom\n          let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n          let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n          // Arbitrary pan velocity coefficient\n          const k = 0.15;\n\n          // If scale didn't change, we need to add inertia to pan gesture\n          if (lastTransform.scale === scale) {\n            // Calculate user gesture velocity\n            const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n            const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n            // Add extra distance based on gesture velocity and last pan delta\n            x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n            y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n          }\n\n          // If content is outside window we calculate offset boundaries\n          // based on initial content rect and current scale\n          if (boundaries.width > window.innerWidth) {\n            const minOffsetX = -initialContentRect.left * s1;\n            const maxOffsetX = window.innerWidth - initialContentRect.right * s1;\n            x1 = Math.min(minOffsetX, Math.max(maxOffsetX, x1));\n          } else {\n            // Else we center the content on the screen\n            x1 = (window.innerWidth - window.innerWidth * s1) / 2;\n          }\n\n          if (boundaries.height > window.innerHeight) {\n            const minOffsetY = -initialContentRect.top * s1;\n            const maxOffsetY = window.innerHeight - initialContentRect.bottom * s1;\n            y1 = Math.min(minOffsetY, Math.max(maxOffsetY, y1));\n          } else {\n            y1 = (window.innerHeight - window.innerHeight * s1) / 2;\n          }\n          lastTransform = {\n            x: x1,\n            y: y1,\n            scale: s1,\n          };\n          cancelAnimation = animateNumber({\n            from: [x, y, scale],\n            to: [x1, y1, s1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n          return undefined;\n        }\n        lastTransform = {\n          x,\n          y,\n          scale,\n        };\n        if (absY >= SWIPE_Y_THRESHOLD) return onClose();\n        // Bounce back if vertical swipe is below threshold\n        if (absY > 0) {\n          return animateNumber({\n            from: y,\n            to: 0,\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: 0,\n              y: value,\n              scale,\n            }),\n          });\n        }\n        // Get horizontal swipe direction\n        const direction = x < 0 ? 1 : -1;\n        const mId = getMessageId(activeMessageId, x < 0 ? 1 : -1);\n        // Get the direction of the last pan gesture.\n        // Could be different from the total horizontal swipe direction\n        // if user starts a swipe in one direction and then changes the direction\n        // we need to cancel slide transition\n        const dirX = panDelta.x < 0 ? -1 : 1;\n        if (mId && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n          const offset = (window.innerWidth + SLIDES_GAP) * direction;\n          // If image is shifted by more than SWIPE_X_THRESHOLD,\n          // We shift everything by one screen width and then set new active message id\n          transformRef.current.x += offset;\n          setActiveMessageId(mId);\n          debounceSetMessage(() => selectMessage(mId));\n        }\n        // Then we always return to the original position\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: transformRef.current.scale,\n          }),\n        });\n        return undefined;\n      },\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    isZoomed,\n    onClose,\n    setTransform,\n    getMessageId,\n    activeMessageId,\n    setIsActive,\n  ]);\n\n  if (!activeMessageId) return undefined;\n\n  const nextMessageId = getMessageId(activeMessageId, 1);\n  const previousMessageId = getMessageId(activeMessageId, -1);\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {previousMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-window.innerWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={previousMessageId}\n          />\n        </div>\n      )}\n      {activeMessageId && (\n        <div\n          className={`MediaViewerSlide ${isActive ? 'MediaViewerSlide--active' : ''}`}\n          onClick={handleToggleFooterVisibility}\n          ref={activeSlideRef}\n          style={getAnimationStyle(offsetX, offsetY, scale)}\n        >\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={activeMessageId}\n            isActive={isActive && isActiveRef.current}\n            setIsFooterHidden={setIsFooterHidden}\n            isFooterHidden={isFooterHidden || isZoomed || scale !== 1}\n          />\n        </div>\n      )}\n      {nextMessageId && scale === 1 && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(window.innerWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={nextMessageId}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: React.ReactNode;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.Transition__slide--active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import React, { FC } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Transition, { ChildrenFn, TransitionProps } from '../ui/Transition';\n\nconst SlideTransition: FC<TransitionProps & { children: ChildrenFn }> = ({ children, ...props }) => {\n  if (IS_TOUCH_ENV) return children(true, true, 1);\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Transition {...props}>{children}</Transition>;\n};\n\nexport default SlideTransition;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../hooks/usePrevious';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureEvents } from '../../util/captureEvents';\nimport windowSize from '../../util/windowSize';\nimport { AVATAR_FULL_DIMENSIONS, MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport PanZoom from './PanZoom';\nimport SenderInfo from './SenderInfo';\nimport SlideTransition from './SlideTransition';\nimport ZoomControls from './ZoomControls';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageId?: number;\n  senderId?: string;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const { isGif } = video || webPageVideo || {};\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const singleMessageId = webPagePhoto || webPageVideo ? messageId : undefined;\n\n  const messageIds = useMemo(() => {\n    return singleMessageId\n      ? [singleMessageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [singleMessageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 && !IS_TOUCH_ENV ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({\n      x: 0,\n      y: 0,\n    });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({\n        x: 0,\n        y: 0,\n      });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  }, [close, chatId, threadId, focusMessage, toggleChatInfo, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId,\n      messageIds: [messageId],\n    });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  const selectMessage = useCallback((id?: number) => openMediaViewer({\n    chatId,\n    threadId,\n    messageId: id,\n    origin,\n  }, {\n    forceOnHeavyAnimation: true,\n  }), [chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (!fromId) return undefined;\n    const index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      return messageIds[index + direction];\n    }\n    return undefined;\n  }, [messageIds]);\n\n  const nextMessageId = getMessageId(messageId, 1);\n  const previousMessageId = getMessageId(messageId, -1);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({\n      x,\n      y,\n    });\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectMessage(previousMessageId);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectMessage(nextMessageId);\n          break;\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [isOpen, nextMessageId, previousMessageId, selectMessage]);\n\n  useEffect(() => {\n    if (isZoomed || IS_TOUCH_ENV) return undefined;\n    const element = document.querySelector<HTMLDivElement>('.MediaViewerSlide--active');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .Spoiler, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: close,\n    });\n  }, [close, isGif, isZoomed, messageId]);\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={close}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          isZoomed={isZoomed}\n          message={message}\n          fileName={fileName}\n          onCloseMediaViewer={close}\n          onForward={handleForward}\n          onZoomToggle={handleZoomToggle}\n          isAvatar={isAvatar}\n        />\n      </div>\n      <PanZoom\n        noWrap={!canPanZoomWrap}\n        canPan={isZoomed}\n        panDeltaX={panDelta.x}\n        panDeltaY={panDelta.y}\n        zoomLevel={zoomLevel}\n        onPan={handlePan}\n      >\n        <SlideTransition\n          activeKey={selectedMediaMessageIndex}\n          name={slideAnimation}\n        >\n          {(isActive: boolean) => (\n            <MediaViewerSlides\n              messageId={messageId}\n              getMessageId={getMessageId}\n              chatId={chatId}\n              isPhoto={isPhoto}\n              isGif={isGif}\n              threadId={threadId}\n              avatarOwnerId={avatarOwner && avatarOwner.id}\n              profilePhotoIndex={profilePhotoIndex}\n              origin={origin}\n              isOpen={isOpen}\n              hasFooter={hasFooter}\n              isZoomed={isZoomed}\n              isActive={isActive}\n              isVideo={isVideo}\n              animationLevel={animationLevel}\n              onClose={close}\n              selectMessage={selectMessage}\n              onFooterClick={handleFooterClick}\n            />\n          )}\n        </SlideTransition>\n      </PanZoom>\n      {!isFirst && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n          onClick={() => selectMessage(previousMessageId)}\n        />\n      )}\n      {!isLast && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n          onClick={() => selectMessage(nextMessageId)}\n        />\n      )}\n      <ZoomControls\n        isShown={isZoomed}\n        onChangeZoom={handleZoomValue}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n)(MediaViewer));\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  loadMore?: NoneToVoidFunction;\n  onFilterChange: (filter: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  loadMore,\n  onFilterChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  const resetFilter = useCallback(() => {\n    onFilterChange('');\n  }, [onFilterChange]);\n  useInputFocusOnOpen(filterRef, isOpen, resetFilter);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  sortChatIds,\n} from '../../global/helpers';\nimport { unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\nconst ForwardPicker: FC<OwnProps & StateProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  currentUserId,\n  isOpen,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const chatAndContactIds = useMemo(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, filter, currentUserId),\n      ...(contactIds ? filterUsersByName(contactIds, usersById, filter) : []),\n    ]), chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, contactIds, currentUserId, filter, isOpen, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    setForwardChatId({ id: userId });\n  }, [setForwardChatId]);\n\n  const renderingChatAndContactIds = useCurrentOrPrev(chatAndContactIds, true)!;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={renderingChatAndContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={exitForwardMode}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(ForwardPicker));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button className=\"confirm-dialog-button\" isText onClick={handleConfirm}>{lang('OK')}</Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url));\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay();\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName), ['emoji', 'simple_markdown'])}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useEffect } from '../../../lib/teact/teact';\nimport { IS_MAC_OS } from '../../../util/environment';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  useEffect(() => {\n    function handleCopy(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && getKeyFromEvent(e) === 'c') {\n        e.preventDefault();\n        copySelectedMessages();\n      }\n    }\n\n    if (isActive) {\n      document.addEventListener('keydown', handleCopy, false);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleCopy, false);\n    };\n  }, [copySelectedMessages, isActive]);\n};\n\nexport default useCopySelectedMessages;\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\nconst ReportMessageModal: FC<OwnProps> = ({\n  isOpen,\n  messageIds,\n  onClose,\n}) => {\n  const {\n    reportMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(ReportMessageModal);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n  } = getActions();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-reaction-filled\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const fullName = getUserFullName(user);\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"medium\" />\n                    <div className=\"title\">\n                      <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n                    </div>\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n    };\n  },\n)(ReactorListModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 240;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectAnimationData = useMedia(`sticker${effectAnimationId}`, !effectAnimationId, ApiMediaFormat.Lottie);\n\n  const [localEffectAnimationData, setLocalEffectAnimationData] = useState<string | undefined>();\n  useEffect(() => {\n    if (localEffectAnimation) {\n      getAnimationData(localEffectAnimation as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalEffectAnimationData(data);\n      });\n    }\n  }, [localEffectAnimation]);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        id={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        animationData={localEffectAnimationData || effectAnimationData}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(ANIMATED_STICKERS_PATHS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, loadContactList, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    deleteChatFolder,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const { loadProfilePhotos } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n)(SettingsEditProfile));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ canAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ canAutoPlayVideos: isChecked })}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n};\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onScreenSelect,\n  onReset,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    showDialog,\n  } = getActions();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [orderedFolderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n    };\n  },\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isUserId } from '../../../../global/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(\n    isActive,\n    onReset,\n    onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats,\n  );\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isVideo = stickerSet.isVideos;\n\n  const firstLetters = useMemo(() => {\n    if ((isVideo && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n    return undefined;\n  }, [isVideo, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isVideo ? (\n        <video src={mediaData} className={transitionClassNames} loop autoPlay />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n          clickArg={undefined}\n          noContextMenu\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ISettings, TimeFormat } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup, { IRadioOption } from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'shouldSuggestStickers' |\n    'shouldLoopStickers' |\n    'timeFormat'\n  )> & {\n    stickerSetIds?: string[];\n    stickerSetsById?: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  defaultReaction,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n    };\n  },\n)(SettingsGeneral));\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport useDebounce from '../../../hooks/useDebounce';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useDebounce(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n              runDebounced(() => playNotifySound(undefined, volume));\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => {\n            handleSettingsChange(e, 'contact', 'silent');\n          }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => {\n            handleSettingsChange(e, 'contact', 'showPreviews');\n          }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => {\n            handleSettingsChange(e, 'group', 'silent');\n          }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => {\n            handleSettingsChange(e, 'group', 'showPreviews');\n          }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => {\n            handleSettingsChange(e, 'broadcast', 'silent');\n          }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => {\n            handleSettingsChange(e, 'broadcast', 'showPreviews');\n          }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n}) => {\n  const {\n    loadAuthorizations,\n    terminateAuthorization,\n    terminateAllAuthorizations,\n  } = getActions();\n\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadContactList,\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, filter)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadContactList}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isChatGroup, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helper/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        return chat && ((isUserId(chat.id) && chat.id !== currentUserId) || isChatGroup(chat));\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  onScreenSelect,\n  availableReactions,\n  selectedReaction,\n}) => {\n  const { setDefaultReaction } = getActions();\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const options = availableReactions?.filter((l) => !l.isInactive).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || screen === SettingsScreens.QuickReaction\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    loadContactList,\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    loadContactList,\n    setGlobalSearchQuery,\n  } = getActions();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, memo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady, ApiMediaFormat.Lottie);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n  const { transitionClassNames: animatedClassNames } = useShowTransition(shouldRenderAnimated);\n  const { shouldRender: shouldRenderStatic, transitionClassNames: staticClassNames } = useShowTransition(\n    !isReady || !isAnimationLoaded, undefined, true,\n  );\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isReady ? [staticClassNames] : undefined,\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          id={`select_${reaction.reaction}`}\n          className={cn('animated', [animatedClassNames])}\n          animationData={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  FC, memo, useLayoutEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiUser } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onSendReaction: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onDownload,\n  onSaveGif,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined, onCopyMessages);\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"reactions\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'reactions' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? getUserFullName(seenByRecentUsers[0])\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { MessageListType } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsMessageProtected,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport buildClassName from '../../../util/buildClassName';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n  } = getActions();\n\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canShowSeenBy={canShowSeenBy}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount < seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: !isProtected && canCopy,\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n    };\n  },\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectStickerSetByShortName,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openCallFallbackConfirm,\n    toggleStatistics,\n  } = getActions();\n\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleCall = useCallback(() => {\n    openCallFallbackConfirm();\n    closeMenu();\n  }, [closeMenu, openCallFallbackConfirm]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n    };\n  },\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => a.mimeType.startsWith('audio/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonimous?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, shouldBeAnonimous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonimous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n  onStickerFave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n            onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n            isSavedMessages={isSavedMessages}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { selectIsChatWithSelf } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  isSavedMessages,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadRecentStickers();\n      sendMessageAction({ type: 'chooseSticker' });\n    }\n  }, [loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n          noContextMenu\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n    };\n  },\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    return { stickers, isSavedMessages };\n  },\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsIds?: string[];\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  chatId,\n  selectedSendAsId,\n  sendAsIds,\n}) => {\n  const { saveDefaultSendAs } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsIds && !sendAsIds.length) {\n      onClose();\n    }\n  }, [sendAsIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsIds?.map((id, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const fullName = user ? getUserFullName(user) : chat?.title;\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            onClick={() => handleUserSelect(id)}\n            focus={selectedSendAsIndex === index}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              <div className=\"title\">\n                <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n              </div>\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport renderText from '../common/helpers/renderText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isSomeModalOpen, onModalToggle,\n}) => {\n  const { loadStickers, toggleStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            clickArg={undefined}\n            onClick={openModal}\n            noContextMenu\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiChannelStatistics, ApiGroupStatistics, StatisticsOverviewItem } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('ChannelStats.Overview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPercentage) {\n                return (\n                  <td>\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td>\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  return (\n    <p className=\"StatisticsRecentMessage\">\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views)}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </p>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import React, {\n  FC, memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  useEffect(() => {\n    if (!isActive) {\n      loadedCharts.current = [];\n    }\n  }, [isActive]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken && {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            },\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n    })();\n  }, [graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return { statistics, dcId, isGroup };\n  },\n)(Statistics));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport {\n  ApiChat, ApiChatBannedRights, ApiExportedInvite, ApiMediaFormat,\n} from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = () => {\n    onScreenSelect(ManagementScreens.Invites);\n  };\n\n  const handleClickRequests = () => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  };\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"reactions\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, filter);\n  }, [chat.fullInfo?.members, currentUserId, filter]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiExportedInvite, ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = () => {\n    onScreenSelect(ManagementScreens.Invites);\n  };\n\n  const handleClickRequests = () => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  };\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"reactions\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n    };\n  },\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../global/selectors';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, loadContactList } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadContactList, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      openChat({ id });\n    }\n  }, [noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  useHistoryBack(isActive, onClose);\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  onClick={() => handleMemberClick(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES } from '../../../config';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('Invite').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack(isActive, onClose);\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `t.me/${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"inviteDuck\"\n                size={STICKER_SIZE_INVITES}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              icon=\"link\"\n              secondaryIcon=\"more\"\n              multiline\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                icon=\"link\"\n                secondaryIcon=\"more\"\n                multiline\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack(isActive, onClose);\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack(isActive, onClose);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    if (enabledReactions) {\n      setIsLoading(false);\n      setIsTouched(false);\n      setLocalEnabledReactions(enabledReactions);\n    }\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableReactions?.filter((l) => !l.isInactive).map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack(isActive, onClose);\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  about,\n  date,\n  isChannel,\n  user,\n  serverTimeOffset,\n  chatId,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport getAnimationData from '../../common/helpers/animatedAssets';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  const [animationData, setAnimationData] = useState<string>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('JoinRequest').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"section\">\n        <div className=\"section-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"joinRequestDucks\"\n              size={STICKER_SIZE_JOIN_REQUESTS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n        {Boolean(chat?.joinRequests?.length) && (\n          <div className=\"bulk-actions\">\n            <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n            <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n          </div>\n        )}\n      </div>\n      <div className=\"section\">\n        <div className=\"custom-scroll\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, lang('PaymentCheckoutMethod'))}\n        {paymentProvider && renderCheckoutItem(\n          buildClassName('provider', paymentProvider.toLowerCase()),\n          paymentProvider,\n          lang('PaymentCheckoutProvider'),\n        )}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, lang('PaymentShippingAddress'))}\n        {name && renderCheckoutItem('icon-user', name, lang('PaymentCheckoutName'))}\n        {phone && renderCheckoutItem('icon-phone', phone, lang('PaymentCheckoutPhoneNumber'))}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, lang('PaymentCheckoutShippingMethod'))}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('PaymentCardName')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getActions();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {\n        };\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isLoading}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n    };\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<string>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<string>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["cache","Map","useBlurSync","dataUri","blurredRef","useRef","isChanged","useOnChange","current","undefined","img","Image","src","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","delay","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","Boolean","createGhost","source","origin","ghost","document","createElement","classList","add","draggable","oncontextmenu","stopEvent","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","mediaData","isVideo","isZoomed","fileName","isAvatar","onCloseMediaViewer","onForward","onZoomToggle","downloadMessageMedia","cancelMessageMediaDownload","getActions","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","useCallback","lang","useLang","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","className","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","useFlag","seekerRef","isSeekingRef","isSeeking","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","map","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","loadedPercent","totalSize","formatFileSize","Menu","positionY","autoClose","onClose","rate","disabled","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","videoRef","setIsPlayed","IS_TOUCH_ENV","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseMove","handleMouseOut","target","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","ownProps","chatId","threadId","messageId","avatarOwnerId","profilePhotoIndex","mediaViewer","selectChatMessage","senderId","avatarOwner","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","isFooterHidden","onFooterClick","setIsFooterHidden","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isFromSharedMedia","isFromSearch","isGhostAnimation","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","renderPhoto","calculateMediaViewerDimensions","textParts","renderMessageText","hasFooter","onContextMenu","imageSize","canDrag","Spinner","renderVideoPreview","alt","ANIMATION_DURATION","cancelAnimation","SwipeDirection","getMessageId","selectMessage","rest","containerRef","activeSlideRef","transformRef","x","y","scale","swipeDirectionRef","isActiveRef","activeMessageId","setActiveMessageId","setTransform","setIsActive","debounceSetMessage","useDebounce","debounceSwipeDirection","debounceActive","handleToggleFooterVisibility","isFooter","innerHeight","pageY","pageX","innerWidth","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","timingFunctions","onUpdate","isNotPassive","excludedClosestSelector","checkIfControlTarget","arePropsShallowEqual","event","captureEvent","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","abs","absOffsetY","h","Vertical","Horizontal","onZoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MAX_ZOOM","scaleFactor","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","centerX","centerY","absX","absY","boundaries","s1","x1","y1","k","Vx","Vy","minOffsetX","maxOffsetX","right","minOffsetY","top","maxOffsetY","bottom","dirX","nextMessageId","previousMessageId","offsetX","offsetY","getAnimationStyle","checkIfInsideSelector","selector","matches","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","zoomLevel","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","onMouseDown","newDragData","onMouseUp","deltaX","deltaY","getNewMatrixData","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","chat","renderText","formatMediaDateTime","date","Transition","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","setZoomLevel","step","type","Number","settings","byKey","chatMessages","collectionIds","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","singleMessageId","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","setPanDelta","getMessageFileName","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handlePan","useHistoryBack","handleKeyDown","shouldCloseOnVideo","ShowTransition","isRtl","activeKey","name","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","loadMore","onFilterChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","resetFilter","useInputFocusOnOpen","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","i","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","setForwardChatId","exitForwardMode","setFilter","markIsShown","unmarkIsShown","chatAndContactIds","priorityIds","unique","chatIds","getCanPostInChat","MAIN_THREAD_ID","usersById","getGlobal","users","sortChatIds","filterChatsByName","filterUsersByName","handleSelectUser","renderingChatAndContactIds","useCurrentOrPrev","getErrorHeader","error","isSlowMode","hasErrorKey","pick","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","showNotification","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","handleClose","handleSubmit","getUserStatus","label","Checkbox","checked","onCheck","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","handleCopy","IS_MAC_OS","metaKey","ctrlKey","getKeyFromEvent","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleDownload","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","renderButton","destructive","seenByModal","memberIds","seenByUserIds","openChat","closeSeenByModal","handleClick","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","isClosing","startClosing","stopClosing","chosenTab","setChosenTab","canShowFilters","count","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","l","reaction","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","find","ReactionStaticEmoji","fullName","getUserFullName","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","ANIMATED_STICKERS_PATHS","stopActiveEmojiInteraction","isHiding","startHiding","isPlaying","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectAnimationData","localEffectAnimationData","setLocalEffectAnimationData","getAnimationData","then","data","startSize","isReversed","AnimatedSticker","animationData","play","quality","IS_ANDROID","noLoop","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","getChatTitle","isVerified","VerifiedIcon","Link","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","currentType","isVoice","activeDownloads","theme","selectTheme","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","currentFirstName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","orderedFolderIds","foldersById","recommended","recommendedChatFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","STICKER_SIZE_FOLDER_SETTINGS","pill","fluid","narrow","multiline","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","useMediaTransition","firstLetters","getFirstLetters","hasThumbnail","isVideos","IS_WEBM_SUPPORTED","stickers","firstSticker","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","noContextMenu","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","defaultReaction","appConfig","messageTextSize","messageSendKeyCombo","shouldSuggestStickers","shouldLoopStickers","timeFormat","stickerSettingsRef","observeIntersectionForCovers","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","stickerSets","installedDate","fromSticker","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","context","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","handleChange","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","isChatGroup","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","availableReactions","selectedReaction","setDefaultReaction","isInactive","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","clientY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","isActivated","activate","deactivate","markAnimationLoaded","shouldRenderAnimated","animatedClassNames","shouldRenderStatic","staticClassNames","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onDownload","onSaveGif","onShowSeenBy","onShowReactors","onCopyMessages","menuRef","scrollableRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","noReactions","withReactions","markIsReady","unmarkIsReady","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","option","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","recentReactions","msg","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","requestCalendar","calendar","useSchedule","stickerSetAccessHash","isScheduleRequested","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canAddContact","getCanAddContact","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openCallFallbackConfirm","toggleStatistics","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","shouldBeAnonimous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","favoriteStickers","onStickerSelect","onStickerUnfave","onStickerFave","stickersPerRow","STICKER_SIZE_PICKER","favoriteStickerIdsSet","noAnimate","onUnfaveClick","has","onFaveClick","stickerSetIntersections","favorite","recentStickers","addedSetIds","shouldPlay","loadRecentStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","noPopulatedSets","stickerSetEl","handleStickerSelect","handleStickerUnfave","handleStickerFave","fullClassName","buttonClassName","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","handleMouseDown","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","statistics","period","formatFullDate","row","cell","field","percentage","change","isChangeNegative","renderOverviewItemValue","views","formatDateTimeToString","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","acc","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","maxLength","noAdmins","adminIds","shouldUseSearchResults","listedIds","noScrollRestore","memberId","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","useInterval","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","secondaryIcon","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","allow","sandbox","SUPPORTED_PROVIDERS","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","canRenderFooter","PaymentStep","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","cropperResultOptions","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","accept","URL","revokeObjectURL","createObjectURL"],"sourceRoot":""}