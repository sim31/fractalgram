{"version":3,"file":"5769.b278d0709dca59310cd8.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/selection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.module.scss?adba","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/BotAttachModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithText', (global, actions, payload) => {\n  const { chatId, text } = payload;\n\n  actions.openChat({ id: chatId });\n\n  return {\n    ...global,\n    openChatWithText: {\n      chatId,\n      text,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectScheduledMessages,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('changeForwardRecipient', (global) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  };\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noAuthors: payload,\n      noCaptions: payload && global.forwardMessages.noCaptions, // `noCaptions` cannot be true when `noAuthors` is false\n    },\n  };\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noCaptions: payload,\n      noAuthors: payload, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyTextToClipboard(result.join('\\n'));\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ApiError } from '../../../api/types';\n\nimport { GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentMessageList, selectIsTrustedBot,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\n\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      [isCustomEmoji ? 'customEmoji' : 'added']: {\n        setIds: order,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\naddActionHandler('closeStickerSetModal', (global) => {\n  return {\n    ...global,\n    openedStickerSetShortName: undefined,\n  };\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload) => {\n  const { setIds } = payload;\n  return {\n    ...global,\n    openedCustomEmojiSetIds: setIds,\n  };\n});\n\naddActionHandler('closeCustomEmojiSets', (global) => {\n  return {\n    ...global,\n    openedCustomEmojiSetIds: undefined,\n  };\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload) => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const { volume, isMuted, playbackRate } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_STATE } from '../../initialState';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  migrateCache(global, cloneDeep(INITIAL_STATE));\n\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport { getMessageOriginalId, getUserFullName, isServiceNotificationMessage } from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const maxId = chat.lastMessage?.id;\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions,\n  } = global.forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload) => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsIds: result.ids });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  if (!chat.unreadMentionsCount) {\n    return;\n  }\n\n  const unreadMentionsCount = chat.unreadMentionsCount - messageIds.length;\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  if (!unreadMentions.length && unreadMentionsCount) {\n    actions.fetchUnreadMentions({\n      chatId: chat.id,\n      offsetId: Math.max(...messageIds),\n    });\n  }\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatId', async (global, actions, payload) => {\n  const { id } = payload;\n  let user = selectUser(global, id);\n  if (user && selectForwardsContainVoiceMessages(global)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id, accessHash });\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: getTranslation('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n      });\n      return;\n    }\n  }\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiStickerSetInfo, ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global, actions) => {\n  void loadStickerSets(global.stickers.added.hash);\n  void loadCustomEmojiSets(global.customEmojis.added.hash);\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadPremiumSetStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadPremiumGifts', async () => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    premiumGifts: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadCustomEmojiSets(hash?: string) {\n  const addedCustomEmojis = await callApi('fetchCustomEmojiSets', { hash });\n  if (!addedCustomEmojis) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  ));\n}\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetInfo: ApiStickerSetInfo) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if ('shortName' in stickerSetInfo && global.openedStickerSetShortName === stickerSetInfo.shortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: getTranslation('StickerPack.ErrorNotFound'),\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable });\n  setGlobal(global);\n\n  if (isUsernameAvailable === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async () => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeWebSessions: {\n      byHash: result,\n      orderedHashes: Object.keys(result),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectChatBot(global, message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  const text = `@${botSender.username} ${query}`;\n\n  if (isSamePeer) {\n    actions.openChatWithText({ chatId: chat.id, text });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    switchBotInline: {\n      query,\n      botUsername: botSender.username,\n    },\n  };\n});\n\naddActionHandler('resetSwitchBotInline', (global) => {\n  return {\n    ...global,\n    switchBotInline: undefined,\n  };\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachMenuBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachMenuBots(hash);\n});\n\naddActionHandler('toggleBotInAttachMenu', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleBotInAttachMenu(bot, isEnabled);\n});\n\nasync function toggleBotInAttachMenu(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleBotInAttachMenu', { bot, isEnabled });\n  await loadAttachMenuBots();\n}\n\nasync function loadAttachMenuBots(hash?: string) {\n  const result = await callApi('loadAttachMenuBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachMenuBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      botAttachRequest: {\n        botId,\n        chatId,\n        startParam,\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmBotAttachRequest', async (global, actions) => {\n  const { botAttachRequest } = global;\n  if (!botAttachRequest) return;\n\n  const { botId, chatId, startParam } = botAttachRequest;\n\n  setGlobal({\n    ...global,\n    botAttachRequest: undefined,\n  });\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  await toggleBotInAttachMenu(bot, true);\n\n  actions.callAttachMenuBot({ chatId, botId, startParam });\n});\n\naddActionHandler('closeBotAttachRequestModal', (global) => {\n  return {\n    ...global,\n    botAttachRequest: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\nimport type { ApiChat, ApiRequestInputInvoice } from '../../../api/types';\n\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) return;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) return;\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) return;\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n  if (!invoice) return;\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice) {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n  const { form, invoice } = result;\n  let global = setPaymentForm(getGlobal(), form);\n  let step = PaymentStep.PaymentInfo;\n  const {\n    shippingAddressRequested, nameRequested, phoneRequested, emailRequested,\n  } = global.payment.invoice || {};\n  if (shippingAddressRequested || nameRequested || phoneRequested || emailRequested) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return undefined;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  void sendPaymentForm(requestInputInvoice, formId, {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  }, requestInfoId, shippingOptionId);\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'pending',\n    },\n  };\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/[^\\d]+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/[^\\d]+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  inputInvoice: ApiRequestInputInvoice,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n\n  if (result === true) {\n    let global = clearPayment(getGlobal());\n    global = {\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'paid',\n      },\n    };\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload) => {\n  const { forUserId } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: result.promo.currency,\n      monthlyAmount: result.promo.monthlyAmount,\n    },\n  });\n});\n\naddActionHandler('closeGiftPremiumModal', (global) => {\n  setGlobal({\n    ...global,\n    giftPremiumModal: { isOpen: false },\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport type { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport type { ApiChat } from '../../api/types';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport type { ApiAppConfig } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.find((l) => l.isUnread);\n\n        if (!unread) return undefined;\n\n        const reaction = unread?.reaction;\n\n        return [messageId, {\n          messageId,\n          reaction,\n        }];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      }\n\n      setGlobal(updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(update.message.id && update.message.hasUnreadMention && {\n          unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1,\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id],\n        }),\n      }));\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        const lastNotification = global.serviceNotifications.sort((a, b) => b.id - a.id)?.[0];\n        const serviceNotifications = lastNotification ? [{\n          ...lastNotification,\n          isHidden: true,\n        }] : [];\n\n        setGlobal({\n          ...global,\n          serviceNotifications,\n        });\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, getGlobal());\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { clearPayment } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n      // On the production host, the payment frame receives a message with the payment event,\n      // after which the payment form closes. In other cases, the payment form must be closed manually.\n      if (!IS_PRODUCTION_HOST) {\n        global = clearPayment(global);\n      }\n\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return !IS_PRODUCTION_HOST ? global : undefined;\n      }\n\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <MenuItem\n              icon=\"permissions\"\n              onClick={handleChangelogClick}\n            >\n              Beta Changelog\n            </MenuItem>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder(FIRST_FOLDER_INDEX, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || isInAllChatsFolder) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div className=\"ChatFolders\">\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchQuery({ query: '' });\n      setGlobalSearchDate({ date: undefined });\n      setGlobalSearchChatId({ id: undefined });\n      resetChatCreation();\n      setTimeout(() => {\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n    } = global;\n\n    const isChatOpen = Boolean(selectCurrentChat(global)?.id);\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n    showNotification,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const lang = useLang();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (shouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, shouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys({\n    'Mod+F': handleHotkeySearchClick,\n  });\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && shouldSendJoinRequest && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang('ChannelJoinRequest')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n    };\n  },\n)(HeaderActions));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              withVideoAvatar\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForAnimation?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  observeIntersectionForAnimation,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  memoFirstUnreadIdRef,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForAnimation);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isGift && 'premium-gift',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {isGift && renderGift()}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            tgsUrl={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// eslint-disable-next-line max-len\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const {\n    isLottie, stickerSetInfo, isVideo, hasEffect,\n  } = sticker;\n  const canDisplayVideo = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n\n  const previewMediaHash = isVideo && !canDisplayVideo && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useThumbnail(sticker);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !shouldLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (!isVideo || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isVideo, shouldPlay]);\n\n  useEffect(() => {\n    if (hasEffect && shouldPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, shouldPlayEffect, onPlayEffect, shouldPlay, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? handleClick : undefined}>\n      {(!isMediaReady || (isVideo && !canDisplayVideo)) && (\n        <img\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isVideo && (\n        <img\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isVideo && canDisplayVideo && isMediaReady && (\n        <video\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          disablePictureInPicture\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          tgsUrl={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      {hasEffect && shouldLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport safePlay from '../../../util/safePlay';\nimport { getActions } from '../../../global';\nimport useMedia from '../../../hooks/useMedia';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\n\nconst SIZE = 104;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const style = `width: ${SIZE}px; height: ${SIZE}px;`;\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: SIZE,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: SIZE,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction,\n  ]);\n\n  return {\n    ref,\n    size: SIZE,\n    style,\n    handleClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          style={aspectRatio}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n              noVideo\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (photoUrl) {\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank', 'noopener')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffect(() => {\n    if (shouldRenderText) return;\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (mapBlobUrl) {\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [isOwn, isInSelectMode, isSelected, theme, mapBlobUrl, shouldRenderText]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n              noVideo\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" noVideo />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport DotAnimation from '../../common/DotAnimation';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && !isProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReaction) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(\n    message,\n    highlight,\n    isEmojiOnlyMessage(customShape),\n    undefined,\n    undefined,\n    isProtected,\n    observeIntersectionForAnimatedStickers,\n  );\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n    const isAvatarPremium = avatarUser?.isPremium;\n\n    return (\n      <>\n        <Avatar\n          size=\"small\"\n          user={avatarUser}\n          chat={avatarChat}\n          text={hiddenName}\n          lastSyncTime={lastSyncTime}\n          onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n          observeIntersection={observeIntersectionForMedia}\n        />\n        {isAvatarPremium && <PremiumIcon className=\"chat-avatar-premium\" />}\n      </>\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            noUserColors={isOwn}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo, transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            observeIntersectionForAnimation={observeIntersectionForAnimatedStickers}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiBotInfo, ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <video\n                  src={botInfoGifUrl}\n                  loop\n                  autoPlay\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 0) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n      const shouldShrink = width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE;\n\n      if (shouldShrink || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\nimport type { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments, isActive]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getActions();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={onActivate}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JDpb9xn3FmOzR6pVNK6n\",\"compact\":\"kq_1N12wqP7sbQ3EhVqO\",\"image\":\"Bo8mxv82IZ6uf0lrclLq\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachmentMenuBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachmentMenuBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((l) => {\n      l.style.stroke = color;\n      l.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachmentMenuBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachMenuBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotIcon from './AttachmentMenuBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachMenuBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachmentMenuBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachMenuBot, toggleBotInAttachMenu } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleBotInAttachMenu({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleBotInAttachMenu]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachmentMenuBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachMenuBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachmentMenuBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotItem from './AttachmentMenuBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachMenuBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachMenuBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachMenuBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bot' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachMenuBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachmentMenuBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = useCallback(() => {\n    unmarkForceOpen();\n    onClose();\n  }, [onClose, unmarkForceOpen]);\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    const textEntities = message?.content.text?.entities;\n    if (!message || !isForwarding || !textEntities?.length || !noAuthors || isCurrentUserPremium) return message;\n\n    const filteredEntities = textEntities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: {\n          text: message.content.text!.text,\n          entities: filteredEntities,\n        },\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(false)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(true)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(false)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(true)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectAttachMenuPeerType,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedText?: string;\n    attachMenuBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedText,\n  botMenuButton,\n  attachMenuBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n    resetOpenChatWithText,\n    callAttachMenuBot,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (newAttachments && newAttachments.some((l) => l.size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal],\n  );\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(isForCurrentMessageList, insertTextAndUpdateCursor, handleSetAttachments, editingMessage);\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, [handleSetAttachments]);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, captionLimit,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachMenuBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachMenuBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedText) {\n      setHtml(requestedText);\n      resetOpenChatWithText();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedText, resetOpenChatWithText]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        captionLimit={captionLimit}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {(isChatWithBot && isBotMenuButtonCommands\n            && botCommands !== false && !activeVoiceRecording && !editingMessage) && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n                noVideo\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachMenuBots={attachMenuBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedText = selectRequestedText(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedText,\n      attachMenuBots: global.attachMenu.bots,\n      attachMenuPeerType: selectAttachMenuPeerType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      isGiftPremiumModalOpen: global.giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport type { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport {\n  NewChatMembersProgress, MediaViewerOrigin, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport type { GlobalState } from '../../global/types';\n\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\nconst GameModal: FC<OwnProps> = ({ openedGame, gameTitle }) => {\n  const { closeGame, showNotification, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        showNotification({ message: 'Unsupported game action' });\n      }\n    } catch (e) {\n      // Ignore messages from other origins\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu, showNotification]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(GameModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotAttachModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotAttachModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotAttachModal = useModuleLoader(Bundles.Extra, 'BotAttachModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotAttachModal ? <BotAttachModal {...props} /> : undefined;\n};\n\nexport default memo(BotAttachModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUpdateAuthorizationStateType, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport BotAttachModal from './BotAttachModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  connectionState?: ApiUpdateConnectionStateType;\n  authState?: ApiUpdateAuthorizationStateType;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  botAttachRequestBot?: ApiUser;\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  connectionState,\n  authState,\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  botAttachRequestBot,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    sync,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadAppConfig,\n    loadAttachMenuBots,\n    loadContactList,\n    loadCustomEmojis,\n    closePaymentModal,\n    clearReceipt,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n      sync();\n    }\n  }, [connectionState, authState, sync]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachMenuBots();\n      loadContactList();\n      loadPremiumGifts();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachMenuBots, loadContactList,\n    loadPremiumGifts,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId && !isPhoneCallActive) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId, isPhoneCallActive]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <BotAttachModal bot={botAttachRequestBot} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      botAttachRequest,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      connectionState: global.connectionState,\n      authState: global.authState,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      openedCustomEmojiSetIds: global.openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      botAttachRequestBot: botAttachRequest && selectUser(global, botAttachRequest.botId),\n      webApp: global.webApp,\n      currentUser,\n      urlAuth: global.urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { transitionClassNames, shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.container, transitionClassNames)}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","openChatWithText","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectScheduledMessages","selectChatMessages","result","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","push","getSenderTitle","getMessageSummaryText","copyTextToClipboard","join","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","order","isCustomEmoji","setIds","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","Date","now","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","customEmojis","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","status","payment","clearPayment","closeInvoice","error","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_STATE","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","poll","option","offset","shouldResetVoters","user","offsets","nextOffset","loadPollOptionResults","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmoji","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","unreadMentionsCount","fetchUnreadMentions","markMessagesRead","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","getActions","shortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","updateGifSearch","addedStickers","updateStickerSets","sets","loadStickerSets","added","addedCustomEmojis","loadCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","loadFeaturedStickers","premiumGifts","cachedSet","selectStickerSet","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","stickerSetId","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleBotInAttachMenu","bot","isEnabled","loadAttachMenuBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","validateRequestedInfo","inputInvoice","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","getPaymentForm","form","invoice","setPaymentForm","step","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","botUsername","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","botAttachRequest","callAttachMenuBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","requestInputInvoice","requestedInfoId","sendPaymentForm","save","selectStripeCredentials","selectSmartGlocalCredentials","isClosed","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","defaultReaction","reactors","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","currentReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","lastNotification","isHidden","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","r","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","reorderStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","maxFolders","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","handleMouseEnter","handleMouseLeave","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","classList","remove","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","searchInput","handleHotkeySearchClick","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","Promise","resolve","onload","scale","then","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","_","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","isChatWithBot","isSelectModeActive","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","useLayoutEffect","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","observeIntersection","observeIntersectionForAnimation","isEmbedded","appearanceOrder","isLastInList","memoFirstUnreadIdRef","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isVisible","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","role","months","AnimatedIconFromSticker","play","noLoop","nonInteractive","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","activeReaction","isInMeta","stopActiveReaction","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","tgsUrl","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","isLottie","isVideo","hasEffect","canDisplayVideo","IS_WEBM_SUPPORTED","isMemojiSticker","isPlayingEffect","startPlayingEffect","stopPlayingEffect","shouldLoad","mediaHash","mediaHashEffect","previewMediaHash","previewUrl","getMessageMediaFormat","effectBlobUrl","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","handleEffectEnded","safePlay","openModal","actionText","autoPlay","playsInline","disablePictureInPicture","loop","muted","isLowPriority","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","soundId","selectAnimatedEmojiSound","forceLoadPreview","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","Audio","once","performance","interactionMessageId","useAnimatedEmoji","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","noLoad","forcePreview","LIKE_STICKER_ID","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","withAspectRatio","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","aspectRatio","toFixed","ProgressSpinner","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","useVideoAutoPause","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","noVideo","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","formatCurrency","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","useTimeout","useInterval","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","videoClassName","renderIcon","recentReplierIds","recentRepliers","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","animatedEmoji","selectIsDownloading","actualThreadInfo","hasUnreadReaction","selectIsMessageProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","isAvatarPremium","PremiumIcon","renderAvatar","textContentClass","senderColor","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","markMentionsRead","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","reactionIds","entry","dataset","useBackgroundMode","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isBotInfoEmpty","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","shouldShrink","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","customIcon","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachMenuBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","peerTypes","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","noCompact","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","textEntities","filteredEntities","entity","ApiMessageEntityTypes","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedText","selectRequestedText","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectAttachMenuPeerType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithText","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","handleSetAttachments","newValue","newAttachments","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","trim","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertHtmlAndUpdateCursor","newHtml","EDITABLE_INPUT_ID","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","insertTextAndUpdateCursor","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","getTextWithEntitiesAsHtml","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","getFilesFromDataTransferItems","all","file","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","BotAttachModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","buildStyle","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","gameMessage","currentUser","authState","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","botAttachRequestBot","isPremiumModalOpen","limitReached","isReceiptModalOpen","sync","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","closePaymentModal","clearReceipt","langCode","prevLastSyncTime","LOCATION_HASH","processDeepLink","decodeURIComponent","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","toggle","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}