{"version":3,"file":"2305.37640bbaa617e14f9a80.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/Avatar.tsx","webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/components/ui/InfiniteScroll.tsx","webpack://telegram-t/./src/components/ui/Modal.tsx","webpack://telegram-t/./src/util/trapFocus.ts","webpack://telegram-t/./src/components/ui/Portal.ts","webpack://telegram-t/./src/global/selectors/limits.ts","webpack://telegram-t/./src/hooks/useInfiniteScroll.ts","webpack://telegram-t/./src/hooks/useInterval.ts","webpack://telegram-t/./src/util/directInputManager.ts","webpack://telegram-t/./src/util/resetScroll.ts"],"sourcesContent":["import type { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC, TeactNode } from '../../lib/teact/teact';\nimport type {\n  ApiChat, ApiPhoto, ApiUser, ApiUserStatus,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { AnimationLevel } from '../../types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { ANIMATION_LEVEL_MAX, IS_TEST } from '../../config';\nimport { VIDEO_AVATARS_DISABLED } from '../../util/environment';\nimport {\n  getChatAvatarHash,\n  getChatTitle,\n  getUserColorKey,\n  getUserFullName,\n  isUserId,\n  isChatWithRepliesBot,\n  isDeletedUser,\n  isUserOnline,\n} from '../../global/helpers';\nimport { getFirstLetters } from '../../util/textFormat';\nimport buildClassName, { createClassNameBuilder } from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './Avatar.scss';\n\nconst LOOP_COUNT = 3;\n\nconst cn = createClassNameBuilder('Avatar');\ncn.media = cn('media');\ncn.icon = cn('icon');\n\ntype OwnProps = {\n  className?: string;\n  size?: 'micro' | 'tiny' | 'small' | 'medium' | 'large' | 'jumbo';\n  chat?: ApiChat;\n  user?: ApiUser;\n  photo?: ApiPhoto;\n  userStatus?: ApiUserStatus;\n  text?: string;\n  isSavedMessages?: boolean;\n  withVideo?: boolean;\n  noLoop?: boolean;\n  animationLevel?: AnimationLevel;\n  lastSyncTime?: number;\n  observeIntersection?: ObserveFn;\n  onClick?: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>, hasMedia: boolean) => void;\n};\n\nconst Avatar: FC<OwnProps> = ({\n  className,\n  size = 'large',\n  chat,\n  user,\n  photo,\n  userStatus,\n  text,\n  isSavedMessages,\n  withVideo,\n  noLoop,\n  lastSyncTime,\n  animationLevel,\n  observeIntersection,\n  onClick,\n}) => {\n  const { loadFullUser } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const videoLoopCountRef = useRef(0);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const isDeleted = user && isDeletedUser(user);\n  const isReplies = user && isChatWithRepliesBot(user.id);\n  let imageHash: string | undefined;\n  let videoHash: string | undefined;\n\n  const shouldShowVideo = (\n    !VIDEO_AVATARS_DISABLED && animationLevel === ANIMATION_LEVEL_MAX\n    && isIntersecting && withVideo && user?.isPremium && user?.hasVideoAvatar\n  );\n  const profilePhoto = user?.fullInfo?.profilePhoto;\n  const shouldLoadVideo = shouldShowVideo && profilePhoto?.isVideo;\n\n  const shouldFetchBig = size === 'jumbo';\n  if (!isSavedMessages && !isDeleted) {\n    if (user) {\n      imageHash = getChatAvatarHash(user, shouldFetchBig ? 'big' : undefined);\n    } else if (chat) {\n      imageHash = getChatAvatarHash(chat, shouldFetchBig ? 'big' : undefined);\n    } else if (photo) {\n      imageHash = `photo${photo.id}?size=m`;\n    }\n\n    if (shouldLoadVideo) {\n      videoHash = getChatAvatarHash(user!, undefined, 'video');\n    }\n  }\n\n  const imgBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const videoBlobUrl = useMedia(videoHash, !shouldLoadVideo, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const hasBlobUrl = Boolean(imgBlobUrl || videoBlobUrl);\n  const shouldPlayVideo = Boolean(isIntersecting && videoBlobUrl);\n\n  const { transitionClassNames } = useShowTransition(hasBlobUrl, undefined, hasBlobUrl, 'slow');\n\n  const handleVideoEnded = useCallback((e) => {\n    const video = e.currentTarget;\n    if (!videoBlobUrl) return;\n\n    videoLoopCountRef.current += 1;\n    if (videoLoopCountRef.current >= LOOP_COUNT || noLoop) {\n      video.style.display = 'none';\n    }\n  }, [noLoop, videoBlobUrl]);\n\n  const userId = user?.id;\n  useEffect(() => {\n    if (userId && shouldShowVideo && !profilePhoto) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, profilePhoto, userId, shouldShowVideo]);\n\n  const lang = useLang();\n\n  let content: TeactNode | undefined;\n  const author = user ? getUserFullName(user) : (chat ? getChatTitle(lang, chat) : text);\n\n  if (isSavedMessages) {\n    content = <i className={buildClassName(cn.icon, 'icon-avatar-saved-messages')} role=\"img\" aria-label={author} />;\n  } else if (isDeleted) {\n    content = <i className={buildClassName(cn.icon, 'icon-avatar-deleted-account')} role=\"img\" aria-label={author} />;\n  } else if (isReplies) {\n    content = <i className={buildClassName(cn.icon, 'icon-reply-filled')} role=\"img\" aria-label={author} />;\n  } else if (hasBlobUrl) {\n    content = (\n      <>\n        <img\n          src={imgBlobUrl}\n          className={buildClassName(cn.media, 'avatar-media', transitionClassNames, videoBlobUrl && 'poster')}\n          alt={author}\n          decoding=\"async\"\n        />\n        {shouldPlayVideo && (\n          <OptimizedVideo\n            canPlay\n            src={videoBlobUrl}\n            className={buildClassName(cn.media, 'avatar-media')}\n            muted\n            autoPlay\n            disablePictureInPicture\n            playsInline\n            onEnded={handleVideoEnded}\n          />\n        )}\n      </>\n    );\n  } else if (user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isUserId(chat.id) ? 2 : 1);\n  } else if (text) {\n    content = getFirstLetters(text, 2);\n  }\n\n  const isOnline = !isSavedMessages && user && userStatus && isUserOnline(user, userStatus);\n  const fullClassName = buildClassName(\n    `Avatar size-${size}`,\n    className,\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    isReplies && 'replies-bot-account',\n    isOnline && 'online',\n    onClick && 'interactive',\n    (!isSavedMessages && !imgBlobUrl) && 'no-photo',\n  );\n\n  const hasMedia = Boolean(isSavedMessages || imgBlobUrl);\n  const handleClick = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (onClick) {\n      onClick(e, hasMedia);\n    }\n  }, [onClick, hasMedia]);\n\n  const senderId = (user || chat) && (user || chat)!.id;\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      data-test-sender-id={IS_TEST ? senderId : undefined}\n      aria-label={typeof content === 'string' ? author : undefined}\n    >\n      {typeof content === 'string' ? renderText(content, [size === 'jumbo' ? 'hq_emoji' : 'emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(Avatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { selectCurrentChat, selectUser } from '../../global/selectors';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\nconst DeleteMemberModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n}) => {\n  const { deleteChatMember } = getActions();\n\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n)(DeleteMemberModal));\n","import type { RefObject, UIEvent } from 'react';\nimport { LoadMoreDirection } from '../../types';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useLayoutEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport resetScroll from '../../util/resetScroll';\nimport { IS_ANDROID } from '../../util/environment';\nimport buildStyle from '../../util/buildStyle';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLDivElement>;\n  className?: string;\n  items?: any[];\n  itemSelector?: string;\n  preloadBackwards?: number;\n  sensitiveArea?: number;\n  withAbsolutePositioning?: boolean;\n  maxHeight?: number;\n  noScrollRestore?: boolean;\n  noScrollRestoreOnTop?: boolean;\n  noFastList?: boolean;\n  cacheBuster?: any;\n  children: React.ReactNode;\n  onLoadMore?: ({ direction }: { direction: LoadMoreDirection; noScroll?: boolean }) => void;\n  onScroll?: (e: UIEvent<HTMLDivElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<any>) => void;\n  onDragOver?: (e: React.DragEvent<HTMLDivElement>) => void;\n  onDragLeave?: (e: React.DragEvent<HTMLDivElement>) => void;\n};\n\nconst DEFAULT_LIST_SELECTOR = '.ListItem';\nconst DEFAULT_PRELOAD_BACKWARDS = 20;\nconst DEFAULT_SENSITIVE_AREA = 800;\n\nconst InfiniteScroll: FC<OwnProps> = ({\n  ref,\n  className,\n  items,\n  itemSelector = DEFAULT_LIST_SELECTOR,\n  preloadBackwards = DEFAULT_PRELOAD_BACKWARDS,\n  sensitiveArea = DEFAULT_SENSITIVE_AREA,\n  withAbsolutePositioning,\n  maxHeight,\n  // Used to turn off restoring scroll position (e.g. for frequently re-ordered chat or user lists)\n  noScrollRestore = false,\n  noScrollRestoreOnTop = false,\n  noFastList,\n  // Used to re-query `listItemElements` if rendering is delayed by transition\n  cacheBuster,\n  children,\n  onLoadMore,\n  onScroll,\n  onKeyDown,\n  onDragOver,\n  onDragLeave,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  let containerRef = useRef<HTMLDivElement>(null);\n  if (ref) {\n    containerRef = ref;\n  }\n\n  const stateRef = useRef<{\n    listItemElements?: NodeListOf<HTMLDivElement>;\n    isScrollTopJustUpdated?: boolean;\n    currentAnchor?: HTMLDivElement | undefined;\n    currentAnchorTop?: number;\n  }>({});\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(() => {\n    if (!onLoadMore) {\n      return [];\n    }\n\n    return [\n      debounce((noScroll = false) => {\n        onLoadMore({ direction: LoadMoreDirection.Backwards, noScroll });\n      }, 1000, true, false),\n      debounce(() => {\n        onLoadMore({ direction: LoadMoreDirection.Forwards });\n      }, 1000, true, false),\n    ];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onLoadMore, items]);\n\n  // Initial preload\n  useEffect(() => {\n    if (!loadMoreBackwards) {\n      return;\n    }\n\n    if (preloadBackwards > 0 && (!items || items.length < preloadBackwards)) {\n      loadMoreBackwards(true);\n      return;\n    }\n\n    const { scrollHeight, clientHeight } = containerRef.current!;\n    if (clientHeight && scrollHeight <= clientHeight) {\n      loadMoreBackwards();\n    }\n  }, [items, loadMoreBackwards, preloadBackwards]);\n\n  // Restore `scrollTop` after adding items\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    const state = stateRef.current;\n\n    state.listItemElements = container.querySelectorAll<HTMLDivElement>(itemSelector);\n\n    let newScrollTop;\n\n    if (state.currentAnchor && Array.from(state.listItemElements).includes(state.currentAnchor)) {\n      const { scrollTop } = container;\n      const newAnchorTop = state.currentAnchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - state.currentAnchorTop!);\n    } else {\n      const nextAnchor = state.listItemElements[0];\n      if (nextAnchor) {\n        state.currentAnchor = nextAnchor;\n        state.currentAnchorTop = nextAnchor.getBoundingClientRect().top;\n      }\n    }\n\n    if (withAbsolutePositioning || noScrollRestore) {\n      return;\n    }\n\n    if (noScrollRestoreOnTop && container.scrollTop === 0) {\n      return;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    state.isScrollTopJustUpdated = true;\n  }, [items, itemSelector, noScrollRestore, noScrollRestoreOnTop, cacheBuster, withAbsolutePositioning]);\n\n  const handleScroll = useCallback((e: UIEvent<HTMLDivElement>) => {\n    if (loadMoreForwards && loadMoreBackwards) {\n      const {\n        isScrollTopJustUpdated, currentAnchor, currentAnchorTop,\n      } = stateRef.current;\n      const listItemElements = stateRef.current.listItemElements!;\n\n      if (isScrollTopJustUpdated) {\n        stateRef.current.isScrollTopJustUpdated = false;\n        return;\n      }\n\n      const listLength = listItemElements.length;\n      const container = containerRef.current!;\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const top = listLength ? listItemElements[0].offsetTop : 0;\n      const isNearTop = scrollTop <= top + sensitiveArea;\n      const bottom = listLength\n        ? listItemElements[listLength - 1].offsetTop + listItemElements[listLength - 1].offsetHeight\n        : scrollHeight;\n      const isNearBottom = bottom - (scrollTop + offsetHeight) <= sensitiveArea;\n      let isUpdated = false;\n\n      if (isNearTop) {\n        const nextAnchor = listItemElements[0];\n        if (nextAnchor) {\n          const nextAnchorTop = nextAnchor.getBoundingClientRect().top;\n          const newAnchorTop = currentAnchor?.offsetParent && currentAnchor !== nextAnchor\n            ? currentAnchor.getBoundingClientRect().top\n            : nextAnchorTop;\n          const isMovingUp = (\n            currentAnchor && currentAnchorTop !== undefined && newAnchorTop > currentAnchorTop\n          );\n\n          if (isMovingUp) {\n            stateRef.current.currentAnchor = nextAnchor;\n            stateRef.current.currentAnchorTop = nextAnchorTop;\n            isUpdated = true;\n            loadMoreForwards();\n          }\n        }\n      }\n\n      if (isNearBottom) {\n        const nextAnchor = listItemElements[listLength - 1];\n        if (nextAnchor) {\n          const nextAnchorTop = nextAnchor.getBoundingClientRect().top;\n          const newAnchorTop = currentAnchor?.offsetParent && currentAnchor !== nextAnchor\n            ? currentAnchor.getBoundingClientRect().top\n            : nextAnchorTop;\n          const isMovingDown = (\n            currentAnchor && currentAnchorTop !== undefined && newAnchorTop < currentAnchorTop\n          );\n\n          if (isMovingDown) {\n            stateRef.current.currentAnchor = nextAnchor;\n            stateRef.current.currentAnchorTop = nextAnchorTop;\n            isUpdated = true;\n            loadMoreBackwards();\n          }\n        }\n      }\n\n      if (!isUpdated) {\n        if (currentAnchor?.offsetParent) {\n          stateRef.current.currentAnchorTop = currentAnchor.getBoundingClientRect().top;\n        } else {\n          const nextAnchor = listItemElements[0];\n\n          if (nextAnchor) {\n            stateRef.current.currentAnchor = nextAnchor;\n            stateRef.current.currentAnchorTop = nextAnchor.getBoundingClientRect().top;\n          }\n        }\n      }\n    }\n\n    if (onScroll) {\n      onScroll(e);\n    }\n  }, [loadMoreBackwards, loadMoreForwards, onScroll, sensitiveArea]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      teactFastList={!noFastList && !withAbsolutePositioning}\n      onKeyDown={onKeyDown}\n      onDragOver={onDragOver}\n      onDragLeave={onDragLeave}\n    >\n      {withAbsolutePositioning && items?.length ? (\n        <div\n          teactFastList={!noFastList}\n          style={buildStyle('position: relative', IS_ANDROID && `height: ${maxHeight}px`)}\n        >\n          {children}\n        </div>\n      ) : children}\n    </div>\n  );\n};\n\nexport default InfiniteScroll;\n","import type { RefObject } from 'react';\nimport type { FC, TeactNode } from '../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport trapFocus from '../../util/trapFocus';\nimport buildClassName from '../../util/buildClassName';\nimport { enableDirectTextInput, disableDirectTextInput } from '../../util/directInputManager';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from './Button';\nimport Portal from './Portal';\n\nimport './Modal.scss';\n\nconst ANIMATION_DURATION = 200;\n\ntype OwnProps = {\n  title?: string | TextPart[];\n  className?: string;\n  isOpen?: boolean;\n  header?: TeactNode;\n  hasCloseButton?: boolean;\n  noBackdrop?: boolean;\n  children: React.ReactNode;\n  style?: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onEnter?: () => void;\n  dialogRef?: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst Modal: FC<OwnProps & StateProps> = ({\n  dialogRef,\n  title,\n  className,\n  isOpen,\n  header,\n  hasCloseButton,\n  noBackdrop,\n  children,\n  style,\n  onClose,\n  onCloseAnimationEnd,\n  onEnter,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransition(\n    isOpen, onCloseAnimationEnd, shouldSkipHistoryAnimations, undefined, shouldSkipHistoryAnimations,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isOpen]);\n\n  useEffect(() => (isOpen\n    ? captureKeyboardListeners({ onEsc: onClose, onEnter })\n    : undefined), [isOpen, onClose, onEnter]);\n  useEffect(() => (isOpen && modalRef.current ? trapFocus(modalRef.current) : undefined), [isOpen]);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n  });\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    document.body.classList.toggle('has-open-dialog', Boolean(isOpen));\n\n    if (isOpen || (!isOpen && prevIsOpen !== undefined)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION);\n    }\n\n    return () => {\n      document.body.classList.remove('has-open-dialog');\n    };\n  }, [isOpen]);\n\n  const lang = useLang();\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    if (header) {\n      return header;\n    }\n\n    if (!title) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        {hasCloseButton && (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <div className=\"modal-title\">{title}</div>\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'Modal',\n    className,\n    transitionClassNames,\n    noBackdrop && 'transparent-backdrop',\n  );\n\n  return (\n    <Portal>\n      <div\n        ref={modalRef}\n        className={fullClassName}\n        tabIndex={-1}\n        role=\"dialog\"\n      >\n        <div className=\"modal-container\">\n          <div className=\"modal-backdrop\" onClick={onClose} />\n          <div className=\"modal-dialog\" ref={dialogRef}>\n            {renderHeader()}\n            <div className=\"modal-content custom-scroll\" style={style}>\n              {children}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Portal>\n  );\n};\n\nexport default Modal;\n","export default function trapFocus(element: HTMLElement) {\n  function handleKeyDown(e: KeyboardEvent) {\n    if (e.key !== 'Tab') {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const focusableElements = Array.from(\n      element.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'),\n    ) as HTMLElement[];\n    if (!focusableElements.length) {\n      return;\n    }\n\n    const currentFocusedIndex = focusableElements.findIndex((em) => em.isSameNode(document.activeElement));\n    let newFocusedIndex = 0;\n    if (currentFocusedIndex >= 0) {\n      if (e.shiftKey) {\n        newFocusedIndex = currentFocusedIndex > 0\n          ? currentFocusedIndex - 1\n          : focusableElements.length - 1;\n      } else {\n        newFocusedIndex = currentFocusedIndex < focusableElements.length - 1\n          ? currentFocusedIndex + 1\n          : 0;\n      }\n    }\n\n    focusableElements[newFocusedIndex].focus();\n  }\n\n  document.addEventListener('keydown', handleKeyDown, false);\n\n  return () => {\n    document.removeEventListener('keydown', handleKeyDown, false);\n  };\n}\n","import type { FC, VirtualElement } from '../../lib/teact/teact';\nimport { useRef, useLayoutEffect } from '../../lib/teact/teact';\nimport TeactDOM from '../../lib/teact/teact-dom';\n\ntype OwnProps = {\n  containerId?: string;\n  className?: string;\n  children: VirtualElement;\n};\n\nconst Portal: FC<OwnProps> = ({ containerId, className, children }) => {\n  const elementRef = useRef<HTMLDivElement>();\n  if (!elementRef.current) {\n    elementRef.current = document.createElement('div');\n  }\n\n  useLayoutEffect(() => {\n    const container = document.querySelector<HTMLDivElement>(containerId || '#portals');\n    if (!container) {\n      return undefined;\n    }\n\n    const element = elementRef.current!;\n    if (className) {\n      element.classList.add(className);\n    }\n\n    container.appendChild(element);\n\n    return () => {\n      TeactDOM.render(undefined, element);\n      container.removeChild(element);\n    };\n  }, [className, containerId]);\n\n  return TeactDOM.render(children, elementRef.current);\n};\n\nexport default Portal;\n","import type { ApiLimitType, GlobalState } from '../types';\nimport { selectIsCurrentUserPremium } from './users';\nimport { DEFAULT_LIMITS } from '../../config';\n\nexport function selectCurrentLimit(global: GlobalState, limit: ApiLimitType) {\n  const { appConfig } = global;\n  if (!appConfig) {\n    return DEFAULT_LIMITS[limit][0];\n  }\n\n  const isPremium = selectIsCurrentUserPremium(global);\n  const { limits } = appConfig;\n\n  const value = limits[limit][isPremium ? 1 : 0] ?? DEFAULT_LIMITS[limit][isPremium ? 1 : 0];\n  if (limit === 'dialogFilters') return value + 1; // Server does not count \"All\" as folder, but we need to\n  return value;\n}\n\nexport function selectPremiumLimit(global: GlobalState, limit: ApiLimitType) {\n  const { appConfig } = global;\n  if (!appConfig) return DEFAULT_LIMITS[limit][1];\n\n  const { limits } = appConfig;\n\n  return limits[limit][1];\n}\n","import { useCallback, useRef } from '../lib/teact/teact';\nimport { LoadMoreDirection } from '../types';\n\nimport { areSortedArraysEqual } from '../util/iteratees';\nimport useForceUpdate from './useForceUpdate';\nimport usePrevious from './usePrevious';\n\ntype GetMore = (args: { direction: LoadMoreDirection }) => void;\ntype LoadMoreBackwards = (args: { offsetId?: string | number }) => void;\n\nconst DEFAULT_LIST_SLICE = 30;\n\nconst useInfiniteScroll = <ListId extends string | number>(\n  loadMoreBackwards?: LoadMoreBackwards,\n  listIds?: ListId[],\n  isDisabled = false,\n  listSlice = DEFAULT_LIST_SLICE,\n): [ListId[]?, GetMore?] => {\n  const lastParamsRef = useRef<{\n    direction?: LoadMoreDirection;\n    offsetId?: ListId;\n  }>();\n\n  const viewportIdsRef = useRef<ListId[] | undefined>((() => {\n    // Only run once to initialize\n    if (!listIds || lastParamsRef.current) {\n      return undefined;\n    }\n\n    const { newViewportIds } = getViewportSlice(listIds, LoadMoreDirection.Forwards, listSlice, listIds[0]);\n    return newViewportIds;\n  })());\n\n  const forceUpdate = useForceUpdate();\n\n  if (isDisabled) {\n    lastParamsRef.current = {};\n  }\n\n  const prevListIds = usePrevious(listIds);\n  const prevIsDisabled = usePrevious(isDisabled);\n  if (listIds && !isDisabled && (listIds !== prevListIds || isDisabled !== prevIsDisabled)) {\n    const { offsetId = listIds[0], direction = LoadMoreDirection.Forwards } = lastParamsRef.current || {};\n    const { newViewportIds } = getViewportSlice(listIds, direction, listSlice, offsetId);\n\n    if (!viewportIdsRef.current || !areSortedArraysEqual(viewportIdsRef.current, newViewportIds)) {\n      viewportIdsRef.current = newViewportIds;\n    }\n  } else if (!listIds) {\n    viewportIdsRef.current = undefined;\n  }\n\n  const getMore: GetMore = useCallback(({\n    direction,\n    noScroll,\n  }: { direction: LoadMoreDirection; noScroll?: boolean }) => {\n    const viewportIds = viewportIdsRef.current;\n\n    const offsetId = viewportIds\n      ? direction === LoadMoreDirection.Backwards ? viewportIds[viewportIds.length - 1] : viewportIds[0]\n      : undefined;\n\n    if (!listIds) {\n      if (loadMoreBackwards) {\n        loadMoreBackwards({ offsetId });\n      }\n\n      return;\n    }\n\n    if (!noScroll) {\n      lastParamsRef.current = { ...lastParamsRef.current, direction, offsetId };\n    }\n\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(listIds, direction, listSlice, offsetId);\n\n    if (areSomeLocal && !(viewportIds && areSortedArraysEqual(viewportIds, newViewportIds))) {\n      viewportIdsRef.current = newViewportIds;\n      forceUpdate();\n    }\n\n    if (!areAllLocal && loadMoreBackwards) {\n      loadMoreBackwards({ offsetId });\n    }\n  }, [listIds, listSlice, loadMoreBackwards, forceUpdate]);\n\n  return isDisabled ? [listIds] : [viewportIdsRef.current, getMore];\n};\n\nfunction getViewportSlice<ListId extends string | number>(\n  sourceIds: ListId[],\n  direction: LoadMoreDirection,\n  listSlice: number,\n  offsetId?: ListId,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? sourceIds.indexOf(offsetId) : 0;\n  const isForwards = direction === LoadMoreDirection.Forwards;\n  const indexForDirection = isForwards ? index : (index + 1) || length;\n  const from = Math.max(0, indexForDirection - listSlice);\n  const to = indexForDirection + listSlice - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport default useInfiniteScroll;\n","import { useEffect, useLayoutEffect, useRef } from '../lib/teact/teact';\n\nfunction useInterval(callback: NoneToVoidFunction, delay?: number, noFirst = false) {\n  const savedCallback = useRef(callback);\n\n  useLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay === undefined) {\n      return undefined;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n    if (!noFirst) savedCallback.current();\n\n    return () => clearInterval(id);\n  }, [delay, noFirst]);\n}\n\nexport default useInterval;\n","let counter = 0;\n\nexport function disableDirectTextInput() {\n  counter += 1;\n}\n\nexport function enableDirectTextInput() {\n  counter -= 1;\n}\n\nexport function getIsDirectTextInputDisabled() {\n  return counter > 0;\n}\n","import { IS_IOS } from './environment';\nimport forceReflow from './forceReflow';\n\nconst resetScroll = (container: HTMLDivElement, scrollTop?: number) => {\n  if (IS_IOS) {\n    container.style.overflow = 'hidden';\n  }\n\n  if (scrollTop !== undefined) {\n    container.scrollTop = scrollTop;\n  }\n\n  if (IS_IOS) {\n    container.style.overflow = '';\n  }\n};\n\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1264266\nexport function patchChromiumScroll(element: HTMLElement) {\n  element.style.display = 'none';\n  forceReflow(element);\n  element.style.display = '';\n}\n\nexport default resetScroll;\n"],"names":["cn","createClassNameBuilder","media","icon","memo","className","size","chat","user","photo","userStatus","text","isSavedMessages","withVideo","noLoop","lastSyncTime","animationLevel","observeIntersection","onClick","loadFullUser","getActions","ref","useRef","videoLoopCountRef","isIntersecting","useIsIntersecting","isDeleted","isDeletedUser","isReplies","isChatWithRepliesBot","id","imageHash","videoHash","shouldShowVideo","VIDEO_AVATARS_DISABLED","ANIMATION_LEVEL_MAX","isPremium","hasVideoAvatar","profilePhoto","fullInfo","shouldLoadVideo","isVideo","shouldFetchBig","getChatAvatarHash","undefined","imgBlobUrl","useMedia","ApiMediaFormat","videoBlobUrl","hasBlobUrl","Boolean","shouldPlayVideo","transitionClassNames","useShowTransition","handleVideoEnded","useCallback","e","video","currentTarget","current","style","display","userId","useEffect","lang","useLang","content","author","getUserFullName","getChatTitle","buildClassName","role","src","alt","decoding","canPlay","muted","autoPlay","disablePictureInPicture","playsInline","onEnded","userFullName","getFirstLetters","title","isUserId","isOnline","isUserOnline","fullClassName","getUserColorKey","hasMedia","handleClick","senderId","IS_TEST","renderText","withGlobal","global","selectCurrentChat","selectUser","contactName","getUserFirstOrLastName","isOpen","onClose","deleteChatMember","handleDeleteChatMember","chatId","onEnter","color","isText","DEFAULT_LIST_SELECTOR","DEFAULT_PRELOAD_BACKWARDS","DEFAULT_SENSITIVE_AREA","items","itemSelector","preloadBackwards","sensitiveArea","withAbsolutePositioning","maxHeight","noScrollRestore","noScrollRestoreOnTop","noFastList","cacheBuster","children","onLoadMore","onScroll","onKeyDown","onDragOver","onDragLeave","containerRef","stateRef","loadMoreBackwards","loadMoreForwards","useMemo","debounce","noScroll","direction","LoadMoreDirection","length","scrollHeight","clientHeight","useLayoutEffect","container","state","newScrollTop","listItemElements","querySelectorAll","currentAnchor","Array","from","includes","scrollTop","getBoundingClientRect","top","currentAnchorTop","nextAnchor","resetScroll","isScrollTopJustUpdated","handleScroll","listLength","offsetHeight","isNearTop","offsetTop","isNearBottom","isUpdated","nextAnchorTop","newAnchorTop","offsetParent","teactFastList","buildStyle","IS_ANDROID","dialogRef","header","hasCloseButton","noBackdrop","onCloseAnimationEnd","shouldSkipHistoryAnimations","shouldRender","modalRef","disableDirectTextInput","enableDirectTextInput","captureKeyboardListeners","onEsc","element","handleKeyDown","key","preventDefault","stopPropagation","focusableElements","currentFocusedIndex","findIndex","em","isSameNode","document","activeElement","newFocusedIndex","shiftKey","focus","addEventListener","removeEventListener","trapFocus","useHistoryBack","isActive","onBack","useEffectWithPrevDeps","prevIsOpen","body","classList","toggle","dispatchHeavyAnimationEvent","remove","Portal","tabIndex","Button","round","ariaLabel","containerId","elementRef","createElement","querySelector","add","appendChild","TeactDOM","removeChild","selectCurrentLimit","limit","appConfig","DEFAULT_LIMITS","selectIsCurrentUserPremium","limits","value","selectPremiumLimit","getViewportSlice","sourceIds","listSlice","offsetId","index","indexOf","indexForDirection","Math","max","to","newViewportIds","slice","areSomeLocal","areAllLocal","listIds","isDisabled","lastParamsRef","viewportIdsRef","forceUpdate","useForceUpdate","prevListIds","usePrevious","prevIsDisabled","areSortedArraysEqual","getMore","viewportIds","callback","delay","noFirst","savedCallback","setInterval","clearInterval","counter","getIsDirectTextInputDisabled","patchChromiumScroll","forceReflow","IS_IOS","overflow"],"sourceRoot":""}