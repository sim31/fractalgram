{"version":3,"file":"884.f3881da85250209e0957.js","mappings":"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","sources":["webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/hooks/useThrottle.ts","webpack://telegram-t/./src/modules/actions/api/chats.ts","webpack://telegram-t/./src/modules/actions/ui/calls.ts","webpack://telegram-t/./src/modules/reducers/calls.ts","webpack://telegram-t/./src/modules/selectors/calls.ts","webpack://telegram-t/./src/util/deeplink.ts"],"sourcesContent":["import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteChatMember'>;\n\nconst DeleteMemberModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['deleteChatMember']),\n)(DeleteMemberModal));\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number, noFirst = false) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms, !noFirst);\n  }, [ms, noFirst]);\n};\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  TIPS_USERNAME,\n  LOCALIZED_TIPS,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n  selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\nimport { processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst CHATS_PRELOAD_INTERVAL = 300;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), CHATS_PRELOAD_INTERVAL, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: string[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds, 'all', true);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat && chat.lastMessage && chat.lastMessage.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openLinkedChat', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const chatFullInfo = await callApi('fetchFullChat', chat);\n\n    if (chatFullInfo?.fullInfo?.linkedChatId) {\n      actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n    }\n  })();\n});\n\naddReducer('focusMessageInComments', (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n    if (!result) {\n      return;\n    }\n\n    actions.focusMessage({ chatId, threadId, messageId });\n  })();\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions, payload) => {\n  const { langCode } = payload;\n\n  const usernamePostfix = langCode === 'pt-br'\n    ? 'BR'\n    : LOCALIZED_TIPS.includes(langCode) ? (langCode as string).toUpperCase() : '';\n\n  actions.openChatByUsername({ username: `${TIPS_USERNAME}${usernamePostfix}` });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('preloadArchivedChats', () => {\n  (async () => {\n    while (!getGlobal().chats.isFullyLoaded.archived) {\n      const currentGlobal = getGlobal();\n      const listIds = currentGlobal.chats.listIds.archived;\n      const oldestChat = listIds\n        ? listIds\n          .map((id) => currentGlobal.chats.byId[id])\n          .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(currentGlobal, chat.id))\n          .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n        : undefined;\n\n      await loadChats('archived', oldestChat?.id, oldestChat?.lastMessage!.date);\n      await pause(CHATS_PRELOAD_INTERVAL);\n    }\n  })();\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds?.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openChatByInvite', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('openChatByInvite', hash);\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.chatId });\n  })();\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url.match(RE_TG_LINK)[0]);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  const [part1, part2, part3] = uri.pathname.split('/').filter(Boolean).map((l) => decodeURI(l));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    actions.openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers') {\n    actions.openStickerSetShortName({\n      stickerSetShortName: part2,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 ? Number(part2) : undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    actions.joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    actions.focusMessage({\n      chatId: -chatOrChannelPostId,\n      messageId,\n    });\n  } else {\n    actions.openChatByUsername({\n      username: part1,\n      messageId: messageId || chatOrChannelPostId,\n      commentId,\n    });\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username, messageId, commentId } = payload!;\n\n  (async () => {\n    const chat = selectCurrentChat(global);\n\n    if (!commentId) {\n      if (chat && chat.username === username) {\n        actions.focusMessage({ chatId: chat.id, messageId });\n        return;\n      }\n      await openChatByUsername(actions, username, messageId);\n      return;\n    }\n\n    const { chatId, type } = selectCurrentMessageList(global) || {};\n    const usernameChat = selectChatByUsername(global, username);\n    if (chatId && usernameChat && type === 'thread') {\n      const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n      if (threadInfo && threadInfo.chatId === chatId) {\n        actions.focusMessage({\n          chatId: threadInfo.chatId,\n          threadId: threadInfo.threadId,\n          messageId: commentId,\n        });\n        return;\n      }\n    }\n\n    if (!messageId) return;\n\n    await openCommentsByUsername(actions, username, messageId, commentId);\n  })();\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<string, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo!.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo?.members?.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: string, offsetDate?: number) {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: global.chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const { users, fullInfo, groupCall } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId, shouldReplaceHistory: true });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getDispatch()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({ message: 'User does not exist' });\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat } from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { ApiGroupCall } from '../../../api/types';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { addChats, addUsers } from '../../reducers';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nconst joinAudio = new Audio('./voicechat_join.mp3');\nconst connectingAudio = new Audio('./voicechat_connecting.mp3');\nconnectingAudio.loop = true;\nconst leaveAudio = new Audio('./voicechat_leave.mp3');\nconst allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n\nconst sounds: Record<string, HTMLAudioElement> = {\n  join: joinAudio,\n  allowTalk: allowTalkAudio,\n  leave: leaveAudio,\n  connecting: connectingAudio,\n};\n\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nconst initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  initializationPromise = Promise.all(Object.values(sounds).map((l) => {\n    l.muted = true;\n    l.volume = 0.0001;\n    return l.play().then(() => {\n      l.pause();\n      l.volume = 1;\n      l.currentTime = 0;\n      l.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddReducer('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      isGroupCallPanelHidden: !global.groupCalls.isGroupCallPanelHidden,\n    },\n  };\n});\n\naddReducer('subscribeToGroupCallUpdates', (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  (async () => {\n    if (subscribed) {\n      await fetchGroupCall(groupCall);\n      await fetchGroupCallParticipants(groupCall);\n    }\n\n    await callApi('toggleGroupCallStartSubscription', {\n      subscribed,\n      call: groupCall,\n    });\n  })();\n});\n\naddReducer('createGroupCall', (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('createGroupCall', {\n      peer: chat,\n    });\n\n    if (!result) return;\n\n    global = getGlobal();\n    setGlobal(updateGroupCall(global, result.id, {\n      ...result,\n      chatId,\n    }));\n\n    actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n  })();\n});\n\naddReducer('createGroupCallInviteLink', (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const canInvite = !!chat && !!chat.username;\n\n  (async () => {\n    let { inviteLink } = chat.fullInfo!;\n    if (canInvite) {\n      inviteLink = await callApi('exportGroupCallInvite', {\n        call: groupCall,\n        canSelfUnmute: false,\n      });\n    }\n\n    if (!inviteLink) {\n      return;\n    }\n\n    copyTextToClipboard(inviteLink);\n    actions.showNotification({\n      message: 'Link copied to clipboard',\n    });\n  })();\n});\n\naddReducer('joinVoiceChatByLink', (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  (async () => {\n    const chat = await fetchChatByUsername(username);\n\n    if (!chat) {\n      actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n      return;\n    }\n\n    const full = await loadFullChat(chat);\n\n    if (full?.groupCall) {\n      actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n    }\n  })();\n});\n\naddReducer('joinGroupCall', (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  (async () => {\n    await initializeSoundsForSafari();\n    const { groupCalls: { activeGroupCallId } } = global;\n    let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n    if (groupCall?.id === activeGroupCallId) {\n      actions.toggleGroupCallPanel();\n      return;\n    }\n\n    if (activeGroupCallId) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n      });\n      return;\n    }\n\n    if (groupCall && activeGroupCallId === groupCall.id) {\n      actions.toggleGroupCallPanel();\n      return;\n    }\n\n    if (!groupCall && (!id || !accessHash)) {\n      groupCall = await fetchGroupCall({\n        id,\n        accessHash,\n      });\n    }\n\n    if (!groupCall) return;\n\n    global = getGlobal();\n\n    global = updateGroupCall(\n      global,\n      groupCall.id,\n      {\n        ...groupCall,\n        inviteHash,\n      },\n      undefined,\n      groupCall.participantsCount + 1,\n    );\n\n    setGlobal({\n      ...global,\n      groupCalls: {\n        ...global.groupCalls,\n        activeGroupCallId: groupCall.id,\n        isGroupCallPanelHidden: false,\n      },\n    });\n  })();\n});\n\naddReducer('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  if (initializationPromise) {\n    initializationPromise.then(() => {\n      safePlay(sounds[sound]);\n    });\n  } else {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    safePlay(sounds[sound]);\n  }\n});\n\naddReducer('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\naddReducer('openCallFallbackConfirm', (global) => {\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      isFallbackConfirmOpen: true,\n    },\n  };\n});\n\naddReducer('closeCallFallbackConfirm', (global) => {\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      isFallbackConfirmOpen: false,\n    },\n  };\n});\n","import { GroupCallParticipant } from '../../lib/secret-sauce';\nimport { GlobalState } from '../../global/types';\nimport { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter((l) => !l.isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","import { GlobalState } from '../../global/types';\nimport { selectChat } from './chats';\nimport { getUserFullName, isChatBasicGroup } from '../helpers';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall(global: GlobalState, chatId: string) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.fullInfo || !chat.fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, chat.fullInfo.groupCallId);\n}\n\nexport function selectGroupCall(global: GlobalState, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant(global: GlobalState, groupCallId: string, participantId: string) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall(global: GlobalState): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || !!chat.adminRights?.manageCall;\n}\n\nexport function selectActiveGroupCall(global: GlobalState) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectCallFallbackChannelTitle(global: GlobalState) {\n  const currentUser = selectUser(global, global.currentUserId!);\n\n  return `Calls: ${getUserFullName(currentUser!)}`;\n}\n","import { getDispatch } from '../lib/teact/teactn';\nimport { IS_SAFARI } from './environment';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url';\n\nexport const processDeepLink = (url: string) => {\n  const {\n    protocol, searchParams, pathname, hostname,\n  } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openStickerSetShortName,\n    focusMessage,\n    joinVoiceChatByLink,\n  } = getDispatch();\n\n  // Safari thinks the path in tg://path links is hostname for some reason\n  const method = (IS_SAFARI ? hostname : pathname).replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const {\n        domain, post, comment, voicechat, livestream,\n      } = params;\n\n      if (domain !== 'telegrampassport') {\n        if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n          joinVoiceChatByLink({\n            username: domain,\n            inviteHash: voicechat || livestream,\n          });\n        } else {\n          openChatByUsername({\n            username: domain,\n            messageId: Number(post),\n            commentId: Number(comment),\n          });\n        }\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: -Number(channel),\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n"],"names":["memo","withGlobal","global","userId","chat","selectCurrentChat","user","selectUser","contactName","getUserFirstOrLastName","undefined","setGlobal","actions","pick","isOpen","onClose","deleteChatMember","lang","useLang","handleDeleteChatMember","useCallback","chatId","id","onEnter","className","title","renderText","color","isText","onClick","ms","noFirst","useMemo","throttle","cb","runThrottledForLoadChats","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","getGlobal","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chats","orderedPinnedIds","serverTimeOffset","lastLocalServiceMessage","selectLastServiceNotification","message","chatIds","length","shift","addUsers","buildCollectionByKey","users","addUserStatuses","userStatusesById","updateChats","updateChatListIds","updateChatListSecondaryInfo","Object","keys","draftsById","forEach","replaceThreadParam","MAIN_THREAD_ID","replyingToById","isFullyLoaded","loadFullChat","fullInfo","groupCall","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","addReducer","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","selectCurrentMessageList","pinnedChats","otherChats","prepareChatList","chatToPreload","find","includes","push","loadViewportMessages","threadId","payload","currentUserId","selectChat","hasUnreadMark","toggleChatUnread","lastMessage","threadInfo","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","type","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","langCode","usernamePostfix","LOCALIZED_TIPS","toUpperCase","openChatByUsername","TIPS_USERNAME","oldestChat","map","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","date","currentGlobal","force","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isMuted","about","photo","memberIds","chatCreation","progress","ChatCreationProgress","createdChannel","channelId","accessHash","getDispatch","createChannel","leaveChat","createdChat","e","error","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","includedId","concat","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","hash","url","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","part1","part2","part3","pathname","split","l","decodeURI","params","fromEntries","searchParams","substr","openChatByInvite","openStickerSetShortName","stickerSetShortName","chatOrChannelPostId","Number","commentId","comment","hasOwnProperty","joinVoiceChatByLink","inviteHash","voicechat","livestream","channelPostId","openPreviousChat","showNotification","usernameChat","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","bannedRights","newGlobal","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","audioElement","audioContext","joinAudio","Audio","connectingAudio","loop","leaveAudio","sounds","join","allowTalk","leave","connecting","initializationPromise","resolve","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","groupCalls","isGroupCallPanelHidden","subscribed","peer","joinGroupCall","selectActiveGroupCall","canInvite","inviteLink","canSelfUnmute","copyTextToClipboard","langProvider","full","ARE_CALLS_SUPPORTED","ctx","window","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","connect","createMediaStreamDestination","start","MediaStream","assign","stream","getAudioTracks","enabled","silence","safePlay","createAudioElement","values","muted","volume","play","then","currentTime","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","toggleGroupCallPanel","sound","isFallbackConfirmOpen","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","acc","el","removeGroupCall","toString","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","selectGroupCallParticipant","participantId","selectIsAdminInActiveGroupCall","isCreator","manageCall","selectCallFallbackChannelTitle","currentUser","getUserFullName","protocol","hostname","method","IS_SAFARI","replace","value","key","domain","post","invite","set"],"sourceRoot":""}