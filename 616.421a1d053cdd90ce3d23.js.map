{"version":3,"file":"616.421a1d053cdd90ce3d23.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/ui/Skeleton.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/common/LocalAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/CallFallbackConfirm.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { GlobalState } from '../../types';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyTextToClipboard(result.join('\\n'));\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler } from '../../index';\n\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddActionHandler('closePaymentModal', (global) => {\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const { volume, isMuted, playbackRate } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { GlobalActions } from '../../types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    return updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const maxId = chat.lastMessage?.id;\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? 'Thank you! Your report will be reviewed by our team.'\n      : 'Error occured while submiting report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  return updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  });\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    return updateChat(getGlobal(), chatId, {\n      sendAsIds: [],\n    });\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsIds: result.ids });\n  return global;\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  return global;\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  const cached = global.stickers.setsById;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  for (let i = 0; i < addedSetIds.length; i++) {\n    const id = addedSetIds[i];\n    if (cached[id].stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({ stickerSetId: id });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return undefined;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    return {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateChat, updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return undefined;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable });\n  return global;\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return undefined;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await callApi('migrateChat', chat);\n\n    if (!chat) {\n      return undefined;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  return global;\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return undefined;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  return updateManagement(getGlobal(), chatId, update);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return undefined;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  return updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  });\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return undefined;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  return updateManagement(global, chatId, {\n    invites: [...invites, result],\n  });\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return undefined;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  return updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  });\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return undefined;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  return updateManagement(global, chatId, {\n    revokedInvites: [],\n  });\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return undefined;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return undefined;\n  }\n\n  return updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers: result,\n    },\n  });\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return undefined;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return undefined;\n  }\n\n  return updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: result,\n    },\n  });\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return undefined;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  return updateChat(global, chatId, { joinRequests: result });\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return undefined;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return undefined;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return undefined;\n\n  return updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return undefined;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return undefined;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return undefined;\n\n  return updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return undefined;\n\n  return updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  });\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\n\nimport {\n  ApiChat, ApiMessage, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, closeNewContactDialog, replaceUserStatuses, updateChat, updateManagementProgress, updateUser,\n  updateUsers, updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return undefined;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return undefined;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n\n  return global;\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return undefined;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return undefined;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  return global;\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  global = getGlobal();\n  if (result) {\n    setGlobal(updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  return global;\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n\n  if (result) {\n    actions.openChat({ id: result });\n\n    return closeNewContactDialog(getGlobal());\n  }\n\n  actions.showNotification({\n    message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n  });\n\n  return undefined;\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'requestSelfContact': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return undefined;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return undefined;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  return global;\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getActions();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  return global;\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n  setSmartGlocalCardInfo,\n} from '../../reducers';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n  if (!chat || !messageId || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, nativeProvider, formId, {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/[^\\d]+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/[^\\d]+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  nativeProvider: string,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n\n  if (result === true) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddActionHandler('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n","import { addActionHandler, getGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiAppConfig, ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction } from '../../reducers/reactions';\nimport { addUsers, updateChatMessage } from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return undefined;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.Lottie);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.Lottie);\n    }\n  });\n\n  return {\n    ...getGlobal(),\n    availableReactions: result,\n  };\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return global;\n\n  if (global.activeReactions[messageId]?.reaction === reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: {\n      ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n      ...(reaction && {\n        [messageId]: {\n          reaction,\n          messageId,\n        },\n      }),\n    },\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  };\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  });\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n","import { addActionHandler, getGlobal } from '../../index';\n\nimport { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return undefined;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, result);\n\n  return global;\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return undefined;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return undefined;\n  }\n\n  return updateStatisticsGraph(getGlobal(), chatId, name, result);\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { getMessageRecentReaction } from '../../helpers';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateMessage': {\n      const { message } = update;\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      if (getMessageRecentReaction(message)) {\n        notifyAboutMessage({\n          chat,\n          message,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport {\n  ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfReactionAdded,\n} from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n      const currentReactions = message?.reactions;\n\n      // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n      if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n        return;\n      }\n\n      // Only notify about added reactions, not removed ones\n      const shouldNotify = checkIfReactionAdded(currentReactions, reactions, global.currentUserId);\n\n      global = updateChatMessage(global, chatId, id, { reactions: update.reactions });\n\n      if (shouldNotify) {\n        const newMessage = selectChatMessage(global, chatId, id);\n        if (!chat || !newMessage) return;\n        notifyAboutMessage({\n          chat,\n          message: newMessage,\n          isReaction: true,\n        });\n      }\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiPrivacyKey, PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      return clearPayment(global);\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ISettings, LeftColumnContent } from '../../../types';\nimport { ApiChat } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, DEBUG, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n}) => {\n  const {\n    openChat,\n    openTipsChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${DEBUG ? APP_REVISION : APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n    };\n  },\n)(LeftMainHeader));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChatFolder } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      {\n        id: ALL_FOLDER_ID,\n        title: lang.code === 'en' ? 'All' : lang('FilterAllChats'),\n      },\n      ...displayedFolders.map(({ id, title }) => ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <div className={fabClassName}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.shiftKey && getKeyFromEvent(e) === 'f') {\n        e.preventDefault();\n        setContent(LeftColumnContent.GlobalSearch);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [content]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n\nexport default useWindowSize;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition, ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_MAC_OS, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    openCallFallbackConfirm,\n    requestNextManagementScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  useEffect(() => {\n    if (!canSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (\n        IS_PWA && ((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && !e.shiftKey && getKeyFromEvent(e) === 'f'\n      ) {\n        e.preventDefault();\n        handleSearchClick();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [canSearch, handleSearchClick]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={openCallFallbackConfirm}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../global/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../global/helpers';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Group')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('DeleteReportSpam')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalState, MessageListType } from '../../global/types';\nimport {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser, MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getActions();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import { RefObject } from 'react';\nimport React, { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ActiveReaction } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId, ApiMediaFormat.Lottie);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId, ApiMediaFormat.Lottie);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            id={`reaction_emoji_${centerIconId}`}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            animationData={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            id={`reaction_effect_${effectId}`}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            animationData={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { NO_STICKER_SET_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isLottie, stickerSetId, isVideo } = sticker;\n  const canDisplayVideo = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = stickerSetId === NO_STICKER_SET_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const previewMediaHash = isVideo && !canDisplayVideo && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useWebpThumbnail(message);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  useEffect(() => {\n    if (!isVideo || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isVideo, shouldPlay]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {(!isMediaReady || (isVideo && !canDisplayVideo)) && (\n        <img\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isVideo && (\n        <img\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isVideo && canDisplayVideo && isMediaReady && (\n        <video\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Skeleton.scss';\n\ntype OwnProps = {\n  variant?: 'rectangular' | 'rounded-rect' | 'round';\n  animation?: 'wave' | 'pulse';\n  width?: number;\n  height?: number;\n  className?: string;\n};\n\nconst Skeleton: FC<OwnProps> = ({\n  variant = 'rectangular', animation = 'wave', width, height, className,\n}) => {\n  const classNames = buildClassName('Skeleton', variant, animation, className);\n  const style = (width ? `width: ${width}px;` : '') + (height ? `height: ${height}px;` : '');\n  return (\n    <div className={classNames} style={style} />\n  );\n};\n\nexport default Skeleton;\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffect(() => {\n    if (shouldRenderText) return;\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (mapBlobUrl) {\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [isOwn, isInSelectMode, isSelected, theme, mapBlobUrl, shouldRenderText]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import React, {\n  FC, memo, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from './helpers/animatedAssets';\nimport useAnimatedEmoji from './hooks/useAnimatedEmoji';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nconst QUALITY = 1;\n\ntype OwnProps = {\n  localSticker?: string;\n  localEffect?: string;\n  isOwn?: boolean;\n  soundId?: string;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\nconst LocalAnimatedEmoji: FC<OwnProps> = ({\n  localSticker,\n  localEffect,\n  isOwn,\n  soundId,\n  size = 'medium',\n  observeIntersection,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n}) => {\n  const {\n    playKey,\n    ref,\n    style,\n    width,\n    handleClick,\n    markAnimationLoaded,\n  } = useAnimatedEmoji(size, chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect);\n  const id = `local_emoji_${localSticker}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [localStickerAnimationData, setLocalStickerAnimationData] = useState<string>();\n  useEffect(() => {\n    if (localSticker) {\n      getAnimationData(localSticker as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalStickerAnimationData(data);\n      });\n    }\n  }, [localSticker]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    >\n      {localStickerAnimationData && (\n        <AnimatedSticker\n          key={id}\n          id={id}\n          animationData={localStickerAnimationData}\n          size={width}\n          quality={QUALITY}\n          play={isIntersecting && playKey}\n          forceOnHeavyAnimation\n          noLoop\n          onLoad={markAnimationLoaded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(LocalAnimatedEmoji);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectMessageIdsByGroupId,\n  selectLocalAnimatedEmoji,\n  selectIsMessageProtected,\n  selectLocalAnimatedEmojiEffect,\n  selectDefaultReaction,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Location from './Location';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport LocalAnimatedEmoji from '../../common/LocalAnimatedEmoji';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  localSticker?: string;\n  localEffect?: string;\n  animatedEmojiEffect?: ApiSticker;\n  animatedEmojiSoundId?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  localSticker,\n  localEffect,\n  animatedEmojiEffect,\n  animatedEmojiSoundId,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickInlineButton,\n    disableContextMenuHint,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = localSticker || animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !isInSelectMode && defaultReaction && !isInDocumentGroupNotLast;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location,\n  } = getMessageContent(message);\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n\n  let metaPosition!: MetaPosition;\n  if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            sticker={animatedEmoji}\n            effect={animatedEmojiEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {localSticker && (\n          <LocalAnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            localSticker={localSticker}\n            localEffect={localEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const localSticker = singleEmoji ? selectLocalAnimatedEmoji(global, singleEmoji) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      animatedEmojiEffect: singleEmoji && isUserId(chatId) ? selectAnimatedEmojiEffect(global, singleEmoji) : undefined,\n      animatedEmojiSoundId: singleEmoji ? selectAnimatedEmojiSound(global, singleEmoji) : undefined,\n      localSticker,\n      localEffect: localSticker && isUserId(chatId) ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  const handleClick = () => {\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_MAC_OS } from '../util/environment';\nimport getKeyFromEvent from '../util/getKeyFromEvent';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  useEffect(() => {\n    function handleCopy(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && getKeyFromEvent(e) === 'c') {\n        const messageIds = getMessageIdsForSelectedText();\n\n        if (messageIds && messageIds.length > 0) {\n          e.preventDefault();\n          copyMessagesByIds({ messageIds });\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleCopy, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleCopy, false);\n    };\n  }, [copyMessagesByIds]);\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getActions();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (editedMessage) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else if (currentHtml !== undefined) {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useState } from '../lib/teact/teact';\n\nimport useDebounce from './useDebounce';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runDebounced = useDebounce(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={onActivate}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isButtonVisible, canAttachMedia, canAttachPolls, onFileSelect, onPollCreate,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={openAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n              {lang('AttachmentMenu.PhotoOrVideo')}\n            </MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getActions();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    isPollModalOpen?: boolean;\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete, activeVoiceRecording, requestCalendar,\n    pauseRecordingVoice, handleMessageSchedule,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        shouldBeAnonimous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      requestAnimationFrame(() => {\n        focusEditableElement(messageInput, true);\n      });\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport {\n  MessageListType,\n  MessageList as GlobalMessageList,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat,\n    undefined,\n    undefined,\n    undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <PaymentModal\n                  isOpen={Boolean(isPaymentModalOpen)}\n                  onClose={closePaymentModal}\n                />\n                <ReceiptModal\n                  isOpen={Boolean(isReceiptModalOpen)}\n                  onClose={clearReceipt}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { ApiExportedInvite } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  shouldSkipAnimation,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang('Statistics')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst CLOSE_ANIMATION_DURATION = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, CLOSE_ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack(isChatSelected && (\n    contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers\n  ), () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../global/helpers';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessageMediaDownload } = getActions();\n\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst CallFallbackConfirmAsync: FC<OwnProps> = ({ isOpen }) => {\n  const CallFallbackConfirm = useModuleLoader(Bundles.Calls, 'CallFallbackConfirm', !isOpen);\n\n  return CallFallbackConfirm ? <CallFallbackConfirm isOpen={isOpen} /> : undefined;\n};\n\nexport default memo(CallFallbackConfirmAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LangCode } from '../../types';\nimport { ApiMessage, ApiUpdateAuthorizationStateType, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport CallFallbackConfirm from '../calls/CallFallbackConfirm.async';\nimport NewContactModal from './NewContactModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  authState?: ApiUpdateAuthorizationStateType;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isCallFallbackConfirmOpen: boolean;\n  addedSetIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  connectionState,\n  authState,\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  isCallFallbackConfirmOpen,\n  addedSetIds,\n  newContactUserId,\n  newContactByPhoneNumber,\n}) => {\n  const {\n    sync,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n      sync();\n    }\n  }, [connectionState, authState, sync]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <DownloadManager />\n      <CallFallbackConfirm isOpen={isCallFallbackConfirmOpen} />\n      <UnreadCount isForAppBadge />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      connectionState: global.connectionState,\n      authState: global.authState,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isCallFallbackConfirmOpen: Boolean(global.groupCalls.isFallbackConfirmOpen),\n      addedSetIds: global.stickers.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n    };\n  },\n)(Main));\n","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","lang","langProvider","chatMessages","selectChatMessages","result","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","push","getSenderTitle","getMessageSummaryText","copyTextToClipboard","join","scrollOffset","messageId","paramName","text","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","byChatId","activeDownloads","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","versionNotification","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","avatarOwnerId","profilePhotoIndex","mediaViewer","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","cached","setsById","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","newGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","getActions","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","current","managementState","offsetDate","offsetUserId","offsetUser","currentInviteInfo","importers","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","releaseStatusTimeout","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","scheduleDate","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","status","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","requestedInfoId","sendPaymentForm","save","selectStripeCredentials","selectSmartGlocalCredentials","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","animationLevel","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","isGroup","recentTopMessages","msgId","updateStatistics","name","isPercentage","dcId","statisticsDcId","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","Array","isArray","array1","array2","every","member1","object1","object2","key1","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutMessage","getMessageRecentReaction","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","currentReactions","shouldNotify","checkIfReactionAdded","isReaction","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","targetUser","isBlocked","addBlockedContact","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","className","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","theme","selectTheme","isMessageListOpen","areChatsLoaded","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","ripple","ariaLabel","buildClassName","handleSearchFocus","useCallback","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_REVISION","MenuItem","icon","Switcher","label","checked","noAnimation","langCode","href","FEEDBACK_URL","setPermanentWebVersion","clearWebsync","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","folderTabs","ALL_FOLDER_ID","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","handleMouseEnter","handleMouseLeave","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","IS_MAC_OS","metaKey","getKeyFromEvent","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","remove","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","add","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","handleResize","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","canExpandActions","joinChannel","openLocalTextSearch","restartBot","openCallFallbackConfirm","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","focus","searchInput","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","audio","voice","fileName","artist","performer","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","getUserFullName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","customText","isIntersecting","useIsIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","animationData","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","views","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isLottie","isVideo","canDisplayVideo","IS_WEBM_SUPPORTED","isMemojiSticker","NO_STICKER_SET_ID","shouldLoad","mediaHash","previewMediaHash","previewUrl","getMessageMediaFormat","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","safePlay","autoPlay","playsInline","loop","muted","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","getImageData","getAppendixColorFromImage","canAutoLoad","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","useHeavyAnimationCheck","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","variant","animation","classNames","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","useTimeout","useInterval","prepareMapUrl","open","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","peerId","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","localSticker","soundId","playKey","useAnimatedEmoji","localStickerAnimationData","setLocalStickerAnimationData","getAnimationData","quality","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","selectIsDownloading","actualThreadInfo","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","animatedEmojiEffect","selectAnimatedEmojiEffect","animatedEmojiSoundId","selectAnimatedEmojiSound","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","withCommentButton","withQuickReactionButton","messageSender","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","isGeoLiveActive","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","effect","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","chatInviteTitle","chatInviteHash","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useOnChange","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","isButtonVisible","canAttachMedia","canAttachPolls","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","noCompact","forwardMessageIds","forwardedMessagesCount","onClear","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","SendAsMenu","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","newHtml","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","getTextWithEntitiesAsHtml","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","getFilesFromDataTransferItems","newAttachments","all","file","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonimous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","loadChatSettings","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","shouldSkipAnimation","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","backButtonRef","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","CallFallbackConfirm","NewContactModal","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","authState","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isCallFallbackConfirmOpen","isFallbackConfirmOpen","newContactUserId","newContactByPhoneNumber","sync","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}