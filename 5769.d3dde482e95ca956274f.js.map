{"version":3,"file":"5769.d3dde482e95ca956274f.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload) => {\n  const { chatId, text } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId });\n  }\n\n  return {\n    ...global,\n    requestedDraft: {\n      chatId,\n      text,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectScheduledMessages,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('changeForwardRecipient', (global) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  };\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noAuthors: payload,\n      noCaptions: payload && global.forwardMessages.noCaptions, // `noCaptions` cannot be true when `noAuthors` is false\n    },\n  };\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noCaptions: payload,\n      noAuthors: payload, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\n\nimport { APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectChatMessage, selectCurrentMessageList, selectIsTrustedBot } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, action, payload) => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global) => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      [isCustomEmoji ? 'customEmoji' : 'added']: {\n        setIds: order,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\naddActionHandler('closeStickerSetModal', (global) => {\n  return {\n    ...global,\n    openedStickerSetShortName: undefined,\n  };\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload) => {\n  const { setIds } = payload;\n  return {\n    ...global,\n    openedCustomEmojiSetIds: setIds,\n  };\n});\n\naddActionHandler('closeCustomEmojiSets', (global) => {\n  return {\n    ...global,\n    openedCustomEmojiSetIds: undefined,\n  };\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload) => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', () => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        setGlobal({\n          ...getGlobal(),\n          isUpdateAvailable: true,\n        });\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload) => {\n  const isHidden = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isHidden,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_STATE } from '../../initialState';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  migrateCache(global, cloneDeep(INITIAL_STATE));\n\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  if (threadId === MAIN_THREAD_ID) {\n    const result = await callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n\n    if (!result) {\n      draft.isLocal = true;\n    }\n  }\n  global = getGlobal();\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload) => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions,\n  } = global.forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload) => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsPeerIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatId', async (global, actions, payload) => {\n  const { id } = payload;\n  let user = selectUser(global, id);\n  if (user && selectForwardsContainVoiceMessages(global)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id, accessHash });\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: getTranslation('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n      });\n      return;\n    }\n  }\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  });\n\n  actions.exitMessageSelectMode();\n  actions.forwardMessages({ isSilent: true });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiStickerSetInfo, ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global, actions) => {\n  void loadStickerSets(global.stickers.added.hash);\n  void loadCustomEmojiSets(global.customEmojis.added.hash);\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadPremiumSetStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadPremiumGifts', async () => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    premiumGifts: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadCustomEmojiSets(hash?: string) {\n  const addedCustomEmojis = await callApi('fetchCustomEmojiSets', { hash });\n  if (!addedCustomEmojis) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  ));\n}\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetInfo: ApiStickerSetInfo) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if ('shortName' in stickerSetInfo && global.openedStickerSetShortName === stickerSetInfo.shortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global) => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global) => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  });\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: getTranslation('StickerPack.ErrorNotFound'),\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable, checkedUsername: username });\n  setGlobal(global);\n\n  if (isUsernameAvailable === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { GlobalState, Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  if (previousGlobal?.connectionState === connectionState && previousGlobal?.authState === authState) return;\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async () => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeWebSessions: {\n      byHash: result,\n      orderedHashes: Object.keys(result),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachBots(hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(bot, isEnabled);\n});\n\nasync function toggleAttachBot(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleAttachBot', { bot, isEnabled });\n  await loadAttachBots();\n}\n\nasync function loadAttachBots(hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      requestedAttachBotInstall: {\n        botId,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: { chatId, botId, startParam },\n        },\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global) => {\n  const { requestedAttachBotInstall } = global;\n\n  const { botId, onConfirm } = requestedAttachBotInstall!;\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInstall: undefined,\n  });\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  await toggleAttachBot(bot, true);\n  if (onConfirm) {\n    const { action, payload } = onConfirm;\n    getActions()[action](payload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInstall: undefined,\n  };\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload) => {\n  const { botId, filter, startParam } = payload;\n  const currentChatId = selectCurrentMessageList(global)?.chatId;\n\n  const { attachMenu: { bots } } = global;\n  const bot = bots[botId];\n  if (!bot) return;\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || botId,\n      botId,\n      startParam,\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInChat: {\n      botId,\n      filter: supportedFilters,\n      startParam,\n    },\n  });\n});\n\naddActionHandler('cancelAttachBotInChat', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInChat: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ApiChat, ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const { requestInfo, saveInfo } = payload;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice } = result;\n\n  let global = setPaymentForm(getGlobal(), form);\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload) => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider, temporaryPassword } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  setGlobal(updatePayment(global, { status: 'pending' }));\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' });\n  global = closeInvoice(global);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step ?? PaymentStep.Checkout);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload) => {\n  const { forUserId } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  setGlobal({\n    ...global,\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  });\n});\n\naddActionHandler('closeGiftPremiumModal', (global) => {\n  setGlobal({\n    ...global,\n    giftPremiumModal: { isOpen: false },\n  });\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, { password }) => {\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } });\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } });\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout });\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport type { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport type { ApiChat } from '../../api/types';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport type { ApiAppConfig } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.find((l) => l.isUnread);\n\n        if (!unread) return undefined;\n\n        const reaction = unread?.reaction;\n\n        return [messageId, {\n          messageId,\n          reaction,\n        }];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        global = updateChat(global, update.chatId, {\n          unreadCount: (chat.unreadCount || 0) + 1,\n          ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        });\n      }\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (isLocal && message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isLocal) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        setGlobal({\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        });\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, getGlobal());\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        }));\n      } else if (media) {\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n\n      if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n        const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n        if (message && message.content.invoice) {\n          const { amount, currency, title } = message.content.invoice;\n\n          actions.showNotification({\n            message: langProvider.getTranslation('PaymentInfoHint', [\n              formatCurrency(amount, currency, langProvider.getTranslation.code),\n              title,\n            ]),\n          });\n        }\n      }\n\n      // On the production host, the payment frame receives a message with the payment event,\n      // after which the payment form closes. In other cases, the payment form must be closed manually.\n      // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n      if (!IS_PRODUCTION_HOST) {\n        global = closeInvoice(global);\n      }\n\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return !IS_PRODUCTION_HOST ? global : undefined;\n      }\n\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <MenuItem\n              icon=\"permissions\"\n              onClick={handleChangelogClick}\n            >\n              Beta Changelog\n            </MenuItem>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder(FIRST_FOLDER_INDEX, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || isInAllChatsFolder) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div className=\"ChatFolders\">\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchQuery({ query: '' });\n      setGlobalSearchDate({ date: undefined });\n      setGlobalSearchChatId({ id: undefined });\n      resetChatCreation();\n      setTimeout(() => {\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const isChatOpen = Boolean(selectCurrentChat(global)?.id);\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n    showNotification,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const lang = useLang();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (shouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, shouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys({\n    'Mod+F': handleHotkeySearchClick,\n  });\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && shouldSendJoinRequest && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang('ChannelJoinRequest')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n    };\n  },\n)(HeaderActions));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  animationLevel: AnimationLevel;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n  animationLevel,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} animationLevel={animationLevel} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} animationLevel={animationLevel} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(GroupCallTopPane));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  memoFirstUnreadIdRef,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isGift && 'premium-gift',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {isGift && renderGift()}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={buildClassName('pictogram', isRoundVideo && 'round')}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            tgsUrl={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// eslint-disable-next-line max-len\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, (emoji || localEffect) && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch, size,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction, size,\n  ]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, undefined, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>('.message-content')!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme] as const);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n        />\n      )}\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n\n  // Thumbnail is always rendered, so we can only disable blur if we have a preview\n  const [withThumb] = useState(!previewBlobUrl);\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withThumb ? (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n        />\n      ) : (\n        <img\n          src={previewBlobUrl}\n          className={buildClassName('thumbnail', previewClassNames)}\n          style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n          alt=\"\"\n          draggable={!isProtected}\n        />\n      )}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          canPlay={isPlayAllowed}\n          src={fullMediaData}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          style={aspectRatio}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n          theme={theme}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>('.message-content')!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme] as const);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"dots\":\"Nlcnrzv_f5cSxFsPOGt2\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"canvas\":\"a_WnxsI6X0B4j7QRRoOA\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useInterval from '../../../hooks/useInterval';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\nconst BLUR_RADIUS = 25;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const canvasRef = useCanvasBlur(thumbnail?.dataUri, false, undefined, BLUR_RADIUS, width, height);\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <canvas ref={canvasRef} className={styles.canvas} width={width} height={height} />\n      <div className={styles.dots} />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank', 'noopener')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>('.message-content')!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl] as const);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [withThumb] = useState(!mediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {withThumb && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          />\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji, hasMessageText,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { calculateDimensionsForMessageMedia, ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReaction) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        isForwarded: isForwarding,\n        noAvatars,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForMedia}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            noUserColors={isOwn}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersectionForLoading={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            <MessageText\n              message={message}\n              emojiSize={emojiSize}\n              highlight={highlight}\n              isProtected={isProtected}\n              observeIntersectionForLoading={observeIntersectionForMedia}\n              observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n              withTranslucentThumbs={isCustomShape}\n            />\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForMedia}\n                observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo, transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasReply?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiBotInfo, ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 0) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n      const shouldShrink = width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE;\n\n      if (shouldShrink || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n  const prevDraft = usePrevious(draft);\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage || !lastSyncTime) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, lastSyncTime, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [\n    chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage, prevDraft, loadCustomEmojis,\n  ]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({\n        chatId, username: usernameLowered, query, offset,\n      });\n    }\n  }, [isAllowed, usernameLowered, chatId, queryInlineBot, query, offset]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback(() => {\n    isMouseInside.current = true;\n    onActivate();\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((l) => {\n      l.style.stroke = color;\n      l.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(false)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(true)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(false)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(true)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedText?: string;\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedText,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    openLimitReachedModal,\n    openPremiumModal,\n    addRecentCustomEmoji,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setInnerHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const setHtml = useCallback((newHtml: string) => {\n    setInnerHtml(newHtml);\n    requestAnimationFrame(() => {\n      processMessageInputForCustomEmoji();\n    });\n  }, []);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (newAttachments && newAttachments.some((l) => l.size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal],\n  );\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  useEffect(() => {\n    if (!html || editingMessage) return;\n    sendMessageAction({ type: 'typing' });\n  }, [editingMessage, html, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    EDITABLE_INPUT_CSS_SELECTOR,\n    setHtml,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const { isCustomEmojiTooltipOpen, closeCustomEmojiTooltip, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji && !attachments.length),\n    EDITABLE_INPUT_CSS_SELECTOR,\n    html,\n    setHtml,\n    customEmojiForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef, setHtml]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCustomEmojiTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu, setHtml]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: () => openPremiumModal({ initialSection: 'animated_emoji' }),\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: () => openChat({ id: currentUserId, shouldReplaceHistory: true }),\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, openChat, openPremiumModal, showNotification]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage, lastSyncTime);\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, [handleSetAttachments]);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, captionLimit,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedText) {\n      setHtml(requestedText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedText, resetOpenChatWithDraft, setHtml]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        captionLimit={captionLimit}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n        shouldSuggestCustomEmoji={shouldSuggestCustomEmoji}\n        customEmojiForEmoji={customEmojiForEmoji}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {(isChatWithBot && isBotMenuButtonCommands\n            && botCommands !== false && !activeVoiceRecording && !editingMessage) && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={buildClassName('symbol-menu-button', isSymbolMenuOpen && 'activated')}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            noFocusInterception={attachments.length > 0}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId\n      && chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId) ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedText = selectRequestedText(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedText,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      isGiftPremiumModalOpen: global.giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport type { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiUser;\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n  requestedDraft?: GlobalState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useInterval(checkAppVersion, APP_OUTDATED_TIMEOUT_MS, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId && !isPhoneCallActive) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId, isPhoneCallActive]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      lastSyncTime,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall && selectUser(global, requestedAttachBotInstall.botId),\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectScheduledMessages","selectChatMessages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","setIds","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","customEmojis","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_STATE","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","threadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","user","selectUser","isDeletedUser","replyToMsgId","isLocal","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","poll","option","offset","shouldResetVoters","offsets","nextOffset","loadPollOptionResults","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","getActions","shortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","updateGifSearch","addedStickers","updateStickerSets","sets","loadStickerSets","added","addedCustomEmojis","loadCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","loadFeaturedStickers","premiumGifts","cachedSet","selectStickerSet","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","stickerSetId","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","updateStickersForEmoji","loadStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","searchMessagesByDate","ManagementProgress","username","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","previousGlobal","loadTopMessages","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","selectPaymentInputInvoice","saveInfo","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","step","isClosed","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","defaultReaction","reactors","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","isActiveChat","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","currentReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","r","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","emojiStatus","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","reorderStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","maxFolders","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","classList","remove","useLayoutEffect","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","searchInput","handleHotkeySearchClick","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","Promise","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","_","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","isChatWithBot","isSelectModeActive","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","isEmbedded","appearanceOrder","isLastInList","memoFirstUnreadIdRef","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isVisible","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","role","AnimatedIconFromSticker","play","noLoop","nonInteractive","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","activeReaction","isInMeta","stopActiveReaction","centerIconId","effectId","mediaHashCenterIcon","mediaHashEffect","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","tgsUrl","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","isVideo","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","openModal","actionText","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","withSharedAnimation","cacheBuster","isLowPriority","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","CustomEmoji","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","withAspectRatio","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","withThumb","thumbRef","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","useMediaTransition","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","aspectRatio","toFixed","ProgressSpinner","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","withVideo","formatPhoneNumberWithCode","getPercentage","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","canvasRef","dataUri","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","useTimeout","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","videoClassName","renderIcon","recentReplierIds","recentRepliers","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","selectIsDownloading","actualThreadInfo","hasUnreadReaction","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","MessageText","withTranslucentThumbs","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","reactionIds","entry","dataset","useBackgroundMode","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isBotInfoEmpty","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","shouldShrink","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","STYLE_TAG_REGEX","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","customIcon","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","stripCustomEmoji","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","entity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedText","selectRequestedText","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","html","setInnerHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","setHtml","newHtml","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","handleSetAttachments","newValue","newAttachments","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","useEmojiTooltip","insertHtmlAndUpdateCursor","EDITABLE_INPUT_ID","selection","getSelection","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertTextAndUpdateCursor","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","prevDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","customEmojiIds","prevHtml","useDraft","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","textContents","getElementsByTagName","node","HTMLElement","tagName","replaceWith","createTextNode","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","trimEnd","preparePastedHtml","containsCustomEmoji","items","getFilesFromDataTransferItems","all","file","textToPaste","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","handleCustomEmojiSelect","isFree","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onCustomEmojiSelect","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","gameMessage","currentUser","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","closePaymentModal","clearReceipt","checkAppVersion","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","toggle","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}