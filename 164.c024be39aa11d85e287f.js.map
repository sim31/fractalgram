{"version":3,"file":"164.c024be39aa11d85e287f.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/util/deeplink.ts","webpack://telegram-t/./src/modules/actions/api/chats.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/hooks/useThrottle.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack://telegram-t/./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/hooks/useDebounce.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport { ANIMATION_END_DELAY, FAST_SMOOTH_MAX_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { getDispatch } from '../lib/teact/teactn';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url';\n\nexport const processDeepLink = (url: string) => {\n  const { protocol, searchParams, pathname } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openStickerSetShortName,\n    focusMessage,\n  } = getDispatch();\n\n  const method = pathname.replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const { domain, post, comment } = params;\n\n      if (domain !== 'telegrampassport') {\n        openChatByUsername({\n          username: domain,\n          messageId: Number(post),\n          commentId: Number(comment),\n        });\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: -Number(channel),\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n  LOCALIZED_TIPS, RE_TG_LINK, RE_TME_ADDSTICKERS_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n  selectThreadInfo, selectCurrentChat,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\nimport { processDeepLink } from '../../../util/deeplink';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst CHATS_PRELOAD_INTERVAL = 300;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), CHATS_PRELOAD_INTERVAL, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat && chat.lastMessage && chat.lastMessage.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openLinkedChat', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const chatFullInfo = await callApi('fetchFullChat', chat);\n\n    if (chatFullInfo?.fullInfo?.linkedChatId) {\n      actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n    }\n  })();\n});\n\naddReducer('focusMessageInComments', (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n    if (!result) {\n      return;\n    }\n\n    actions.focusMessage({ chatId, threadId, messageId });\n  })();\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions, payload) => {\n  const { langCode } = payload;\n\n  const usernamePostfix = langCode === 'pt-br'\n    ? 'BR'\n    : LOCALIZED_TIPS.includes(langCode) ? (langCode as string).toUpperCase() : '';\n\n  actions.openChatByUsername({ username: `${TIPS_USERNAME}${usernamePostfix}` });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('preloadArchivedChats', () => {\n  (async () => {\n    while (!getGlobal().chats.isFullyLoaded.archived) {\n      const currentGlobal = getGlobal();\n      const listIds = currentGlobal.chats.listIds.archived;\n      const oldestChat = listIds\n        ? listIds\n          .map((id) => currentGlobal.chats.byId[id])\n          .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(currentGlobal, chat.id))\n          .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n        : undefined;\n\n      await loadChats('archived', oldestChat?.id, oldestChat?.lastMessage!.date);\n      await pause(CHATS_PRELOAD_INTERVAL);\n    }\n  })();\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  (async () => {\n    const { chatId, userId }: { chatId: number; userId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, userId);\n    if (!chat || !user) {\n      return;\n    }\n    await callApi('deleteChatUser', { chat, user });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId && global.currentUserId === userId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  (async () => {\n    const { chatId }: { chatId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n    await callApi('deleteChat', { chatId: chat.id });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds?.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openChatByInvite', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('openChatByInvite', hash);\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.chatId });\n  })();\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  const stickersMatch = RE_TME_ADDSTICKERS_LINK.exec(url);\n  if (stickersMatch) {\n    actions.openStickerSetShortName({\n      stickerSetShortName: stickersMatch[1],\n    });\n  } else if (url.match(RE_TG_LINK)) {\n    processDeepLink(url.match(RE_TG_LINK)[0]);\n  } else {\n    let match = RE_TME_INVITE_LINK.exec(url);\n\n    if (match) {\n      const hash = match[1];\n\n      actions.openChatByInvite({ hash });\n    } else {\n      match = RE_TME_LINK.exec(url)!;\n\n      const username = match[1];\n      const chatOrChannelPostId = match[2] ? Number(match[2]) : undefined;\n      const messageId = match[3] ? Number(match[3]) : undefined;\n      const commentId = match[4] === 'comment' && match[5] ? Number(match[5]) : undefined;\n\n      // Open message in private group\n      if (username === 'c' && chatOrChannelPostId && messageId) {\n        actions.focusMessage({\n          chatId: -chatOrChannelPostId,\n          messageId,\n        });\n      } else {\n        actions.openChatByUsername({\n          username,\n          messageId: messageId || chatOrChannelPostId,\n          commentId,\n        });\n      }\n    }\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username, messageId, commentId } = payload!;\n\n  (async () => {\n    const chat = selectCurrentChat(global);\n\n    if (!commentId) {\n      if (chat && chat.username === username) {\n        actions.focusMessage({ chatId: chat.id, messageId });\n        return;\n      }\n      await openChatByUsername(actions, username, messageId);\n      return;\n    }\n\n    const { chatId, type } = selectCurrentMessageList(global) || {};\n    const usernameChat = selectChatByUsername(global, username);\n    if (chatId && usernameChat && type === 'thread') {\n      const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n      if (threadInfo && threadInfo.chatId === chatId) {\n        actions.focusMessage({\n          chatId: threadInfo.chatId,\n          threadId: threadInfo.threadId,\n          messageId: commentId,\n        });\n        return;\n      }\n    }\n\n    if (!messageId) return;\n\n    await openCommentsByUsername(actions, username, messageId, commentId);\n  })();\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo?.members?.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as number[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({ message: 'User does not exist' });\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: number | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/environment';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return undefined;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi('fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser,\n  selectChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo?.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_ADDSTICKERS_LINK, RE_TME_INVITE_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)\n        || button.value.match(RE_TME_ADDSTICKERS_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId));\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start');\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { hash, lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots', { hash });\n    if (!result) {\n      return;\n    }\n\n    const { hash: newHash, ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        hash: newHash,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: number;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string, replyingTo?: number) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n  selectNotifySettings,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n      const { hasWebNotifications } = selectNotifySettings(global);\n      if (hasWebNotifications) {\n        showNewMessageNotification({\n          chat,\n          message,\n          isActiveChat,\n        });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, dependencies.concat([isFrozen]));\n\n  return value;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number, noFirst = false) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms, !noFirst);\n  }, [ms, noFirst]);\n};\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError' | 'setLeftColumnWidth' | 'resetLeftColumnWidth'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n  setLeftColumnWidth,\n  resetLeftColumnWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError', 'setLeftColumnWidth', 'resetLeftColumnWidth',\n  ]),\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  const handleMouseUp = () => {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  };\n\n  const initResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  };\n\n  const resetResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  };\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    const stopDrag = () => {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      onResize(elementRef.current!.offsetWidth);\n      unmarkIsActive();\n    };\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch' | 'restartBot'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n  restartBot,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleRestartBot}\n        >\n          {lang('BotRestart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat?.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch', 'restartBot',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n) {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nexport default (message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = getCoverSize(audio, voice, media);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, origin = AudioOrigin.Inline, className, noUi, sender, focusMessage, closeAudioPlayer, chat,\n}) => {\n  const lang = useLang();\n  const { audio, voice } = getMessageContent(message);\n  const isVoice = Boolean(voice);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n  const { playPause, stop, isPlaying } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    origin,\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n\n    return {\n      sender,\n      chat,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiUser,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUpdateConnectionStateType,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectCountNotMutedUnread,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useBrowserOnline from '../../hooks/useBrowserOnline';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'openPreviousChat' | 'loadPinnedMessages' |\n  'toggleLeftColumn' | 'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  openPreviousChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = (!isBrowserOnline || connectionState === 'connectionStateConnecting')\n    && (IS_SINGLE_COLUMN_LAYOUT || (IS_TABLET_COLUMN_LAYOUT && !shouldShowCloseButton));\n\n  function renderInfo() {\n    if (isConnecting) {\n      return (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('WaitingForNetwork')}\n          </h3>\n        </>\n      );\n    }\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={isConnecting ? Infinity : currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={renderingPinnedMessagesCount || 0}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'openPreviousChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n    noAutoFreeze: true,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: number[];\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && !isBuffered,\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n  usePauseOnInactive(videoRef, isPlayAllowed);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {!previewBlobUrl && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n        />\n      )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n      {isInline && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {(isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner) && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-upload-progress\">\n          {isUploading ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo, phoneCodeList,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  inPreview,\n  lastSyncTime,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { selectTheme } from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  theme,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {(shouldRenderThumb || mediaData) && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled,\n  threadInfo,\n  usersById,\n  chatsById,\n  openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleMessageSelection' | 'clickInlineButton' | 'disableContextMenuHint'>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  toggleMessageSelection,\n  clickInlineButton,\n  disableContextMenuHint,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { id: messageId, chatId, threadInfo } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !isRepliesChat && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    if (isLocal) {\n      return;\n    }\n\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [isLocal, toggleMessageSelection, messageId, isAlbum, album]);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    isSwiped,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isLocal,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    onContextMenu,\n    handleBeforeContextMenu,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    Boolean(isScheduled),\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n    const textContentClass = buildClassName(\n      'text-content',\n      shouldInlineMeta && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMetaClick}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup) && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isLocal && !isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {!isLocal && isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMetaClick}\n            />\n          )}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isFocused,\n      isForwarding,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleMessageSelection',\n    'clickInlineButton',\n    'disableContextMenuHint',\n  ]),\n)(Message));\n","import { RefObject } from 'react';\nimport React, { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isLocal: boolean,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n) {\n  const { setReplyingToId } = getDispatch();\n\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n\n    if (!isLocal) {\n      handleBeforeContextMenu(e);\n    }\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode && !isLocal) {\n      selectMessage(e);\n    } else if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply]);\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode && !isLocal ? handleContextMenu : undefined,\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    isSwiped,\n  };\n}\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport { AudioOrigin, IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: number,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, showNotification, lang, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId, origin: AudioOrigin.Inline });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isActive: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  openHistoryCalendar: Function;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isActive,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  openHistoryCalendar,\n}) => {\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isActive,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SENSITIVE_AREA } from '../../../config';\nimport resetScroll from '../../../util/resetScroll';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isActive: boolean,\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isActive) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGreetingStickers' | 'sendMessage' | 'markMessageListRead'>;\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps & DispatchProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  loadGreetingStickers,\n  sendMessage,\n  markMessageListRead,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const sticker = stickers?.length ? stickers[userId % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGreetingStickers', 'sendMessage', 'markMessageListRead',\n  ]),\n\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: number;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isChatPrivate,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  isActive: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadViewportMessages' | 'setScrollOffset' | 'openHistoryCalendar'>;\n\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isActive,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  loadViewportMessages,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds && messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isChatPrivate(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isActive={isActive}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          openHistoryCalendar={openHistoryCalendar}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items)\n        .find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type) && item.kind === 'file');\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      e.preventDefault();\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: number,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots?.[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  isPollModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  botKeyboardPlaceholder?: string;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n  topInlineBotIds?: number[];\n  isInlineBotLoading: boolean;\n  inlineBots?: Record<string, false | InlineBotSettings>;\n  botCommands?: ApiBotCommand[] | false;\n  chatBotCommands?: ApiBotCommand[];\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' |\n  'addRecentEmoji' | 'sendInlineBotResult'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  openChat,\n  addRecentEmoji,\n  sendInlineBotResult,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          void handleSend();\n        }\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            shouldSetFocus={!attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'sendInlineBotResult',\n  ]),\n)(Composer));\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: cleanHtml });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType, MessageList as GlobalMessageList } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { createMessageHash } from '../../util/routing';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode' |\n  'closePaymentModal' | 'clearReceipt'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n  closePaymentModal,\n  clearReceipt,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, true);\n  };\n\n  useHistoryBack(renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists ? messageLists.map(createMessageHash) : []);\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n            >\n              {(isActive) => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    isActive={isActive}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={isMessagingDisabled || isSelectModeActive || isPinnedMessageList}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n    'closePaymentModal', 'clearReceipt',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteChatMember'>;\n\nconst DeleteMemberModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['deleteChatMember']),\n)(DeleteMemberModal));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID, ApiChat,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: number;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos' | 'setNewChatMembersDialogState'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  members,\n  usersById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  setNewChatMembersDialogState,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<number | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId, origin: AudioOrigin.SharedMedia });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(id: number) {\n    return id === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(id);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      usersById,\n      chatsById,\n      ...(hasMembersTab && members && { members }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n    'setNewChatMembersDialogState',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { pick, unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport searchWords from '../../util/searchWords';\nimport {\n  getUserFullName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  isActive: boolean;\n  onNextStep: (memberIds: number[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery'>;\n\nconst AddChatMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  setUserSearchQuery,\n  onClose,\n  isActive,\n  loadContactList,\n}) => {\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<number[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds.filter((id) => !memberIds.includes(id));\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return !memberIds.includes(contactId)\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup));\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds,\n    currentUserId, usersById, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setUserSearchQuery']),\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' | 'setNewChatMembersDialogState' |\n  'closeLocalTextSearch' | 'closePollResults' | 'addChatMembers' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  addChatMembers,\n  setNewChatMembersDialogState,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, true);\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: number[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n    'addChatMembers',\n    'setNewChatMembersDialogState',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin, LangCode } from '../../types';\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { processDeepLink } from '../../util/deeplink';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  audioOrigin?: AudioOrigin;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  language?: LangCode;\n  openedStickerSetShortName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline' |\n  'loadTopInlineBots' | 'loadEmojiKeywords' | 'openStickerSetShortName' | 'loadCountryList'\n)>;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  audioOrigin,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  language,\n  openedStickerSetShortName,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n  loadTopInlineBots,\n  loadEmojiKeywords,\n  loadCountryList,\n  openStickerSetShortName,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline,\n    loadTopInlineBots, loadEmojiKeywords, loadCountryList, language,\n  ]);\n\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} origin={audioOrigin} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId, origin } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      audioOrigin: origin,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      language: global.settings.byKey.language,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n    'loadTopInlineBots', 'loadEmojiKeywords', 'openStickerSetShortName', 'loadCountryList',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","content","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","leftColumnWidth","management","byChatId","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","processDeepLink","protocol","searchParams","pathname","URL","openChatByInvite","openChatByUsername","openStickerSetShortName","getDispatch","method","replace","params","forEach","value","key","domain","post","comment","username","commentId","channel","invite","set","stickerSetShortName","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","serverTimeOffset","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","fetchChatByUsername","localChat","selectChatByUsername","isMin","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","chatFullInfo","linkedChatId","selectSupportChat","langCode","usernamePostfix","LOCALIZED_TIPS","toUpperCase","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","currentGlobal","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","createdChannel","channelId","accessHash","createChannel","userId","activeChat","activeChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","includedId","concat","emoticon","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","stickersMatch","RE_TME_ADDSTICKERS_LINK","match","RE_TG_LINK","RE_TME_INVITE_LINK","RE_TME_LINK","chatOrChannelPostId","channelPostId","openPreviousChat","usernameChat","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","fullChat","isPreHistoryHidden","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","uploadProgressCallbacks","Map","runDebouncedForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","progressCallback","attachment","messageLocalId","has","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","clearWebPagePreview","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","reason","peer","minId","selectFirstUnreadId","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","localChats","localUsers","globalChats","globalUsers","userIds","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","contactIds","contactList","updatedUsers","loadTopMessages","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","threadsById","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","Array","prototype","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","updateAppBadge","selectCountNotMutedUnread","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","topPeers","lastRequestedAt","getServerTime","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","runDebouncedForSearch","sendBotCommand","command","button","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","newHash","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","hasWebNotifications","selectNotifySettings","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","unique","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","delayedGlobal","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","settings","privacy","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","useBrowserOnline","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","ANIMATION_LEVEL_OPTIONS","memo","withGlobal","searchQuery","chatsById","animationLevel","byKey","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","className","onClick","ariaLabel","buildClassName","handleSearchFocus","useCallback","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","Switcher","label","checked","noAnimation","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onChange","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","usersById","orderedFolderIds","shouldSkipHistoryAnimations","notifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","noFirst","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","current","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","min","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","name","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","style","width","remove","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","offsetWidth","add","useResize","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","windowSize","handleResize","MAX_MESSAGES_LIST_WIDTH","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canLeave","joinChannel","openLocalTextSearch","restartBot","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","focus","searchInput","disabled","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","onload","scale","blob","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","Error","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","floor","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","AudioOrigin","noUi","isVoice","senderName","mediaData","mediaLoader","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","useAudioPlayer","makeTrackId","getMediaDuration","handleClick","handleClose","clearMediaSession","renderAudio","subtitle","renderVoice","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","windowWidth","useWindowSize","isLeftColumnHideable","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","Infinity","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","preventMessageInputBlur","onContextMenu","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","shouldAutoLoad","isInSelectMode","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","isPlayAllowed","wasPlaying","freezePlaying","paused","unfreezePlaying","contains","unfreezePlayingOnRaf","fastRaf","hasFocus","useBackgroundMode","shouldAutoPlay","videoRef","getMessageWebPageVideo","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTarget","currentTime","duration","usePauseOnInactive","useVideoCleanup","videoClassName","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","Avatar","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","stopCurrentAudio","ROUND_VIDEO_DIMENSIONS","onEnded","recentReplierIds","recentRepliers","hasUnread","GROUP_MESSAGE_HOVER_ATTRIBUTE","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","canReply","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","clickInlineButton","bottomMarkerRef","appendixRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","selectMessage","handleMouseDown","handleDoubleClick","handleContentDoubleClick","isSwiped","markSwiped","unmarkSwiped","startedAt","target","matches","useOuterHandlers","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","calculatedWidth","noMediaCorners","extraPadding","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","messageGroups","isViewportNewest","isUnread","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","observe","useIntersectionObserver","rootRef","throttleMs","margin","freezeForReading","unfreezeForReading","noAutoFreeze","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","resetScroll","observeIntersectionForFab","freezeForFab","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","lastUnreadMessageId","loadGreetingStickers","debounceMs","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","isCreator","isBot","threadFirstMessageId","selectFirstMessageId","hasTools","canPost","setScrollOffset","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","shouldRunLast","container","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","parseMessageInput","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","shouldSuggestStickers","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevChatId","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","kind","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredUsers","onSelectResult","withUsername","canAttachEmbedLinks","MessageInput","forcedPlaceholder","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","CLOSE_ANIMATION_DURATION","isImage","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioMessage","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","createMessageHash","isMessagingDisabled","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","handleLoadMore","messageIdsRef","getMessageContentIds","reverse","getMore","useInfiniteScroll","runThrottledForScroll","isScrollingProgrammatically","contactName","getUserFirstOrLastName","deleteChatMember","handleDeleteChatMember","Modal","onEnter","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","MEMBERS_SLICE","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","determineProfileState","tabListEl","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","getMemberContextAction","handler","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","FloatingActionButton","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","sortChatIds","foundContactIds","fullName","getUserFullName","contactId","isUserBot","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","memberId","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","audioOrigin","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","LOCATION_HASH","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","stopEvent","IS_PWA","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}