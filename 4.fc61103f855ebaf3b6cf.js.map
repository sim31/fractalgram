{"version":3,"sources":["webpack:///./src/modules/actions/ui/localSearch.ts","webpack:///./src/modules/actions/ui/chats.ts","webpack:///./src/modules/actions/ui/messages.ts","webpack:///./src/modules/actions/ui/globalSearch.ts","webpack:///./src/modules/actions/ui/stickerSearch.ts","webpack:///./src/modules/actions/ui/users.ts","webpack:///./src/modules/actions/ui/settings.ts","webpack:///./src/modules/actions/ui/misc.ts","webpack:///./src/modules/actions/ui/payments.ts","webpack:///./src/modules/actions/api/chats.ts","webpack:///./src/modules/actions/api/messages.ts","webpack:///./src/modules/actions/api/symbols.ts","webpack:///./src/modules/actions/api/globalSearch.ts","webpack:///./src/modules/actions/api/sync.ts","webpack:///./src/modules/actions/api/localSearch.ts","webpack:///./src/modules/actions/api/management.ts","webpack:///./src/modules/actions/api/users.ts","webpack:///./src/modules/reducers/bots.ts","webpack:///./src/modules/actions/api/bots.ts","webpack:///./src/modules/actions/api/settings.ts","webpack:///./src/modules/actions/api/twoFaSettings.ts","webpack:///./src/modules/actions/api/payments.ts","webpack:///./src/util/requestQuery.ts","webpack:///./src/modules/actions/apiUpdaters/chats.ts","webpack:///./src/modules/actions/apiUpdaters/messages.ts","webpack:///./src/modules/actions/apiUpdaters/users.ts","webpack:///./src/modules/actions/apiUpdaters/symbols.ts","webpack:///./src/modules/actions/apiUpdaters/misc.ts","webpack:///./src/modules/actions/apiUpdaters/settings.ts","webpack:///./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack:///./src/hooks/useBeforeUnload.ts","webpack:///./src/components/ui/Switcher.tsx","webpack:///./src/components/left/main/LeftMainHeader.tsx","webpack:///./src/components/left/ConnectionState.tsx","webpack:///./src/hooks/useThrottledMemo.ts","webpack:///./src/hooks/useThrottle.ts","webpack:///./src/components/left/main/ChatFolders.tsx","webpack:///./src/components/left/search/LeftSearch.async.tsx","webpack:///./src/components/left/main/ContactList.async.tsx","webpack:///./src/components/left/NewChatButton.tsx","webpack:///./src/components/left/main/LeftMain.tsx","webpack:///./src/hooks/useBrowserOnline.ts","webpack:///./src/components/left/settings/Settings.async.tsx","webpack:///./src/components/left/newChat/NewChat.async.tsx","webpack:///./src/components/left/ArchivedChats.async.tsx","webpack:///./src/components/left/LeftColumn.tsx","webpack:///./src/hooks/useWindowSize.ts","webpack:///./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack:///./src/components/middle/HeaderMenuContainer.async.tsx","webpack:///./src/components/middle/HeaderActions.tsx","webpack:///./src/hooks/useWebpThumbnail.ts","webpack:///./src/components/middle/PinnedMessageNavigation.tsx","webpack:///./src/components/middle/HeaderPinnedMessage.tsx","webpack:///./src/components/middle/AudioPlayer.tsx","webpack:///./src/components/middle/MiddleHeader.tsx","webpack:///./src/components/middle/helpers/groupMessages.ts","webpack:///./src/components/middle/helpers/preventMessageInputBlur.ts","webpack:///./src/components/middle/hooks/useStickyDates.ts","webpack:///./src/hooks/useDebounce.ts","webpack:///./src/components/middle/MessageScroll.tsx","webpack:///./src/components/middle/message/helpers/buildContentClassName.ts","webpack:///./src/components/middle/message/helpers/mediaDimensions.ts","webpack:///./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack:///./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack:///./src/components/middle/message/hooks/useFocusMessage.ts","webpack:///./src/components/middle/message/ContextMenuContainer.async.tsx","webpack:///./src/components/middle/ActionMessage.tsx","webpack:///./src/components/common/EmbeddedMessage.tsx","webpack:///./src/components/middle/message/MessageMeta.tsx","webpack:///./src/components/middle/message/Sticker.tsx","webpack:///./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack:///./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack:///./src/components/middle/message/Photo.tsx","webpack:///./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack:///./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack:///./src/components/middle/message/Video.tsx","webpack:///./src/components/middle/message/Contact.tsx","webpack:///./src/components/ui/CheckboxGroup.tsx","webpack:///./src/components/middle/message/PollOption.tsx","webpack:///./src/components/middle/message/Poll.tsx","webpack:///./src/components/middle/message/WebPage.tsx","webpack:///./src/components/middle/message/Invoice.tsx","webpack:///./src/components/middle/message/hocs/withSelectControl.tsx","webpack:///./src/components/middle/message/Album.tsx","webpack:///./src/components/middle/message/RoundVideo.tsx","webpack:///./src/components/middle/message/InlineButtons.tsx","webpack:///./src/components/middle/message/CommentButton.tsx","webpack:///./src/components/middle/message/Message.tsx","webpack:///./src/components/middle/MessageList.tsx","webpack:///./src/components/middle/ScrollDownButton.tsx","webpack:///./src/components/middle/composer/helpers/buildAttachment.ts","webpack:///./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack:///./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack:///./src/util/voiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack:///./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack:///./src/components/middle/composer/hooks/useDraft.ts","webpack:///./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack:///./src/components/common/DeleteMessageModal.async.tsx","webpack:///./src/components/ui/ResponsiveHoverButton.tsx","webpack:///./src/components/middle/composer/AttachMenu.async.tsx","webpack:///./src/components/middle/composer/SymbolMenu.async.tsx","webpack:///./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack:///./src/components/middle/composer/MentionTooltip.async.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.async.tsx","webpack:///./src/components/middle/composer/StickerTooltip.async.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.async.tsx","webpack:///./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack:///./src/components/middle/composer/AttachmentModal.async.tsx","webpack:///./src/components/middle/composer/PollModal.async.tsx","webpack:///./src/components/middle/composer/DropArea.async.tsx","webpack:///./src/components/middle/composer/WebPagePreview.tsx","webpack:///./src/components/common/CalendarModal.async.tsx","webpack:///./src/components/payment/PaymentModal.async.tsx","webpack:///./src/components/payment/ReceiptModal.async.tsx","webpack:///./src/components/middle/composer/Composer.tsx","webpack:///./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack:///./src/util/insertHtmlInSelection.ts","webpack:///./src/util/deleteLastCharacterOutsideSelection.ts","webpack:///./src/components/middle/composer/hooks/useEditing.ts","webpack:///./src/components/middle/MobileSearch.async.tsx","webpack:///./src/components/middle/MessageSelectToolbar.async.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.async.tsx","webpack:///./src/components/middle/MiddleColumn.tsx","webpack:///./src/hooks/useCustomBackground.ts","webpack:///./src/components/right/RightHeader.tsx","webpack:///./src/components/right/hooks/useProfileViewportIds.ts","webpack:///./src/components/right/hooks/useProfileState.ts","webpack:///./src/components/right/ProfilePhoto.tsx","webpack:///./src/components/right/ProfileInfo.tsx","webpack:///./src/components/right/hooks/usePhotosPreload.ts","webpack:///./src/components/right/ChatExtra.tsx","webpack:///./src/components/right/DeleteMemberModal.tsx","webpack:///./src/components/right/Profile.tsx","webpack:///./src/components/right/hooks/useTransitionFixes.ts","webpack:///./src/hooks/useCacheBuster.ts","webpack:///./src/components/right/RightSearch.async.tsx","webpack:///./src/components/right/management/Management.async.tsx","webpack:///./src/components/right/StickerSearch.async.tsx","webpack:///./src/components/right/GifSearch.async.tsx","webpack:///./src/components/right/PollResults.async.tsx","webpack:///./src/components/right/AddChatMembers.tsx","webpack:///./src/components/right/RightColumn.tsx","webpack:///./src/components/mediaViewer/MediaViewer.async.tsx","webpack:///./src/components/main/Notifications.async.tsx","webpack:///./src/components/main/Dialogs.async.tsx","webpack:///./src/components/main/ForwardPicker.async.tsx","webpack:///./src/components/main/SafeLinkModal.async.tsx","webpack:///./src/components/main/HistoryCalendar.async.tsx","webpack:///./src/components/main/Main.tsx","webpack:///./src/bundles/main.ts"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","includes","direction","Down","Up","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","content","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","replaceSettings","theme","settings","replaceThemeSettings","management","byChatId","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","serverTimeOffset","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","requestThreadInfoUpdate","selectSupportChat","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","InProgress","createdChannel","channelId","accessHash","Complete","Error","getDispatch","createChannel","userId","activeChat","activeChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","match","RE_TME_INVITE_LINK","exec","RE_TME_LINK","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","Loading","Closed","uploadProgressCallbacks","Map","runThrottledForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","Backwards","Around","round","MESSAGE_LIST_SLICE","Forwards","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","localId","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","scheduledAt","clearWebPagePreview","value","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","reason","peer","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","copyTextToClipboard","link","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","lastReadInboxMessageId","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","threadsById","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","topPeers","lastRequestedAt","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","runDebouncedForSearch","buildInputPrivacyRules","visibility","allowedIds","deniedIds","usersById","chatsById","rules","collectUsers","collectChats","allowedUsers","allowedChats","blockedUsers","blockedChats","button","sendBotCommand","command","openTelegramLink","toggleSafeLinkModal","alert","isError","showDialog","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","topInlineBots","newHash","inlineBotData","inlineBot","switchPm","canLoadMore","bot","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","bio","profileEdit","ProfileEditProgress","currentUser","Idle","loadedWallpapers","wallpapers","file","previewBlobUrl","URL","createObjectURL","slug","UPLOADING_WALLPAPER_SLUG","document","fileName","size","mimeType","wallpaper","firstWallpaper","withLocalMedia","blocked","blockedIds","contactId","addBlockedContact","removeBlockedContact","activeSessions","session","isCurrent","addNotifyExceptions","peerType","shouldShowPreviews","updateNotifySettings","hasContactJoinedNotifications","languages","phoneNumberSettings","lastSeenSettings","profilePhotoSettings","forwardsSettings","chatInviteSettings","privacy","lastSeen","profilePhoto","forwards","chatInvite","privacyKey","allowUserIds","allowChatIds","blockUserIds","blockChatIds","isAllowList","contactsIds","isSensitiveEnabled","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","error","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","PaymentInfo","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","ShippingInfo","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","Checkout","sendStipeCredentials","shippingOptionId","saveCredentials","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","selectCountNotMutedUnread","updateAppBadge","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","updateScheduledMessage","updateListedAndViewportIds","firstUnreadId","selectFirstUnreadId","addViewportId","firstMessageId","selectThreadByMessage","isMessageLocal","updateChatLastMessage","currentLastMessage","findLastMessage","isDeleting","deleteMessages","newLastMessage","threadIdsToUpdate","unique","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectScheduledMessages","deleteChatScheduledMessages","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","key","addNotifyException","twoFaSettings","useBeforeUnload","callback","useEffect","onBeforeUnload","memo","name","label","checked","disabled","inactive","noAnimation","onChange","onCheck","handleChange","useCallback","currentTarget","className","buildClassName","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","animationLevel","byKey","globalSearchChatId","searchDate","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","ChatList","clearedDateSearchParam","clearedChatSearchParam","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","color","onClick","ariaLabel","handleSearchFocus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","resolverFn","ms","dependencies","valueRef","useRef","runThrottled","useThrottle","forceUpdate","useForceUpdate","useOnChange","isSync","current","orderedFolderIds","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","setActiveChatFolder","transitionRef","displayedFolders","folderCountersById","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","captureEvents","onSwipe","SwipeDirection","Left","min","Right","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","preventDefault","addEventListener","removeEventListener","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","folderType","noChatsText","TabList","tabs","activeTab","onSwitchTab","Transition","ref","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Extra","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isOnline","setIsOnline","navigator","onLine","useBrowserOnline","isMouseInside","handleSelectSettings","Settings","handleSelectContacts","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","handleSelectArchived","Archived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","NewChat","ContentType","ArchivedChats","RENDER_COUNT","shouldSkipHistoryAnimations","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","Main","setContactsFilter","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","EditProfile","Folders","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","handleSearchQuery","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","setSize","windowSize","handleResize","calculateMiddleFooterTransforms","windowWidth","canPost","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","leftColumnWidth","rightColumnWidth","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","HeaderMenuContainer","isChatChannel","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canSelect","selectIsInSelectMode","canLeave","joinChannel","openLocalTextSearch","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleSearchClick","querySelector","focus","searchInput","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","count","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","noUi","senderName","getSenderTitle","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","renderAudio","subtitle","renderVoice","audioMessage","originChat","messagesCount","pinnedIds","state","isSelectModeActive","originChatId","isChatWithBot","selectIsChatWithBot","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","getChatTitle","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","currentChat","selectIsChatMuted","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","unreadCountInfo","formatIntegerCompact","componentEl","add","remove","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","preventMessageInputBlur","activeElement","target","useStickyDates","isScrolled","markIsScrolled","runDebounced","shouldRunFirst","shouldRunLast","updateStickyDates","container","hasTools","contains","fastRaf","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","scrollTop","el","offsetTop","offsetHeight","top","findStuckDate","MessageScroll","loadMoreForwards","loadMoreBackwards","isViewportNewest","onFabToggle","onNotchToggle","children","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","toggleScrollTools","scrollHeight","scrollBottom","isAtBottom","observe","observeIntersection","useIntersectionObserver","rootRef","margin","MESSAGE_LIST_SENSITIVE_AREA","entries","triggerEntry","isIntersecting","resetScroll","useOnIntersect","observeIntersectionForFab","freeze","freezeForFab","unfreeze","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","teactFastList","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","createElement","font","whiteSpace","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isEmbedded","appearanceOrder","isLastInList","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","data-message-id","onMouseDown","onContextMenu","EmbeddedMessage","customText","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","Sticker","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_BACKGROUND","getCustomAppendixBg","inSelectMode","isSelected","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","Photo","shouldAutoLoad","isInSelectMode","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","useHeavyAnimationCheck","isPlayAllowed","wasPlaying","isFrozen","freezePlaying","paused","unfreezePlaying","unfreezePlayingOnRaf","hasFocus","useBackgroundMode","Video","shouldAutoPlay","videoRef","getMessageWebPageVideo","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","usePauseOnInactive","useVideoCleanup","videoClassName","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","data-initial","SafeLink","getMessageInvoice","photoUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","VideoWithSelect","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","RoundVideo","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","onEnded","InlineButtons","recentReplierIds","recentRepliers","hasUnread","data-cnt","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","selectOutgoingStatus","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","clickInlineButton","bottomMarkerRef","appendixRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","containerClassName","contentClassName","hasComments","classNames","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","handleGroupDocumentMessagesSelect","handleContainerDoubleClick","handleContentDoubleClick","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","MediaViewerOrigin","ScheduledInline","Inline","handleAudioPlay","handleAlbumMediaClick","albumMessageId","ScheduledAlbum","Album","IS_ANDROID","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","calculatedWidth","noMediaCorners","extraPadding","onDoubleClick","data-last-message-id","data-has-unread-mention","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","botDescription","chatBot","selectChatBot","isChatLoaded","isChannelChat","threadFirstMessageId","selectFirstMessageId","hasLinkedChat","markMessageListRead","setScrollOffset","openHistoryCalendar","scrollOffsetRef","selectScrollOffset","anchorIdRef","anchorTopRef","listItemElementsRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","hasFocusing","setHasFocusing","onTickEnd","throttleMs","observeIntersectionForReading","freezeForReading","unfreezeForReading","mentionIds","entry","dataset","messageGroups","listedMessages","orderBy","loadMoreAround","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","lastItemElement","lastItemHeight","newScrollTop","hasFirstMessageChanged","hasLastMessageChanged","isAlreadyFocusing","isResized","unreadDivider","isAnimatingScroll","dispatchHeavyAnimationEvent","withUsers","onScroll","currentAnchorIdRef","isSchedule","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","SCHEDULED_WHEN_ONLINE","formatHumanDate","renderMessages","focusNextReply","messageElements","lastMessageElement","buildAttachment","filename","blob","isQuick","quick","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","requestAnimationFrame","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","useInlineBotTooltip","html","markIsOpen","unmarkIsOpen","replace","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevUsername","botId","loadMore","closeTooltip","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltipAsync","StickerTooltip","BotKeyboardMenu","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","AttachmentModal","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","parseMessageInput","linkEntity","ApiMessageEntityTypes","TextUrl","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","MainButtonState","ReceiptModal","chatUser","selectChatUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardMessageId","stickersForEmoji","groupChatMembers","topInlineBotIds","isReceiptModalOpen","shouldSuggestStickers","isInlineBotLoading","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","loadEmojiKeywords","sendInlineBotResult","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","IS_VOICE_RECORDING_SUPPORTED","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeInlineBotTooltip","inlineBotHelp","loadMoreForInlineBot","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","prevChatId","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","EDITABLE_INPUT_MODAL_ID","items","media","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleStickerSelect","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","None","withQuick","QuickFile","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredUsers","canAttachEmbedLinks","faded","MessageInput","forcedPlaceholder","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onSelectResult","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioMessage","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","footerClassName","closeChat","isDiscussion","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isCreator","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","GroupMembers","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useProfileViewportIds","loadMoreMembers","searchMessages","tabType","mediaSearchType","resultType","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","currentResultType","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","isOnTop","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","useInfiniteScrollForSharedMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","noProfileInfo","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","isFirstPhoto","isSavedMessages","isDeleted","isDeletedUser","getMediaHash","forceAvatar","getChatAvatarHash","imageHash","ApiMediaFormat","BlobUrl","avatarThumbnailData","useBlurSync","dataUri","imageSrc","prevImageSrc","decoding","userFullName","getUserFullName","getFirstLetters","fullClassName","forceShowSelf","loadFullUser","fullName","slideAnimation","currentPhotoIndex","setCurrentPhotoIndex","isFirst","isLast","profile","currentIndex","usePhotosPreload","handleProfilePhotoClick","ProfileAvatar","selectPreviousMedia","selectNextMedia","excludedClosestSelector","renderPhoto","isVerifiedIconShown","isVerified","renderPhotoTabs","aria-label","VerifiedIcon","isUserOnline","getUserStatus","canInviteUsers","isUserRightBanned","getHasAdminRight","handleNotificationChange","copy","entity","formattedNumber","getChatLink","getChatDescription","ListItem","multiline","narrow","isStatic","contactName","getUserFirstOrLastName","deleteChatMember","handleDeleteChatMember","Modal","onEnter","TABS","buildInfiniteScrollItemSelector","isGroup","isChatGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","canDeleteMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","deletingUserId","setDeletingUserId","useEffectWithPrevDeps","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","getMemberContextAction","handler","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","teactOrderKey","contextActions","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","FloatingActionButton","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","sortChatIds","foundContactIds","isUserBot","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","UserInfo","isOverlaying","close","shouldScrollUp","GroupType","handleSelectChatMember","memberId","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","rightColumnAnimationTimeout","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","middleColumnTransitionClassNames","rightColumnTransitionClassNames","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","stopEvent","onDrop","onDragOver","initApi"],"mappings":"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","file":"4.fc61103f855ebaf3b6cf.js","sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread',\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport { ANIMATION_END_DELAY, FAST_SMOOTH_MAX_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo ? threadInfo.lastMessageId : undefined;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo ? threadInfo.lastMessageId : undefined;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids && ids.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport { ISettings, IThemeSettings, ThemeKey } from '../../../types';\nimport { replaceSettings, replaceThemeSettings } from '../../reducers';\n\naddReducer('setSettingOption', (global, actions, payload?: Partial<ISettings>) => {\n  return replaceSettings(global, payload);\n});\n\naddReducer('setThemeSettings', (global, actions, payload: { theme: ThemeKey } & Partial<IThemeSettings>) => {\n  const { theme, ...settings } = payload;\n\n  return replaceThemeSettings(global, theme, settings);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { ApiError } from '../../../api/types';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  const { id } = payload!;\n\n  return {\n    ...global,\n    isLeftColumnShown: id === undefined,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global) => {\n  const newNotifications = [...global.notifications];\n\n  newNotifications.pop();\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport {\n  clearPayment, closeInvoice,\n} from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 100;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat && chat.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions) => {\n  actions.openChatByUsername({ username: TIPS_USERNAME });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat && chat.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  (async () => {\n    const { chatId, userId } : {chatId: number; userId: number} = payload!;\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, userId);\n    if (!chat || !user) {\n      return;\n    }\n    await callApi('deleteChatUser', { chat, user });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId && global.currentUserId === userId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  (async () => {\n    const { chatId } : {chatId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n    await callApi('deleteChat', { chatId: chat.id });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds && orderedIds.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const result = await callApi('openChatByInvite', hash);\n      if (!result) {\n        return;\n      }\n\n      actions.openChat({ id: result.chatId });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const channelPostId = match[2] ? Number(match[2]) : undefined;\n\n    void openChatByUsername(actions, username, channelPostId);\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo && channel.fullInfo.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo && chat.fullInfo.members && chat.fullInfo.members.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as number[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n} from '../../selectors';\nimport { rafPromise, throttle } from '../../../util/schedulers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_IOS } from '../../../util/environment';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runThrottledForMarkRead = throttle((cb) => cb(), 1000, true);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const { chatId, messageId, replyOriginForId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void loadMessage(chat, messageId, replyOriginForId);\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage && chat.lastMessage.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const { maxId } = payload!;\n\n  runThrottledForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadMessageLink', (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchMessageLink', { chat, message });\n\n    if (result) {\n      copyTextToClipboard(result.link);\n    }\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords && currentEmojiKeywords.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords && currentEmojiKeywords.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string) {\n  const stickerSet = await callApi('fetchStickers', { stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const { nextOffsetId } = (resultsByType && resultsByType[type as ApiGlobalMessageSearchType]) || {};\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage, selectThreadInfo,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo && currentMessageListInfo.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin && currentMessageListInfoOrigin.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo && currentMessageListInfo.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results ? results.nextOffsetId : undefined;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo ? threadInfo.topMessageId : undefined;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults ? currentResults.nextOffsetId : undefined;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    serverTimeOffset,\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || Date.now() / 1000 + serverTimeOffset - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: Date.now() / 1000 + global.serverTimeOffset,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectReplyingToId, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60000; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { serverTimeOffset } = global;\n  const { hash, lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && Date.now() + serverTimeOffset - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots', { hash });\n    if (!result) {\n      return;\n    }\n\n    const { hash: newHash, ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        hash: newHash,\n        userIds: ids,\n        lastRequestedAt: Date.now(),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n  });\n});\n\naddReducer('resetInlineBot', ((global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n}));\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n} : {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: number;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    isGallery: result.isGallery,\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result || !result.message) {\n    return;\n  }\n\n  const { message, alert: isError } = result;\n\n  if (isError) {\n    getDispatch().showDialog({ data: { message } });\n  } else {\n    getDispatch().showNotification({ message });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport {\n  ApiPrivacyKey, PrivacyVisibility, ProfileEditProgress, IInputPrivacyRules, IInputPrivacyContact,\n  UPLOADING_WALLPAPER_SLUG,\n} from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { selectUser } from '../../selectors';\nimport {\n  addUsers, addBlockedContact, updateChats, updateUser, removeBlockedContact, replaceSettings, updateNotifySettings,\n  addNotifyExceptions,\n} from '../../reducers';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('updateProfile', (global, actions, payload) => {\n  const {\n    photo, firstName, lastName, bio: about, username,\n  } = payload!;\n\n  (async () => {\n    const { currentUserId } = global;\n    if (!currentUserId) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.InProgress,\n      },\n    });\n\n    if (photo) {\n      await callApi('updateProfilePhoto', photo);\n    }\n\n    if (firstName || lastName || about) {\n      const result = await callApi('updateProfile', { firstName, lastName, about });\n      if (result) {\n        global = getGlobal();\n        const currentUser = currentUserId && selectUser(global, currentUserId);\n\n        if (currentUser) {\n          setGlobal(updateUser(\n            global,\n            currentUser.id,\n            {\n              firstName,\n              lastName,\n              fullInfo: {\n                ...currentUser.fullInfo,\n                bio: about,\n              },\n            },\n          ));\n        }\n      }\n    }\n\n    if (username) {\n      const result = await callApi('updateUsername', username);\n      if (result && currentUserId) {\n        setGlobal(updateUser(getGlobal(), currentUserId, { username }));\n      }\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.Complete,\n      },\n    });\n  })();\n});\n\naddReducer('checkUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  (async () => {\n    // No need to check the username if profile update is already in progress\n    if (global.profileEdit && global.profileEdit.progress === ProfileEditProgress.InProgress) {\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      profileEdit: {\n        progress: global.profileEdit ? global.profileEdit.progress : ProfileEditProgress.Idle,\n        isUsernameAvailable: undefined,\n      },\n    });\n\n    const isUsernameAvailable = await callApi('checkUsername', username);\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      profileEdit: {\n        ...global.profileEdit!,\n        isUsernameAvailable,\n      },\n    });\n  })();\n});\n\naddReducer('loadWallpapers', () => {\n  (async () => {\n    const result = await callApi('fetchWallpapers', 0);\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: result.wallpapers,\n      },\n    });\n  })();\n});\n\naddReducer('uploadWallpaper', (global, actions, payload) => {\n  const file = payload;\n  const previewBlobUrl = URL.createObjectURL(file);\n\n  setGlobal({\n    ...global,\n    settings: {\n      ...global.settings,\n      loadedWallpapers: [\n        {\n          slug: UPLOADING_WALLPAPER_SLUG,\n          document: {\n            fileName: '',\n            size: file.size,\n            mimeType: file.type,\n            previewBlobUrl,\n          },\n        },\n        ...(global.settings.loadedWallpapers || []),\n      ],\n    },\n  });\n\n  (async () => {\n    const result = await callApi('uploadWallpaper', file);\n    if (!result) {\n      return;\n    }\n\n    const { wallpaper } = result;\n\n    global = getGlobal();\n    if (!global.settings.loadedWallpapers) {\n      return;\n    }\n\n    const firstWallpaper = global.settings.loadedWallpapers[0];\n    if (!firstWallpaper || firstWallpaper.slug !== UPLOADING_WALLPAPER_SLUG) {\n      return;\n    }\n\n    const withLocalMedia = {\n      ...wallpaper,\n      document: {\n        ...wallpaper.document,\n        previewBlobUrl,\n      },\n    };\n\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: [\n          withLocalMedia,\n          ...global.settings.loadedWallpapers.slice(1),\n        ],\n      },\n    });\n  })();\n});\n\naddReducer('loadBlockedContacts', () => {\n  (async () => {\n    const result = await callApi('fetchBlockedContacts');\n\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n\n    if (result.users && result.users.length) {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    }\n    if (result.chats && result.chats.length) {\n      newGlobal = updateChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n    }\n\n    newGlobal = {\n      ...newGlobal,\n      blocked: {\n        ...newGlobal.blocked,\n        ids: [...(newGlobal.blocked.ids || []), ...result.blockedIds],\n        totalCount: result.totalCount,\n      },\n    };\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('blockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n\n  (async () => {\n    const result = await callApi('blockContact', contactId);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(addBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('unblockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n  let accessHash: string | undefined;\n  const isPrivate = isChatPrivate(contactId);\n\n  if (isPrivate) {\n    const user = selectUser(global, contactId);\n    if (!user) {\n      return;\n    }\n\n    accessHash = user.accessHash;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', contactId, accessHash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(removeBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('loadAuthorizations', () => {\n  (async () => {\n    const result = await callApi('fetchAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      activeSessions: result,\n    });\n  })();\n});\n\naddReducer('terminateAuthorization', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('terminateAuthorization', hash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      activeSessions: newGlobal.activeSessions.filter((session) => session.hash !== hash),\n    });\n  })();\n});\n\naddReducer('terminateAllAuthorizations', () => {\n  (async () => {\n    const result = await callApi('terminateAllAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      activeSessions: global.activeSessions.filter((session) => session.isCurrent),\n    });\n  })();\n});\n\naddReducer('loadNotificationExceptions', (global) => {\n  const { serverTimeOffset } = global;\n\n  (async () => {\n    const result = await callApi('fetchNotificationExceptions', { serverTimeOffset });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(addNotifyExceptions(getGlobal(), result));\n  })();\n});\n\naddReducer('loadNotificationSettings', (global) => {\n  const { serverTimeOffset } = global;\n  (async () => {\n    const result = await callApi('fetchNotificationSettings', {\n      serverTimeOffset,\n    });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateNotificationSettings', (global, actions, payload) => {\n  const { peerType, isSilent, shouldShowPreviews } = payload!;\n\n  (async () => {\n    const result = await callApi('updateNotificationSettings', peerType, { isSilent, shouldShowPreviews });\n\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateNotifySettings(getGlobal(), peerType, isSilent, shouldShowPreviews));\n  })();\n});\n\naddReducer('updateContactSignUpNotification', (global, actions, payload) => {\n  const { isSilent } = payload!;\n\n  (async () => {\n    const result = await callApi('updateContactSignUpNotification', isSilent);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { hasContactJoinedNotifications: !isSilent }));\n  })();\n});\n\naddReducer('loadLanguages', () => {\n  (async () => {\n    const result = await callApi('fetchLanguages');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { languages: result }));\n  })();\n});\n\naddReducer('loadPrivacySettings', () => {\n  (async () => {\n    const [\n      phoneNumberSettings, lastSeenSettings, profilePhotoSettings, forwardsSettings, chatInviteSettings,\n    ] = await Promise.all([\n      callApi('fetchPrivacySettings', 'phoneNumber'),\n      callApi('fetchPrivacySettings', 'lastSeen'),\n      callApi('fetchPrivacySettings', 'profilePhoto'),\n      callApi('fetchPrivacySettings', 'forwards'),\n      callApi('fetchPrivacySettings', 'chatInvite'),\n    ]);\n\n    if (\n      !phoneNumberSettings || !lastSeenSettings || !profilePhotoSettings || !forwardsSettings || !chatInviteSettings\n    ) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    global.settings.privacy.phoneNumber = phoneNumberSettings;\n    global.settings.privacy.lastSeen = lastSeenSettings;\n    global.settings.privacy.profilePhoto = profilePhotoSettings;\n    global.settings.privacy.forwards = forwardsSettings;\n    global.settings.privacy.chatInvite = chatInviteSettings;\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('setPrivacyVisibility', (global, actions, payload) => {\n  const { privacyKey, visibility } = payload!;\n\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility,\n    allowedIds: [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\naddReducer('setPrivacySettings', (global, actions, payload) => {\n  const { privacyKey, isAllowList, contactsIds } = payload!;\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility: settings.visibility,\n    allowedIds: isAllowList ? contactsIds : [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: !isAllowList ? contactsIds : [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\nfunction buildInputPrivacyRules(global: GlobalState, {\n  visibility,\n  allowedIds,\n  deniedIds,\n}: {\n  visibility: PrivacyVisibility;\n  allowedIds: number[];\n  deniedIds: number[];\n}): IInputPrivacyRules {\n  const {\n    users: { byId: usersById },\n    chats: { byId: chatsById },\n  } = global;\n\n  const rules: IInputPrivacyRules = {\n    visibility,\n  };\n  let users: IInputPrivacyContact[];\n  let chats: IInputPrivacyContact[];\n\n  const collectUsers = (userId: number) => {\n    if (!isChatPrivate(userId)) {\n      return undefined;\n    }\n    const { id, accessHash } = usersById[userId] || {};\n    if (!id) {\n      return undefined;\n    }\n\n    return { id, accessHash };\n  };\n\n  const collectChats = (userId: number) => {\n    if (isChatPrivate(userId)) {\n      return undefined;\n    }\n    const chat = chatsById[userId];\n\n    return chat ? { id: chat.id } : undefined;\n  };\n\n  if (visibility === 'contacts' || visibility === 'nobody') {\n    users = allowedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = allowedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.allowedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.allowedChats = chats;\n    }\n  }\n\n  if (visibility === 'everybody' || visibility === 'contacts') {\n    users = deniedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = deniedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.blockedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.blockedChats = chats;\n    }\n  }\n\n  return rules;\n}\n\naddReducer('updateIsOnline', (global, actions, payload) => {\n  callApi('updateIsOnline', payload);\n});\n\naddReducer('loadContentSettings', () => {\n  (async () => {\n    const result = await callApi('fetchContentSettings');\n    if (!result) return;\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateContentSettings', (global, actions, payload) => {\n  (async () => {\n    setGlobal(replaceSettings(getGlobal(), { isSensitiveEnabled: payload }));\n\n    const result = await callApi('updateContentSettings', payload);\n    if (!result) {\n      setGlobal(replaceSettings(getGlobal(), { isSensitiveEnabled: !payload }));\n    }\n  })();\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types/index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n} from '../../selectors';\n\nimport { getStripeError } from '../../helpers/payments';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const messageId = selectPaymentMessageId(global);\n  if (!messageId) {\n    return;\n  }\n  validateRequestedInfo(messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', { messageId, requestInfo, shouldSave });\n  if (!result) {\n    return;\n  }\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { messageId } = payload;\n  if (!messageId) {\n    return;\n  }\n  getPaymentForm(messageId);\n});\n\n\nasync function getPaymentForm(messageId: number) {\n  const result = await callApi('getPaymentForm', { messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  if (!messageId || !receiptMessageId || !chatId) {\n    return;\n  }\n  getReceipt(messageId, receiptMessageId, chatId);\n});\n\nasync function getReceipt(messageId: number, receiptMessageId: number, chatId: number) {\n  const result = await callApi('getReceipt', receiptMessageId);\n  if (!result) {\n    return;\n  }\n  let global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  sendStipeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const messageId = selectPaymentMessageId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!messageId || !publishableKey) {\n    return;\n  }\n  sendPaymentForm(messageId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStipeCredentials(data: {\n  cardNumber: string;\n  cardholder?: string;\n  expiryMonth: string;\n  expiryYear: string;\n  cvv: string;\n  country: string;\n  zip: string;\n},\npublishableKey: string) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  messageId: number,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    messageId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1000;\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), CURRENT_CHAT_UNREAD_DELAY, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      const unreadCount = selectCountNotMutedUnread(newGlobal);\n      runThrottledForUpdateAppBadge(() => updateAppBadge(unreadCount));\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      const unreadCount = selectCountNotMutedUnread(getGlobal());\n      updateAppBadge(unreadCount);\n      showNewMessageNotification({ chat, message, isActiveChat });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat && chat.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo && targetChat.fullInfo.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat && chat.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content && message.content.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message && message.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat && chat.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first uread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!firstMessageId && isMessageLocal(message)) {\n    return global;\n  }\n\n  if (threadInfo) {\n    global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n    if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n      global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n      if (!firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n      }\n\n      if (!threadInfo.lastMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n          ...threadInfo,\n          lastMessageId: message.id,\n        });\n      }\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId] && chats.byId[chatId].lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    unique(threadIdsToUpdate).forEach((threadId) => {\n      actions.requestThreadInfoUpdate({ chatId, threadId });\n    });\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { ChangeEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  inactive?: boolean;\n  noAnimation?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  inactive,\n  noAnimation,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onCheck) {\n      onCheck(e.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n    inactive && 'inactive',\n    noAnimation && 'no-animation',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={openTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import { useRef } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useForceUpdate from './useForceUpdate';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const valueRef = useRef<R>();\n  const runThrottled = useThrottle(ms);\n  const forceUpdate = useForceUpdate();\n\n  useOnChange(() => {\n    let isSync = true;\n    runThrottled(() => {\n      valueRef.current = resolverFn();\n\n      if (!isSync) {\n        forceUpdate();\n      }\n    });\n    isSync = false;\n  }, dependencies);\n\n  return valueRef.current;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms);\n  }, [ms]);\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById && folderCountersById[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n        }\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return <ChatList folderType=\"all\" isActive={isActive} />;\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        noChatsText={lang('FilterNoChatsToDisplay')}\n        isActive={isActive}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs && folderTabs.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  onSearchQuery,\n  onContentChange,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n                onContentChange={setContent}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                isActive={isActive}\n                currentScreen={settingsScreen}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectIsChatBotNotStarted, selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_SINGLE_COLUMN_LAYOUT || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canSelect={canSelect}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat && chat.isRestricted) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canStartBot = Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canSelect = !selectIsInSelectMode(global);\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_SINGLE_COLUMN_LAYOUT && canSubscribe)\n      || (IS_SINGLE_COLUMN_LAYOUT && canSearch)\n      || canMute\n      || canSelect\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canSelect,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const { sticker } = (message && message.content) || {};\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message && message.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef && containerRef.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, sender, focusMessage, closeAudioPlayer,\n}) => {\n  const lang = useLang();\n\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    return { sender };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUser,\n} from '../../api/types';\nimport { NotifyException, NotifySettings } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  isChatArchived,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n  selectIsChatMuted,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadOriginChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectNotifySettings,\n  selectNotifyExceptions,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  originChatId: number;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'loadPinnedMessages' | 'toggleLeftColumn' |\n  'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  originChatId,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  notifySettings,\n  notifyExceptions,\n  shouldSkipHistoryAnimations,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread') {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    if (messageListType === 'scheduled' && isSelectModeActive) {\n      exitMessageSelectMode();\n    }\n\n    openChat({ id: originChatId, threadId: MAIN_THREAD_ID });\n  }, [\n    openChat, originChatId, threadId, messageListType, toggleLeftColumn, isSelectModeActive, exitMessageSelectMode,\n    shouldShowCloseButton,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    let isActive = false;\n\n    const totalCount = Object.values(chatsById).reduce((total, currentChat) => {\n      if (isChatArchived(currentChat)) {\n        return total;\n      }\n\n      const count = currentChat.unreadCount || 0;\n      if (\n        count && (!selectIsChatMuted(currentChat, notifySettings, notifyExceptions) || currentChat.unreadMentionsCount)\n      ) {\n        isActive = true;\n      }\n\n      return total + count;\n    }, 0);\n\n    if (!totalCount) {\n      return undefined;\n    }\n\n    return {\n      isActive,\n      totalCount,\n    };\n  }, [isLeftColumnHideable, chatsById, notifySettings, notifyExceptions]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount)}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {isLeftColumnHideable && renderBackButton(shouldShowCloseButton, unreadCount)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, unreadCountInfo?: typeof unreadCount) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {unreadCountInfo && (\n          <div className={`unread-count ${unreadCountInfo.isActive ? 'active' : ''}`}>\n            {formatIntegerCompact(unreadCountInfo.totalCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={messageListType === 'thread' ? threadId : 1}\n      >\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds && pinnedIds.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds && scheduledIds.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      originChatId: originChat ? originChat.id : chatId,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      shouldSkipHistoryAnimations,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds && pinnedMessageIds.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import React from '../../../lib/teact/teact';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nexport function preventMessageInputBlur(e: React.MouseEvent<HTMLElement>) {\n  if (\n    IS_SINGLE_COLUMN_LAYOUT\n    || !document.activeElement\n    || document.activeElement.id !== EDITABLE_INPUT_ID\n    || e.target !== e.currentTarget\n  ) {\n    return;\n  }\n\n  e.preventDefault();\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import { MutableRefObject } from 'react';\nimport React, { FC, useCallback, useRef } from '../../lib/teact/teact';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../config';\nimport resetScroll from '../../util/resetScroll';\nimport { useIntersectionObserver, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\n\ntype OwnProps = {\n  containerRef: MutableRefObject<HTMLDivElement | null>;\n  className: string;\n  messageIds: number[];\n  loadMoreForwards?: NoneToVoidFunction;\n  loadMoreBackwards?: NoneToVoidFunction;\n  isViewportNewest?: boolean;\n  firstUnreadId?: number;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  children: any;\n};\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nconst MessageScroll: FC<OwnProps> = ({\n  containerRef,\n  className,\n  messageIds,\n  loadMoreForwards,\n  loadMoreBackwards,\n  isViewportNewest,\n  firstUnreadId,\n  onFabToggle,\n  onNotchToggle,\n  children,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useCallback(() => {\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = scrollHeight - scrollTop - offsetHeight;\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(firstUnreadId ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }, [messageIds, isViewportNewest, containerRef, onFabToggle, firstUnreadId, onNotchToggle]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return (\n    <div className={className} teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {children}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default MessageScroll;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMediaWithNoText = (photo || video) && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video && video.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: number[];\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById && usersById[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: () => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = Promise.resolve('rgba(255,255,255,1)');\n\nexport default function getCustomAppendixBg(src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && !isBuffered,\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current && videoRef.current.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n  usePauseOnInactive(videoRef, isPlayAllowed);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {!previewBlobUrl && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n        />\n      )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n      {isInline && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {(isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner) && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result && result.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  inPreview,\n  lastSyncTime,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage && webPage.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    description,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        {description && (\n          <p className=\"description-text\">{renderText(description, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e && e.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload ? fileUpload.progress : undefined;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom)\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {(shouldRenderThumb || mediaData) && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(button.text)}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled, threadInfo, usersById, chatsById, openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport {\n  FocusDirection, IAlbum, ISettings, MediaViewerOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForBottom: ObserveFn;\n  observeIntersectionForMedia: ObserveFn;\n  observeIntersectionForAnimatedStickers: ObserveFn;\n  album?: IAlbum;\n  noAvatars?: boolean;\n  withAvatar?: boolean;\n  withSenderName?: boolean;\n  threadId: number;\n  messageListType: MessageListType;\n  noComments: boolean;\n  appearanceOrder: number;\n} & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' | 'openMediaViewer' | 'openAudioPlayer' |\n  'openUserInfo' | 'openChat' |\n  'cancelSendingMessage' | 'markMessagesRead' |\n  'sendPollVote' | 'toggleMessageSelection' | 'setReplyingToId' | 'openForwardMenu' |\n  'clickInlineButton' | 'disableContextMenuHint' | 'showNotification'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 150;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  focusMessage,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  openChat,\n  cancelSendingMessage,\n  markMessagesRead,\n  sendPollVote,\n  toggleMessageSelection,\n  setReplyingToId,\n  openForwardMenu,\n  clickInlineButton,\n  disableContextMenuHint,\n  showNotification,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, false, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { chatId, id: messageId, threadInfo } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = !!message.groupedId && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = canShowActionButton && isChannel && !isScheduled;\n  const canFocus = Boolean(canShowActionButton && (\n    (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId)\n    || isPinnedList\n  ));\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  const handleGroupDocumentMessagesSelect = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    toggleMessageSelection({\n      messageId,\n      groupedId: message.groupedId,\n    });\n  }, [messageId, message.groupedId, toggleMessageSelection]);\n\n  const handleMessageSelect = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (isLocal) {\n      return;\n    }\n\n    const params = isAlbum && album && album.messages\n      ? {\n        messageId,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: e && e.shiftKey,\n      }\n      : { messageId, withShift: e && e.shiftKey };\n    toggleMessageSelection(params);\n  }, [isLocal, isAlbum, album, messageId, toggleMessageSelection]);\n\n  const handleContainerDoubleClick = useCallback(() => {\n    setReplyingToId({ messageId });\n  }, [setReplyingToId, messageId]);\n\n  const handleContentDoubleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n  }, []);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n\n    if (!isLocal) {\n      handleBeforeContextMenu(e);\n    }\n  };\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, showNotification, lang, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId, threadId, messageId: message.replyToMessageId, replyMessageId: messageId,\n    });\n  }, [focusMessage, chatId, threadId, message.replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    const target = e.target as HTMLDivElement;\n    if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n      return;\n    }\n\n    if (IS_ANDROID) {\n      setTimeout(() => {\n        handleContextMenu(e);\n      }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n    } else {\n      handleContextMenu(e);\n    }\n  }, [handleContextMenu]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId: message.groupedId });\n  }, [openForwardMenu, chatId, message.groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId: message.groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [focusMessage, forwardInfo, message, chatId, isInDocumentGroup]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = avatarPeer && isAvatarPeerUser ? avatarPeer as ApiUser : undefined;\n    const avatarChat = avatarPeer && !isAvatarPeerUser ? avatarPeer as ApiChat : undefined;\n    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            isInline\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={`text-content ${shouldInlineMeta ? 'with-meta' : ''}`} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMessageSelect}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo && forwardInfo.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo && forwardInfo.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onClick={isInSelectMode ? handleMessageSelect : IS_ANDROID ? handleClick : undefined}\n      onDoubleClick={!isInSelectMode ? handleContainerDoubleClick : undefined}\n      onMouseDown={!isInSelectMode ? handleMouseDown : undefined}\n      onContextMenu={!isInSelectMode && !isLocal ? handleContextMenu : undefined}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isLocal && !isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {!isLocal && isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleGroupDocumentMessagesSelect}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className=\"message-content-wrapper\"\n        onClick={isInSelectMode && isInDocumentGroup ? handleMessageSelect : undefined}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMessageSelect}\n            />\n          )}\n          {canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album && album.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'cancelSendingMessage',\n    'openUserInfo',\n    'openChat',\n    'markMessagesRead',\n    'sendPollVote',\n    'toggleMessageSelection',\n    'setReplyingToId',\n    'openForwardMenu',\n    'clickInlineButton',\n    'disableContextMenuHint',\n    'showNotification',\n  ]),\n)(Message));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_LIST_SLICE, SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  getMessageOriginalId,\n  isActionMessage,\n  isChatChannel,\n  isChatPrivate,\n  isOwnMessage,\n} from '../../modules/helpers';\nimport {\n  compact,\n  flatten,\n  orderBy,\n  pick,\n} from '../../util/iteratees';\nimport {\n  fastRaf, debounce, onTickEnd,\n} from '../../util/schedulers';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages, MessageDateGroup, isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { ObserveFn, useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageScroll from './MessageScroll';\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isChatWithSelf?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadViewportMessages' | 'markMessageListRead' | 'markMessagesRead' | 'setScrollOffset' | 'openHistoryCalendar'\n)>;\n\nconst BOTTOM_THRESHOLD = 100;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst FOCUSING_FADE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  animationLevel,\n  loadViewportMessages,\n  markMessageListRead,\n  markMessagesRead,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  // Updated every time (to be used from intersection callback closure)\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n  const [hasFocusing, setHasFocusing] = useState<boolean>(Boolean(focusingId));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n\n    // Updated only once (to preserve divider even after messages are read)\n    if (!memoUnreadDividerBeforeIdRef.current) {\n      memoUnreadDividerBeforeIdRef.current = firstUnreadId;\n    }\n  }, [firstUnreadId]);\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  useEffect(() => {\n    if (focusingId) {\n      setHasFocusing(true);\n    } else {\n      setTimeout(() => {\n        setHasFocusing(false);\n      }, FOCUSING_FADE_ANIMATION_DURATION);\n    }\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const [loadMoreBackwards, loadMoreForwards, loadMoreAround] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    // If two messages come at once (e.g. via Quiz Bot) then the first message will update `scrollOffset`\n    // right away (before animation) which creates inconsistency until the animation completes.\n    // To workaround that, we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n    const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && (\n      scrollOffset - (prevContainerHeight || offsetHeight) - lastItemHeight <= BOTTOM_THRESHOLD\n    );\n\n    let newScrollTop!: number;\n\n    const hasFirstMessageChanged = messageIds && prevMessageIds && messageIds[0] !== prevMessageIds[0];\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    if (isAtBottom && hasLastMessageChanged && !hasFirstMessageChanged && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            undefined,\n            true,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffect(() => {\n    if (!animationLevel || animationLevel > 0) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    hasFocusing && 'has-focusing',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : messageIds && !messageGroups ? (\n        <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageScroll\n          containerRef={containerRef}\n          className=\"messages-container\"\n          messageIds={messageIds || [lastMessage!.id]}\n          loadMoreForwards={loadMoreForwards}\n          loadMoreBackwards={loadMoreBackwards}\n          isViewportNewest={isViewportNewest}\n          firstUnreadId={firstUnreadId}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        >\n          {renderMessages(\n            lang,\n            messageGroups || groupMessages([lastMessage!]),\n            observeIntersectionForReading,\n            observeIntersectionForMedia,\n            observeIntersectionForAnimatedStickers,\n            withUsers,\n            noAvatars,\n            anchorIdRef,\n            memoUnreadDividerBeforeIdRef,\n            threadId,\n            type,\n            threadTopMessageId,\n            threadFirstMessageId,\n            hasLinkedChat,\n            messageGroups ? type === 'scheduled' : false,\n            !messageGroups || !shouldAnimateAppearanceRef.current,\n            openHistoryCalendar,\n          )}\n        </MessageScroll>\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nfunction renderMessages(\n  lang: LangFn,\n  messageGroups: MessageDateGroup[],\n  observeIntersectionForReading: ObserveFn,\n  observeIntersectionForMedia: ObserveFn,\n  observeIntersectionForAnimatedStickers: ObserveFn,\n  withUsers: boolean,\n  noAvatars: boolean,\n  currentAnchorIdRef: { current: string | undefined },\n  memoFirstUnreadIdRef: { current: number | undefined },\n  threadId: number,\n  type: MessageListType,\n  threadTopMessageId: number | undefined,\n  threadFirstMessageId: number | undefined,\n  hasLinkedChat: boolean | undefined,\n  isSchedule: boolean,\n  noAppearanceAnimation: boolean,\n  openHistoryCalendar: Function,\n) {\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && currentAnchorIdRef.current === `message${message.previousLocalId}`) {\n          currentAnchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current ? unreadDivider : undefined,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return flatten(dateGroups);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBot = selectChatBot(global, chatId)!;\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'markMessageListRead',\n    'markMessagesRead',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface OpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): OpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: OpusRecorder }>;\nlet OpusRecorder: OpusRecorder;\nlet mediaRecorder: OpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: OpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input ? input.id : undefined);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: number,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots && inlineBots[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results && results.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotKeyboardMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotKeyboardMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotKeyboardMenu = useModuleLoader(Bundles.Extra, 'BotKeyboardMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotKeyboardMenu ? <BotKeyboardMenu {...props} /> : undefined;\n};\n\nexport default memo(BotKeyboardMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { LangCode, InlineBotSettings } from '../../../types';\n\nimport { BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, SCHEDULED_WHEN_ONLINE } from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsChatWithBot,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatUser,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport windowSize from '../../../util/windowSize';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu.async';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  onDropHide: NoneToVoidFunction;\n  isReady: boolean;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  language: LangCode;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n  topInlineBotIds?: number[];\n  isInlineBotLoading: boolean;\n  inlineBots?: Record<string, false | InlineBotSettings>;\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji' | 'loadEmojiKeywords' | 'sendInlineBotResult'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  onDropHide,\n  isReady,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  language,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n  loadEmojiKeywords,\n  sendInlineBotResult,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory();\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (lastSyncTime && isReady) {\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n    }\n  }, [loadEmojiKeywords, language, lastSyncTime, isReady]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change\n  const prevChatId = usePrevious(chatId);\n  useEffect(() => {\n    if (!prevChatId || chatId === prevChatId) {\n      return;\n    }\n\n    stopRecordingVoice();\n    resetComposer();\n  }, [chatId, prevChatId, resetComposer, stopRecordingVoice]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    if (currentAttachments.length && text && text.length > CAPTION_MAX_LENGTH) {\n      const extraLength = text.length - CAPTION_MAX_LENGTH;\n      showDialog({\n        data: {\n          message: 'CAPTION_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = Math.floor(Date.now() / 1000) + serverTimeOffset;\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = Math.floor(Date.now() / 1000) + serverTimeOffset;\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => { resetComposer(); });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, serverTimeOffset, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => { resetComposer(shouldPreserveInput); });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => { resetComposer(true); });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => { resetComposer(); });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => { resetComposer(); });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          handleSend();\n          requestAnimationFrame(() => { resetComposer(); });\n        }\n        break;\n      case MainButtonState.Record:\n        startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, resetComposer, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filter={mentionFilter}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {!isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={`${isSymbolMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER ? '' : lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            shouldSetFocus={isSymbolMenuOpen}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isBotKeyboardOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isAttachMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          <InlineBotTooltip\n            isOpen={isInlineBotTooltipOpen}\n            botId={inlineBotId}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            isGallery={isInlineBotTooltipGallery}\n            inlineBotResults={inlineBotResults}\n            switchPm={inlineBotSwitchPm}\n            onSelectResult={handleInlineBotSelect}\n            loadMore={loadMoreForInlineBot}\n            onClose={closeInlineBotTooltip}\n          />\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={`${mainButtonState} ${activeVoiceRecording ? 'recording' : ''}`}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds && scheduledIds.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId: messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat && chat.fullInfo && chat.fullInfo.members,\n      topInlineBotIds: global.topInlineBots && global.topInlineBots.userIds,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      language,\n      baseEmojiKeywords: baseEmojiKeywords ? baseEmojiKeywords.keywords : undefined,\n      emojiKeywords: emojiKeywords ? emojiKeywords.keywords : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'loadEmojiKeywords',\n    'sendInlineBotResult',\n  ]),\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection && selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n  selectThreadOriginChat,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  originChatId?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  isScheduledMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  originChatId,\n  shouldSkipHistoryAnimations,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    if (renderingThreadId !== MAIN_THREAD_ID) {\n      openChat({ id: originChatId, threadId: MAIN_THREAD_ID }, true);\n    } else if (isPinnedMessageList || isScheduledMessageList) {\n      openChat({ id: chatId, type: 'thread' });\n    } else {\n      openChat({ id: undefined }, true);\n    }\n  };\n\n  useHistoryBack(renderingChatId && renderingThreadId, closeChat, openChat, {\n    id: chatId,\n    threadId: MAIN_THREAD_ID,\n  });\n\n  const isDiscussion = renderingChatId && renderingThreadId !== MAIN_THREAD_ID;\n\n  useHistoryBack(isDiscussion || isPinnedMessageList || isScheduledMessageList, closeChat, openChat, {\n    id: chatId,\n    threadId: renderingThreadId,\n  });\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={renderingMessageListType === 'thread' && renderingThreadId === MAIN_THREAD_ID ? 1 : 2}\n              shouldCleanup\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      originChatId: originChat ? originChat.id : chatId,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && (!isBotNotStarted || IS_SINGLE_COLUMN_LAYOUT),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat && chat.currentUserBannedRights,\n      defaultBannedRights: chat && chat.defaultBannedRights,\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds && pinnedIds.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  // Add class in the next AF to synchronize with animation with Transition components\n  useEffect(() => {\n    backButtonRef.current!.classList.toggle('state-back', isBackButton);\n  }, [isBackButton]);\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport {\n  ApiUser, ApiChat, ApiMediaFormat, ApiPhoto,\n} from '../../api/types';\n\nimport {\n  getChatAvatarHash, isDeletedUser, getUserColorKey, getChatTitle, isChatPrivate, getUserFullName,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport buildClassName from '../../util/buildClassName';\nimport { getFirstLetters } from '../../util/textFormat';\nimport useMedia from '../../hooks/useMedia';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isFirstPhoto?: boolean;\n  isSavedMessages?: boolean;\n  photo?: ApiPhoto;\n  lastSyncTime?: number;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isFirstPhoto,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const lang = useLang();\n  const isDeleted = user && isDeletedUser(user);\n\n  function getMediaHash(size: 'normal' | 'big' = 'big', forceAvatar?: boolean) {\n    if (photo && !forceAvatar) {\n      return `photo${photo.id}?size=c`;\n    }\n\n    let hash: string | undefined;\n    if (!isSavedMessages && !isDeleted) {\n      if (user) {\n        hash = getChatAvatarHash(user, size);\n      } else if (chat) {\n        hash = getChatAvatarHash(chat, size);\n      }\n    }\n\n    return hash;\n  }\n\n  const imageHash = getMediaHash();\n  const fullMediaData = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const avatarThumbnailData = useMedia(\n    !fullMediaData && isFirstPhoto ? getMediaHash('normal', true) : undefined,\n    false,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurSync(!fullMediaData && photo && photo.thumbnail && photo.thumbnail.dataUri);\n  const imageSrc = fullMediaData || avatarThumbnailData || thumbDataUri;\n  const prevImageSrc = usePrevious(imageSrc);\n\n  let content: string | undefined = '';\n\n  if (isSavedMessages) {\n    content = <i className=\"icon-avatar-saved-messages\" />;\n  } else if (isDeleted) {\n    content = <i className=\"icon-avatar-deleted-account\" />;\n  } else if (imageSrc) {\n    content = <img src={imageSrc} className=\"avatar-media\" alt=\"\" decoding=\"async\" />;\n  } else if (!imageSrc && user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (!imageSrc && chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isChatPrivate(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    (!isSavedMessages && !(imageSrc)) && 'no-photo',\n  );\n\n  return (\n    <div className={fullClassName} onClick={imageSrc ? onClick : undefined}>\n      {prevImageSrc && imageSrc && prevImageSrc !== imageSrc && (\n        <img src={prevImageSrc} className=\"prev-avatar-media\" alt=\"\" decoding=\"async\" />\n      )}\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","import React, {\n  FC, useEffect, useCallback, memo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getUserFullName, getUserStatus, isChatChannel, isUserOnline,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport usePhotosPreload from './hooks/usePhotosPreload';\nimport useLang from '../../hooks/useLang';\n\nimport VerifiedIcon from '../common/VerifiedIcon';\nimport ProfilePhoto from './ProfilePhoto';\nimport Transition from '../ui/Transition';\n\nimport './ProfileInfo.scss';\n\ntype OwnProps = {\n  userId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  isSavedMessages?: boolean;\n  animationLevel: 0 | 1 | 2;\n  serverTimeOffset: number;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'openMediaViewer'>;\n\nconst PrivateChatInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  user,\n  chat,\n  isSavedMessages,\n  lastSyncTime,\n  animationLevel,\n  loadFullUser,\n  openMediaViewer,\n  serverTimeOffset,\n}) => {\n  const { id: userId } = user || {};\n  const { id: chatId } = chat || {};\n  const fullName = user ? getUserFullName(user) : (chat ? chat.title : '');\n  const photos = (user ? user.photos : (chat ? chat.photos : undefined)) || [];\n  const slideAnimation = animationLevel >= 1 ? 'slide' : 'none';\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = isSavedMessages || photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = isSavedMessages || photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [userId, loadFullUser, lastSyncTime]);\n\n  usePhotosPreload(user || chat, photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useCallback(() => {\n    openMediaViewer({\n      avatarOwnerId: userId || chatId,\n      profilePhotoIndex: currentPhotoIndex,\n      origin: MediaViewerOrigin.ProfileAvatar,\n    });\n  }, [openMediaViewer, userId, chatId, currentPhotoIndex]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  }, [currentPhotoIndex, isFirst]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  }, [currentPhotoIndex, isLast]);\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>(\n      '.profile-slide-container > .active, .profile-slide-container > .to',\n    );\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      excludedClosestSelector: '.navigation',\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        }\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderPhotoTabs() {\n    if (isSavedMessages || !photos || photos.length <= 1) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"photo-dashes\">\n        {photos.map((_, i) => (\n          <span className={`photo-dash ${i === currentPhotoIndex ? 'current' : ''}`} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto() {\n    const photo = !isSavedMessages && photos && photos.length > 0 ? photos[currentPhotoIndex] : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        isSavedMessages={isSavedMessages}\n        isFirstPhoto={isFirst}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderStatus() {\n    if (user) {\n      return (\n        <div className={`status ${isUserOnline(user) ? 'online' : ''}`}>\n          <span className=\"user-status\" dir=\"auto\">{getUserStatus(lang, user, serverTimeOffset)}</span>\n        </div>\n      );\n    }\n\n    return (\n      <span className=\"status\" dir=\"auto\">{\n        isChatChannel(chat!)\n          ? lang('Subscribers', chat!.membersCount, 'i')\n          : lang('Members', chat!.membersCount, 'i')\n      }\n      </span>\n    );\n  }\n\n  const isVerifiedIconShown = (user && user.isVerified) || (chat && chat.isVerified);\n\n  return (\n    <div className=\"ProfileInfo\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"photo-wrapper\">\n        {renderPhotoTabs()}\n        <Transition activeKey={currentPhotoIndex} name={slideAnimation} className=\"profile-slide-container\">\n          {renderPhoto}\n        </Transition>\n\n        {!isFirst && (\n          <button\n            type=\"button\"\n            className=\"navigation prev\"\n            aria-label={lang('AccDescrPrevious')}\n            onClick={selectPreviousMedia}\n          />\n        )}\n        {!isLast && (\n          <button\n            type=\"button\"\n            className=\"navigation next\"\n            aria-label={lang('Next')}\n            onClick={selectNextMedia}\n          />\n        )}\n      </div>\n\n      <div className=\"info\" dir={lang.isRtl ? 'rtl' : 'auto'}>\n        {isSavedMessages ? (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{lang('SavedMessages')}</h3>\n          </div>\n        ) : (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n            {isVerifiedIconShown && <VerifiedIcon />}\n          </div>\n        )}\n        {!isSavedMessages && renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): StateProps => {\n    const { lastSyncTime, serverTimeOffset } = global;\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      lastSyncTime, user, chat, isSavedMessages, animationLevel, serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFullUser', 'openMediaViewer']),\n)(PrivateChatInfo));\n","import {\n  ApiChat, ApiMediaFormat, ApiPhoto, ApiUser,\n} from '../../../api/types';\nimport { useEffect } from '../../../lib/teact/teact';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  profile: ApiUser | ApiChat | undefined,\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaData = mediaLoader.getFromMemory(`photo${photo.id}?size=c`);\n      if (!mediaData) {\n        mediaLoader.fetch(`photo${photo.id}?size=c`, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { ApiChat, ApiUser } from '../../api/types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatDescription, getChatLink, getHasAdminRight, isChatChannel, isChatPrivate, isUserRightBanned, selectIsChatMuted,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\n\ntype OwnProps = {\n  chatOrUserId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  canInviteUsers?: boolean;\n  isMuted?: boolean;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'updateChatMutedState' | 'showNotification'>;\n\nconst ChatExtra: FC<OwnProps & StateProps & DispatchProps> = ({\n  lastSyncTime,\n  user,\n  chat,\n  forceShowSelf,\n  canInviteUsers,\n  isMuted,\n  loadFullUser,\n  showNotification,\n  updateChatMutedState,\n}) => {\n  const {\n    id: userId,\n    fullInfo,\n    username,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const { id: chatId } = chat || {};\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, userId, lastSyncTime]);\n\n  const handleNotificationChange = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n  }, [chatId, isMuted, updateChatMutedState]);\n\n  if (!chat || chat.isRestricted || (isSelf && !forceShowSelf)) {\n    return undefined;\n  }\n\n  function copy(text: string, entity: string) {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }\n\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneNumber);\n  const link = getChatLink(chat);\n  const description = (fullInfo && fullInfo.bio) || getChatDescription(chat);\n\n  return (\n    <div className=\"ChatExtra\">\n      {formattedNumber && !!formattedNumber.length && (\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={() => copy(formattedNumber, lang('Phone'))}>\n          <span className=\"title\" dir=\"auto\">{formattedNumber}</span>\n          <span className=\"subtitle\">{lang('Phone')}</span>\n        </ListItem>\n      )}\n      {username && (\n        <ListItem\n          icon=\"mention\"\n          multiline\n          narrow\n          ripple\n          onClick={() => copy(`@${username}`, lang('Username'))}\n        >\n          <span className=\"title\" dir=\"auto\">{renderText(username)}</span>\n          <span className=\"subtitle\">{lang('Username')}</span>\n        </ListItem>\n      )}\n      {description && !!description.length && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          isStatic\n        >\n          <span className=\"title\" dir=\"auto\">\n            {renderText(description, ['br', 'links', 'emoji'])}\n          </span>\n          <span className=\"subtitle\">{lang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {(canInviteUsers || !username) && link && (\n        <ListItem icon=\"mention\" multiline narrow ripple onClick={() => copy(link, lang('SetUrlPlaceholder'))}>\n          <div className=\"title\">{link}</div>\n          <span className=\"subtitle\">{lang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      <ListItem icon=\"unmute\" ripple onClick={handleNotificationChange}>\n        <span>{lang('Notifications')}</span>\n        <Switcher\n          id=\"group-notifications\"\n          label={userId ? 'Toggle User Notifications' : 'Toggle Chat Notifications'}\n          checked={!isMuted}\n          inactive\n        />\n      </ListItem>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId }): StateProps => {\n    const { lastSyncTime } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = isChatPrivate(chatOrUserId) ? selectUser(global, chatOrUserId) : undefined;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    const canInviteUsers = chat && !user && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    return {\n      lastSyncTime, chat, user, canInviteUsers, isMuted,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadFullUser', 'updateChatMutedState', 'showNotification',\n  ]),\n)(ChatExtra));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteChatMember'>;\n\nconst DeleteMemberModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['deleteChatMember']),\n)(DeleteMemberModal));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from './ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from './ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: number;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos' | 'setNewChatMembersDialogState'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  setNewChatMembersDialogState,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<number | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(id: number) {\n    return id === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(id);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty_search');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty_search');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty_search');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              target=\"sharedMedia\"\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo\n        userId={resolvedUserId || chatId}\n        forceShowSelf={resolvedUserId !== chatId}\n      />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} forceShowSelf={resolvedUserId !== chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat && chat.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n    'setNewChatMembersDialogState',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { pick, unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport searchWords from '../../util/searchWords';\nimport {\n  getUserFullName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  isActive: boolean;\n  onNextStep: (memberIds: number[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery'>;\n\nconst AddChatMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  setUserSearchQuery,\n  onClose,\n  isActive,\n  loadContactList,\n}) => {\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<number[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds.filter((id) => !memberIds.includes(id));\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return !memberIds.includes(contactId)\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup));\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds,\n    currentUserId, usersById, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat && chat.fullInfo ? chat.fullInfo.members : undefined,\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setUserSearchQuery']),\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' | 'setNewChatMembersDialogState' |\n  'closeLocalTextSearch' | 'closePollResults' | 'addChatMembers' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  addChatMembers,\n  setNewChatMembersDialogState,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, true);\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: number[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n    'addChatMembers',\n    'setNewChatMembersDialogState',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  ANIMATION_END_DELAY, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline' |\n  'loadTopInlineBots'\n)>;\n\nconst ANIMATION_DURATION = 350;\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet rightColumnAnimationTimeout: number | undefined;\nlet notificationInterval: number | undefined;\n\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n  loadTopInlineBots,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline,\n    loadTopInlineBots,\n  ]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Add `body` classes when toggling right column\n  useEffect(() => {\n    if (animationLevel > 0) {\n      document.body.classList.add('animating-right-column');\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n      if (rightColumnAnimationTimeout) {\n        clearTimeout(rightColumnAnimationTimeout);\n        rightColumnAnimationTimeout = undefined;\n      }\n\n      rightColumnAnimationTimeout = window.setTimeout(() => {\n        document.body.classList.remove('animating-right-column');\n        rightColumnAnimationTimeout = undefined;\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          document.title = `${newUnread} notification${newUnread > 1 ? 's' : ''}`;\n          updateIcon(true);\n        }\n      } else {\n        document.title = PAGE_TITLE;\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      document.title = PAGE_TITLE;\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n    'loadTopInlineBots',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"sourceRoot":""}