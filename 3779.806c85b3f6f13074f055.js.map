{"version":3,"file":"3779.806c85b3f6f13074f055.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/BotAttachModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.module.scss?a2dc","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n      }\n    }\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }, [avatarOwner, avatarMedia, message]);\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../global/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  canReport?: boolean;\n  onReport: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  canReport,\n  onReport,\n  onCloseMediaViewer,\n  zoomLevelChange,\n  setZoomLevelChange,\n  onForward,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n          {canReport && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={onReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 1500;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    let timeout: number | undefined;\n    if (!isVisible || !isPlayed || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlayed, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName('playback-rate-menu', !isFullscreenSupported && 'no-fullscreen')}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  areControlsVisible: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  isProtected,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList={isProtected ? 'nodownload' : undefined}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration || 0 : 0}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setIsFooterHidden?: (isHidden: boolean) => void;\n  isFooterHidden?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    isFooterHidden,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    onClose,\n    onFooterClick,\n    setIsFooterHidden,\n  } = props;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  const toggleControls = useCallback((isVisible) => {\n    setIsFooterHidden?.(!isVisible);\n  }, [setIsFooterHidden]);\n\n  const handleMouseMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleMouseOut = useCallback(() => {\n    toggleControls(false);\n  }, [toggleControls]);\n\n  if (avatarOwner) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            fullMediaBlobUrl || previewBlobUrl,\n            calculateMediaViewerDimensions(dimensions, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={localBlobUrl || fullMediaBlobUrl}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={!isFooterHidden}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            volume={0}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={!isGif && !IS_TOUCH_ENV ? handleMouseMove : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          areControlsVisible={!isFooterHidden}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isProtected={isProtected}\n          volume={volume}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={isFooterHidden}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [isFooterHidden, setIsFooterHidden] = useState(true);\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleToggleFooterVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setIsFooterHidden(!isFooterHidden);\n  }, [clickXThreshold, isFooterHidden, windowHeight, windowWidth]);\n\n  useTimeout(() => setIsFooterHidden(false), ANIMATION_DURATION - 150);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current.scale,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isFooterHidden={isFooterHidden}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMouseDown && scale > 1 && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleToggleFooterVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setIsFooterHidden={setIsFooterHidden}\n          isFooterHidden={isFooterHidden || scale !== 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isFooterHidden={isFooterHidden}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport {\n  getChatMediaMessageIds,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport windowSize from '../../util/windowSize';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) return;\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, mediaId });\n    }\n  }, [close, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    close();\n  }) : undefined), [close, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: closeMediaViewer,\n  });\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={avatarOwner.id}\n        chatId={avatarOwner.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition id=\"MediaViewer\" isOpen={isOpen}>\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={close}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          message={message}\n          fileName={fileName}\n          canReport={canReport}\n          onReport={openReportModal}\n          onCloseMediaViewer={close}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n          isAvatar={Boolean(avatarOwner)}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={close}\n        selectMedia={selectMedia}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        isChatWithSelf,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n)(MediaViewer));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  loadMore?: NoneToVoidFunction;\n  onFilterChange: (filter: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  loadMore,\n  onFilterChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  const resetFilter = useCallback(() => {\n    onFilterChange('');\n  }, [onFilterChange]);\n  useInputFocusOnOpen(filterRef, isOpen, resetFilter);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  sortChatIds,\n} from '../../global/helpers';\nimport { unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n  currentUserId?: string;\n  switchBotInline?: GlobalState['switchBotInline'];\n};\n\nconst ForwardPicker: FC<OwnProps & StateProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  currentUserId,\n  isOpen,\n  switchBotInline,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n    openChatWithText,\n    resetSwitchBotInline,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const chatAndContactIds = useMemo(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((filter && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, filter, currentUserId),\n      ...(contactIds ? filterUsersByName(contactIds, usersById, filter) : []),\n    ]), chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, contactIds, currentUserId, filter, isOpen, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    if (switchBotInline) {\n      const text = `@${switchBotInline.botUsername} ${switchBotInline.query}`;\n      openChatWithText({ chatId: userId, text });\n      resetSwitchBotInline();\n    } else {\n      setForwardChatId({ id: userId });\n    }\n  }, [openChatWithText, resetSwitchBotInline, setForwardChatId, switchBotInline]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n    resetSwitchBotInline();\n  }, [exitForwardMode, resetSwitchBotInline]);\n\n  const renderingChatAndContactIds = useCurrentOrPrev(chatAndContactIds, true)!;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={renderingChatAndContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n      switchBotInline,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n      switchBotInline,\n    };\n  },\n)(ForwardPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['emoji', 'br', 'links', 'simple_markdown']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: GlobalState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import useWindowSize from '../../../hooks/useWindowSize';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_close' | 'iframe_ready';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (isOpen: boolean, isSimpleView: boolean, onEvent: (event: WebAppInboundEvent) => void) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLIFrameElement>(null);\n  const ignoreEventsRef = useRef<boolean>(false);\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, []);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, []);\n\n  const sendViewport = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n      },\n    });\n  }, [sendEvent]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport();\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendTheme, sendViewport]);\n\n  useEffect(() => {\n    if (windowSize) {\n      sendViewport();\n    }\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    }\n  }, [isOpen, sendViewport]);\n\n  return {\n    ref, sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiAttachMenuBot, ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { TME_LINK_PREFIX } from '../../config';\nimport { selectCurrentChat, selectTheme, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport type { WebAppInboundEvent } from './hooks/useWebAppFrame';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachMenuBot?: ApiAttachMenuBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: GlobalState['payment']['status'];\n};\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachMenuBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleBotInAttachMenu,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const lang = useLang();\n  const {\n    url, buttonText, queryId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n  }, [bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug]);\n\n  const {\n    ref, reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  useOnChange(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp] as const);\n\n  const handleToggleClick = useCallback(() => {\n    toggleBotInAttachMenu({\n      botId: bot!.id,\n      isEnabled: !attachMenuBot,\n    });\n  }, [bot, attachMenuBot, toggleBotInAttachMenu]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      closeWebApp();\n    }\n  }, [closeWebApp, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const backButtonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButtonVisible && 'state-back',\n  );\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachMenuBot && (\n            <MenuItem\n              icon={attachMenuBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachMenuBot)}\n            >\n              {lang(attachMenuBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n          {attachMenuBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [\n    lang, handleBackClick, bot, MoreMenuButton, chat, openBotChat, handleRefreshClick, attachMenuBot,\n    handleToggleClick, handleSettingsButtonClick, isBackButtonVisible, headerColor, backButtonClassName,\n  ]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={closeWebApp}\n      header={header}\n      hasCloseButton\n      style={`background-color: ${backgroundColor}`}\n    >\n      {isOpen && (\n        <>\n          <iframe\n            ref={ref}\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachMenuBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = global.payment;\n\n    return {\n      attachMenuBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n};\n\nconst BotAttachModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { closeBotAttachRequestModal, confirmBotAttachRequest } = getActions();\n\n  const lang = useLang();\n\n  const name = bot?.firstName;\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={closeBotAttachRequestModal}\n      confirmHandler={confirmBotAttachRequest}\n      title={name}\n      textParts={lang('WebApp.AddToAttachmentText', name)}\n    />\n  );\n};\n\nexport default BotAttachModal;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <video\n          className={buildClassName(\n            styles.video,\n            transitionClassNames,\n          )}\n          src={mediaData}\n          autoPlay\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lSI7Gb2It7nFGpBE4IFs\",\"sticker\":\"sbJjdz4IEwYhlti5MyPA\",\"effect-sticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\",\"effectSticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiAvailableReaction } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useInterval from '../../../../hooks/useInterval';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewReactions.module.scss';\n\ntype StateProps = {\n  availableReactions: GlobalState['availableReactions'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.2;\nconst EFFECT_SIZE_MULTIPLIER = 0.6;\nconst ROTATE_INTERVAL = 3000;\nconst CLICK_DELAY = 4000;\nconst MAX_EMOJIS = 15;\n\nconst AnimatedCircleReaction: FC<{\n  size: number;\n  realIndex: number;\n  reaction: ApiAvailableReaction;\n  index: number;\n  maxLength: number;\n  handleClick: (index: number) => void;\n  isActivated: boolean;\n}> = ({\n  size, realIndex, isActivated,\n  reaction, index, maxLength, handleClick,\n}) => {\n  const mediaData = useMedia(`document${reaction.activateAnimation?.id}`);\n  const mediaDataAround = useMedia(`document${reaction.aroundAnimation?.id}`);\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n  const [isEffectEnded, markEffectEnded, unmarkEffectEnded] = useFlag(false);\n\n  const circleSize = (size - size * EMOJI_SIZE_MULTIPLIER) / 2;\n\n  const t = index / maxLength;\n  const angle = t * (Math.PI * 2);\n  const totalAngle = angle - (Math.PI / 6) * Math.cos(angle);\n  const scaleNotFull = 0.2 + (0.7 * (Math.sin(totalAngle) + 1)) / 2;\n  const scale = scaleNotFull > 0.85 ? 1 : scaleNotFull;\n\n  const x = Math.cos(totalAngle) * circleSize;\n  const y = Math.sin(totalAngle) * circleSize * 0.6;\n\n  const handleClickEmoji = useCallback(() => {\n    handleClick(realIndex);\n  }, [handleClick, realIndex]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n      unmarkEffectEnded();\n    }\n  }, [isActivated, animate, unmarkEffectEnded]);\n\n  return (\n    <>\n      {isActivated && !isEffectEnded && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n          onEnded={markEffectEnded}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        onClick={handleClickEmoji}\n        play={isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n        onEnded={inanimate}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewReactions: FC<StateProps> = ({\n  availableReactions,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isIntervalPaused, pauseInterval, unpauseInterval] = useFlag();\n  const lastUnpauseTimeout = useRef<NodeJS.Timeout>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedReactions = availableReactions?.filter((l) => l.isPremium)?.slice(0, MAX_EMOJIS) || [];\n\n  useInterval(() => {\n    setOffset((current) => cycleRestrict(renderedReactions.length, current + 1));\n  }, isIntervalPaused ? undefined : ROTATE_INTERVAL);\n\n  const handleClickEmoji = useCallback((i: number) => {\n    setOffset(i);\n    pauseInterval();\n    if (lastUnpauseTimeout.current) clearTimeout(lastUnpauseTimeout.current);\n    lastUnpauseTimeout.current = setTimeout(() => {\n      unpauseInterval();\n    }, CLICK_DELAY);\n  }, [pauseInterval, unpauseInterval]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedReactions.map((l, i) => {\n        return (\n          <AnimatedCircleReaction\n            size={size}\n            reaction={l}\n            realIndex={i}\n            index={(i - offset + renderedReactions.length / 4) % renderedReactions.length}\n            maxLength={renderedReactions.length}\n            handleClick={handleClickEmoji}\n            isActivated={offset === i}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      availableReactions: global.availableReactions,\n    };\n  },\n)(PremiumFeaturePreviewReactions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n}> = ({\n  size, realIndex,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<StateProps> = ({\n  stickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-premium\":\"QqkwZyFt35pRO5spXs7c\",\"buttonPremium\":\"QqkwZyFt35pRO5spXs7c\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport PremiumFeaturePreviewReactions from './previews/PremiumFeaturePreviewReactions';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  limits: 'PremiumPreviewLimits',\n  reactions: 'PremiumPreviewReactions',\n  stickers: 'PremiumPreviewStickers',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  limits: 'PremiumPreviewLimitsDescription',\n  reactions: 'PremiumPreviewReactionsDescription',\n  stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'reactions',\n  'stickers',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n          if (section === 'reactions') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewReactions />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.reactions)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.reactions), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button, !isPremium && styles.buttonPremium)}\n          isShiny={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(promo.monthlyAmount), promo.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n};\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useOnChange from '../../../hooks/useOnChange';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  limits: PremiumLimits,\n  reactions: PremiumReactions,\n  stickers: PremiumStickers,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useOnChange(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium]);\n\n  if (!promo) return undefined;\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(\n                fromUser\n                  ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n                  : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n                ['simple_markdown', 'emoji'],\n              )}\n            </h2>\n            <div className={styles.description}>\n              {renderText(\n                lang(fromUser ? 'TelegramPremiumUserDialogSubtitle'\n                  : (isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle')),\n                ['simple_markdown'],\n              )}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {PREMIUM_FEATURE_SECTIONS.map((section) => (\n                <PremiumFeatureItem\n                  key={section}\n                  title={lang(PREMIUM_FEATURE_TITLES[section])}\n                  text={section === 'limits'\n                    ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                      [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                    : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                  icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                  onClick={handleOpen(section)}\n                />\n              ))}\n              <div className={buildClassName(styles.footerText, styles.primaryFooterText)}>\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              <div className={styles.footerText}>\n                {renderTextWithEntities(\n                  promo.statusText,\n                  promo.statusEntities,\n                  undefined,\n                  undefined,\n                  undefined,\n                  undefined,\n                  undefined,\n                  undefined,\n                )}\n              </div>\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(promo.monthlyAmount), promo.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    promo: global.premiumModal?.promo,\n    isClosing: global.premiumModal?.isClosing,\n    isSuccess: global.premiumModal?.isSuccess,\n    fromUser: global.premiumModal?.fromUserId ? selectUser(global, global.premiumModal.fromUserId) : undefined,\n    initialSection: global.premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n  };\n})(PremiumMainModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description, ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isForwardModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  isForwardModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isForwardModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode, isForwardModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = global.forwardMessages.isModalShown;\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isForwardModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport PremiumIcon from '../common/PremiumIcon';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const fullName = getUserFullName(user);\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"small\" />\n                    <div className=\"title\">\n                      <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n                      {user.isPremium && <PremiumIcon />}\n                    </div>\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectTgsUrl = useMedia(`sticker${effectAnimationId}`, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n  const tgsUrl = localEffectAnimation && (localEffectAnimation in LOCAL_TGS_URLS)\n    ? LOCAL_TGS_URLS[localEffectAnimation as keyof typeof LOCAL_TGS_URLS]\n    : effectTgsUrl;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={tgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(LOCAL_TGS_URLS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FakeIcon from '../../common/FakeIcon';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n            {privateChatUser?.isPremium && <PremiumIcon />}\n            {chat.fakeType && <FakeIcon fakeType={chat.fakeType} />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? TME_LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    e.currentTarget.value = e.currentTarget.value.replace(/\\n/, '');\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  maxBioLength,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n      maxBioLength,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!state.orderedFolderIds) {\n      return undefined;\n    }\n\n    if (state.orderedFolderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return state.orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [state.orderedFolderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !inRange(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {folder.title}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n\nfunction inRange(x: number, min: number, max: number) {\n  return x >= min && x <= max;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          size={size}\n          tgsUrl={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isVideo = stickerSet.isVideos;\n\n  const firstLetters = useMemo(() => {\n    if ((isVideo && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n    return undefined;\n  }, [isVideo, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isVideo ? (\n        <video src={mediaData} className={transitionClassNames} loop autoPlay disablePictureInPicture />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n          clickArg={undefined}\n          noContextMenu\n          isCurrentUserPremium\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'shouldSuggestStickers' |\n    'shouldLoopStickers' |\n    'timeFormat'\n  )> & {\n    stickerSetIds?: string[];\n    stickerSetsById?: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  defaultReaction,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  shouldArchiveAndMuteNewNonContact,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NewChatsFromNonContacts')}\n        </h4>\n        <Checkbox\n          label={lang('ArchiveAndMute')}\n          subLabel={lang('ArchiveAndMuteInfo')}\n          checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n          onCheck={handleArchiveAndMuteChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen, session, bot, onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" />\n      <h3 className={styles.title} dir=\"auto\">{getUserFullName(renderingBot)}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"date\":\"n6IYAeXnJBCHqpqItrnY\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{getUserFullName(bot)}</span>\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, filter)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} noVideo />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isPremium?: boolean;\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  isPremium,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = availableReactions?.filter((l) => (\n    !(l.isInactive || (!isPremium && l.isPremium))\n  )).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n      isPremium,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport type { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady, isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n  const { transitionClassNames: animatedClassNames } = useShowTransition(shouldRenderAnimated);\n  const { shouldRender: shouldRenderStatic, transitionClassNames: staticClassNames } = useShowTransition(\n    !isReady || !isAnimationLoaded, undefined, true,\n  );\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isCurrentUserPremium && 'premium',\n            isReady ? [staticClassNames] : undefined,\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          className={cn('animated', [animatedClassNames])}\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n  canBuyPremium,\n  isCurrentUserPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive || (reaction.isPremium && !isCurrentUserPremium)\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            );\n          })}\n          {canBuyPremium && Boolean(\n            availableReactions\n              .filter((r) => r.isPremium && (!enabledReactions || enabledReactions.includes(r.reaction)))\n              .length,\n          ) && (\n            <Button\n              round\n              color=\"translucent\"\n              className={cn('blocked-button')}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openPremiumModal({\n                initialSection: 'reactions',\n              })}\n            >\n              <i className=\"icon-lock-badge\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiSponsoredMessage, ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  onReply?: () => void;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onSendReaction?: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n}) => {\n  const { showNotification } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction!(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"heart-outline\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? getUserFullName(seenByRecentUsers[0])\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                  noVideo\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList, selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID, TME_LINK_PREFIX } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    cancelPollVote,\n    closePoll,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`${TME_LINK_PREFIX}${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectStickerSetByShortName,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, stickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser, selectChatBot,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact, isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n  } = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const canReportChat = isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf);\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiChatMember } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n  captionLimit: number;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  const leftChars = (captionLimit - caption.length) <= 100 ? captionLimit - caption.length : undefined;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop disablePictureInPicture />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n            captionLimit={leftChars}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\nimport {\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n  onStickerFave: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent: (sticker: ApiSticker) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  isCurrentUserPremium,\n}) => {\n  const { clearRecentStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const lang = useLang();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const handleClearRecent = useCallback(() => {\n    clearRecentStickers();\n    closeConfirmModal();\n  }, [clearRecentStickers, closeConfirmModal]);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\">{stickerSet.title}</p>\n        {isRecent && (\n          <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n        )}\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === FAVORITE_SYMBOL_SET_ID && favoriteStickerIdsSet?.has(sticker.id)\n              ? onStickerUnfave : undefined}\n            onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n            onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentEmoji')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const premiumStickers = existingAddedSetIds\n        .map((l) => l.stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      if (premiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          title: lang('PremiumStickers'),\n          stickers: premiumStickers,\n          count: premiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, favoriteStickers, isCurrentUserPremium, recentStickers, chat, lang, stickerSetsById,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadRecentStickers();\n      sendMessageAction({ type: 'chooseSticker' });\n    }\n  }, [loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" noVideo />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n          noContextMenu\n          isCurrentUserPremium\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} noVideo />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsIds?: string[];\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  chatId,\n  selectedSendAsId,\n  sendAsIds,\n}) => {\n  const { saveDefaultSendAs } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsIds && !sendAsIds.length) {\n      onClose();\n    }\n  }, [sendAsIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsIds?.map((id, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const fullName = user ? getUserFullName(user) : chat?.title;\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleUserSelect(id)}\n            focus={selectedSendAsIndex === index}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              <div className=\"title\">\n                <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n              </div>\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, memo, useRef } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport renderText from '../common/helpers/renderText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isSomeModalOpen, onModalToggle, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            clickArg={undefined}\n            onClick={openModal}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: data.chat.username, messageId: data.messageId });\n  }, [data, openChatByUsername]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n  isChannelsPremiumLimitReached: boolean;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  isChannelsPremiumLimitReached,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n      isChannelsPremiumLimitReached: global.limitReachedModal?.limit === 'channels',\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, filter);\n  }, [chat.fullInfo?.members, currentUserId, filter]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n  maxPublicLinks,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId).filter((l) => l.isCreator && l.username);\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, closeManagement } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `t.me/${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions || []);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter((l) => !l.isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableActiveReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableActiveReactions?.map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  about,\n  date,\n  isChannel,\n  user,\n  serverTimeOffset,\n  chatId,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"checkout-info-item\":\"gLWXe4qIIINtZ3q9CmIX\",\"checkoutInfoItem\":\"gLWXe4qIIINtZ3q9CmIX\",\"checkout-info-item-icon\":\"YqZr6__8x50n06_r2wD8\",\"checkoutInfoItemIcon\":\"YqZr6__8x50n06_r2wD8\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiWebDocument } from '../../api/types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photo?: ApiWebDocument;\n    isRecurring?: boolean;\n    recurringTermsUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  onAcceptTos?: (isAccepted: boolean) => void;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  onAcceptTos,\n}) => {\n  const lang = useLang();\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl,\n  } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text=\"\"\n          isRtl={isRtl}\n        >\n          {langStringSplit[1]}\n        </SafeLink>\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, lang('PaymentCheckoutMethod'))}\n        {paymentProvider && renderCheckoutItem(\n          buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n          paymentProvider,\n          lang('PaymentCheckoutProvider'),\n        )}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, lang('PaymentShippingAddress'))}\n        {name && renderCheckoutItem('icon-user', name, lang('PaymentCheckoutName'))}\n        {phone && renderCheckoutItem('icon-phone', phone, lang('PaymentCheckoutPhoneNumber'))}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, lang('PaymentCheckoutShippingMethod'))}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className={styles.checkoutInfoItem}>\n      <i className={buildClassName(icon, styles.checkoutInfoItemIcon)}> </i>\n      <div className={styles.checkoutInfoItemInfo}>\n        <div className={styles.checkoutInfoItemInfoTitle}>\n          {title}\n        </div>\n        <p className={styles.checkoutInfoItemInfoData}>\n          {data}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            tabIndex={0}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const { closePaymentModal, openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closePaymentModal();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [closePaymentModal, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { ApiChat, ApiCountry } from '../../api/types';\nimport type { ShippingOption, Price } from '../../types';\nimport { PaymentStep } from '../../types';\n\nimport { selectChat } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getActions();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const lang = useLang();\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        validateRequest();\n        break;\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.PaymentInfo);\n        break;\n      case PaymentStep.PaymentInfo:\n        sendCredentials();\n        break;\n      case PaymentStep.Checkout:\n        sendForm();\n        break;\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n  }, [paymentDispatch]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  const isSubmitDisabled = isLoading\n    || Boolean(step === PaymentStep.Checkout && invoiceContent?.isRecurring && !isTosAccepted);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoiceContent?.isRecurring && 'recurring')}\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n    } = global.payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photo,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","video","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useOnChange","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isAvatar","canReport","onReport","onCloseMediaViewer","zoomLevelChange","setZoomLevelChange","onForward","downloadMessageMedia","cancelMessageMediaDownload","getActions","downloadProgress","handleDownloadClick","useCallback","handleZoomOut","handleZoomIn","lang","useLang","MenuButton","onTrigger","isOpen","Button","round","color","className","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","useFlag","seekerRef","isSeekingRef","isSeeking","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","map","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","onClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","videoRef","setIsPlayed","IS_TOUCH_ENV","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","muted","onPlay","onEnded","onTimeUpdate","join","square","ownProps","chatId","threadId","avatarOwnerId","mediaViewer","selectChatMessage","senderId","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","isFooterHidden","onFooterClick","setIsFooterHidden","isGhostAnimation","handleMouseMove","handleMouseOut","calculateMediaViewerDimensions","renderPhoto","textParts","renderMessageText","hasFooter","onMouseMove","onMouseOut","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","selectMedia","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleToggleFooterVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","right","isBetween","clamp","minOffsetY","top","maxOffsetY","bottom","type","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","target","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","isRtl","toFixed","selector","matches","messageId","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","chat","renderText","formatMediaDateTime","date","settings","byKey","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","close","handleFooterClick","handleForward","fromChatId","messageIds","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","useHistoryBack","onBack","ShowTransition","Transition","activeKey","name","ReportModal","subject","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","loadMore","onFilterChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","resetFilter","useInputFocusOnOpen","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","switchBotInline","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","setForwardChatId","exitForwardMode","openChatWithText","resetSwitchBotInline","setFilter","isShown","markIsShown","unmarkIsShown","chatAndContactIds","priorityIds","unique","chatIds","getCanPostInChat","MAIN_THREAD_ID","usersById","getGlobal","users","sortChatIds","filterChatsByName","filterUsersByName","handleSelectUser","botUsername","query","handleClose","renderingChatAndContactIds","useCurrentOrPrev","getErrorHeader","error","isSlowMode","hasErrorKey","pick","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","showNotification","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","getReadableErrorText","notifications","dismissNotification","localId","action","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","request","bot","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","Number","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","webApp","attachMenuBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleBotInAttachMenu","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","buttonText","queryId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","frame","once","contentWindow","postMessage","JSON","stringify","is_expanded","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","err","useWebAppFrame","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","prevIsPaymentModalOpen","handleToggleClick","isEnabled","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","isAttachMenuBot","destructive","hasSettings","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","closeBotAttachRequestModal","confirmBotAttachRequest","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","confirmIsDestructive","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","disablePictureInPicture","AnimatedCircleReaction","realIndex","isActivated","reaction","maxLength","handleClick","activateAnimation","mediaDataAround","aroundAnimation","isAnimated","animate","inanimate","isEffectEnded","markEffectEnded","unmarkEffectEnded","circleSize","angle","PI","totalAngle","cos","scaleNotFull","sin","handleClickEmoji","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","availableReactions","isIntervalPaused","pauseInterval","unpauseInterval","lastUnpauseTimeout","setOffset","setSize","renderedReactions","l","isPremium","slice","cycleRestrict","clientWidth","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","sticker","stickers","premium","renderedStickers","PREMIUM_FEATURE_TITLES","limits","reactions","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","then","handleSelectSlide","async","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","formatCurrency","monthlyAmount","currency","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","premiumModal","isClosing","isSuccess","fromUser","fromUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","startParam","showConfetti","prevIsPremium","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","openPremiumModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SafeLink","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","messageListType","canDelete","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","isForwardModalOpen","forwardMessages","isModalShown","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","find","ReactionStaticEmoji","fullName","PremiumIcon","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","LOCAL_TGS_URLS","stopActiveEmojiInteraction","isHiding","startHiding","isPlaying","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","getChatTitle","isVerified","VerifiedIcon","fakeType","FakeIcon","Link","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","isVoice","activeDownloads","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","amount","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","profileId","ProfileInfo","forceShowSelf","ChatExtra","leftElement","withGradient","big","langName","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","textareaRef","labelText","fullClassName","textarea","handleChange","htmlFor","ERROR_FIRST_NAME_MISSING","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","ZERO_POINT","children","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","offsetWidth","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","clientY","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","draggedIndex","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","handleDrag","splice","handleDragEnd","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","pill","fluid","isBlocked","isDragged","draggedTop","narrow","inactive","multiline","isStatic","secondaryIcon","handler","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","firstLetters","getFirstLetters","hasThumbnail","isVideos","IS_WEBM_SUPPORTED","firstSticker","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","noContextMenu","isCurrentUserPremium","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","stickerSetIds","added","setIds","stickerSetsById","setsById","defaultReaction","messageTextSize","messageSendKeyCombo","shouldSuggestStickers","shouldLoopStickers","timeFormat","stickerSettingsRef","observeIntersectionForCovers","setSticker","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","floor","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","handleMessageSendComboChange","newCombo","handleSuggestStickersChange","newValue","handleShouldLoopStickersChange","stickerSets","installedDate","RadioGroup","options","selected","fromSticker","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","noVideo","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","animatedEmoji","selectAnimatedEmoji","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","selectedReaction","setDefaultReaction","isInactive","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderAnimated","animatedClassNames","shouldRenderStatic","staticClassNames","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","r","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","menuRef","scrollableRef","noReactions","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","option","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","canCopyNumber","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","recentReactions","msg","handleReport","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleCopyNumber","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","handleAboutAdsOpen","handleSponsoredHide","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","requestCalendar","calendar","useSchedule","stickerSetAccessHash","isScheduleRequested","isPreloadedGlobally","handleButtonClick","STICKER_SIZE_MODAL","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","canReportChat","chatBot","REPLIES_USER_ID","selectChatBot","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","captionLimit","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","leftChars","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","emoji","native","image","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","favoriteStickers","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","handleClearRecent","stickersPerRow","STICKER_SIZE_PICKER","favoriteStickerIdsSet","isRecent","noAnimate","onUnfaveClick","FAVORITE_SYMBOL_SET_ID","has","onFaveClick","onRemoveRecentClick","canViewSet","stickerSetIntersections","favorite","recentStickers","addedSetIds","shouldPlay","loadRecentStickers","addRecentSticker","removeRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","defaultSets","existingAddedSetIds","pickTruthy","premiumStickers","hasEffect","flat","PREMIUM_STICKER_SET_ID","fullSet","CHAT_STICKER_SET_ID","noPopulatedSets","stickerSetEl","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","isChannelsPremiumLimitReached","limitReachedModal","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","acc","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","maxPublicLinks","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","radioGroup","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","noAdmins","adminIds","shouldUseSearchResults","listedIds","noScrollRestore","memberId","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","availableActiveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","isRecurring","recurringTermsUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","langStringSplit","renderTosLink","endsWith","parts","formatCardExpiry","teactExperimentControlled","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","closePaymentModal","SUPPORTED_PROVIDERS","step","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","general","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","setIsTosAccepted","canRenderFooter","PaymentStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","handleModalClose","isSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","handleFirstMonkeyLoad","playSegment","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","DEBUG","console","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","labelClassName","accept"],"sourceRoot":""}